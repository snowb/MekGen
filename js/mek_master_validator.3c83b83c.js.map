{"version":3,"sources":["webpack:///./src/store/modules/validators lazy ^.*$ namespace object","webpack:///./src/store/modules/validators/mek_master_validator.js"],"names":["map","./mek_armor_validators","./mek_armor_validators.js","./mek_master_validator","./mek_master_validator.js","./mek_servo_validators","./mek_servo_validators.js","webpackAsyncContext","req","ids","Promise","all","slice","__webpack_require__","e","then","id","resolve","Error","code","keys","Object","module","exports","r","__webpack_exports__","d","validateComponent","getAlerts","alerts","validators","importValidator","_module_name","_validator_prop_name","_module","module_list","module_name","validator_prop_name","forEach","_val","validateServo","_component","validatedData","cleanedComponent","mek_servo","type","selected_servo_type","update","concat","data","create_class_table","servo","selected_servo_class","trade_formatted","kills","kills_space_trade","kills_modifier","space","space_modifier","cost","trade","mek_armor","armor_filter","armor","selected_armor","selected_armor_type","RAM","selected_absorption","component_category","component_type"],"mappings":"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","file":"js/mek_master_validator.3c83b83c.js","sourcesContent":["var map = {\n\t\"./mek_armor_validators\": [\n\t\t\"db1c\",\n\t\t\"mek_armor_validators\"\n\t],\n\t\"./mek_armor_validators.js\": [\n\t\t\"db1c\",\n\t\t\"mek_armor_validators\"\n\t],\n\t\"./mek_master_validator\": [\n\t\t\"9972\"\n\t],\n\t\"./mek_master_validator.js\": [\n\t\t\"9972\"\n\t],\n\t\"./mek_servo_validators\": [\n\t\t\"e117\",\n\t\t\"mek_servo_validators\"\n\t],\n\t\"./mek_servo_validators.js\": [\n\t\t\"e117\",\n\t\t\"mek_servo_validators\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"7b06\";\nmodule.exports = webpackAsyncContext;","let alerts=[];\r\n\r\nlet validators={};\r\n//load mek_armor validators from module\r\n// import(/* webpackChunkName: \"[request]\" */\"./mek_armor_validators\")\r\n// .then((_module)=>\r\n// {\r\n//     validators.mek_armor=_module.validators;\r\n// });\r\n\r\nlet importValidator=(_module_name, _validator_prop_name)=>\r\n{\r\n    import(/* webpackChunkName: \"[request]\" */`${_module_name}`)\r\n    .then((_module)=>\r\n    {\r\n        validators[_validator_prop_name]=_module.validators;\r\n    });\r\n};\r\n\r\nlet module_list=\r\n[\r\n    {module_name:\"./mek_armor_validators\",validator_prop_name:\"mek_armor\"},\r\n    {module_name:\"./mek_servo_validators\",validator_prop_name:\"mek_servo\"},\r\n];\r\nmodule_list.forEach((_val)=>\r\n{\r\n    importValidator(_val.module_name,_val.validator_prop_name);\r\n});\r\n\r\nlet validateServo=(_component)=>\r\n{\r\n    let cleanedComponent=_component;\r\n    let validatedData;\r\n    //validate servo-type\r\n    validatedData=validators.mek_servo.type(\"type\",_component.selected_servo_type);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.selected_servo_type=validatedData.data;\r\n    //validate servo-class\r\n    validators.mek_servo.create_class_table(_component.selected_servo_type.type);\r\n    validatedData=validators.mek_servo.servo(\"code\",_component.selected_servo_class);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.selected_servo_class=validatedData.data;\r\n    //validate servo-kills-space-trade\r\n    let trade_formatted=\r\n        {\r\n            kills:_component.kills_space_trade.kills_modifier,\r\n            space:_component.kills_space_trade.space_modifier,\r\n            cost:_component.kills_space_trade.cost\r\n        };\r\n    validatedData=validators.mek_servo.trade(\r\n        trade_formatted,\r\n        _component.selected_servo_class.kills,\r\n        _component.selected_servo_class.space);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.kills_space_trade=validatedData.data;\r\n    //validate armor\r\n    validators.mek_armor.armor_filter(_component.selected_servo_class.code+2);\r\n    validatedData=validators.mek_armor.armor(\"code\",_component.selected_armor);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.selected_armor=validatedData.data;\r\n    //validate armor-type\r\n    validatedData=validators.mek_armor.type(\"damage_coefficient\",_component.selected_armor_type);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.selected_armor_type=validatedData.data;\r\n    //validate RAM\r\n    validatedData=validators.mek_armor.RAM(\"absorption\",_component.selected_absorption);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.selected_absorption=validatedData.data;\r\n    return cleanedComponent;\r\n};\r\n\r\nlet validateComponent=(_component)=>\r\n{\r\n    //console.log(_component);\r\n    let cleanedComponent;\r\n\r\n    //console.log(cleanedComponent.selected_armor)\r\n    /* *\r\n    *\r\n    * need to find a good way to 'scan' a provided component, with focused validation\r\n    * likely need to have a decent switch for component_category\r\n    * then component_type\r\n    * then mass-validate known props\r\n    *   also need to check for undefined?  \r\n    * \r\n    * \r\n    * finally return the cleaned/validate component\r\n    * \r\n    * */\r\n   if(_component.component_category==\"equipment\")\r\n   {//validate equipment\r\n        switch(_component.component_type)\r\n        {\r\n            case \"servo\":\r\n                cleanedComponent=validateServo(_component);\r\n                break;\r\n            case \"beam\":\r\n                //damage\r\n                //accuracy\r\n                //brust val\r\n                //range mod\r\n                //warm up time\r\n                //shots (>0)\r\n                //wide angle\r\n                //features\r\n                //efficiency!?\r\n                break;\r\n            case \"emw\":\r\n                //damage\r\n                //accuracy\r\n                //atk factor\r\n                //turns in use\r\n                //features\r\n                //efficiency!?\r\n                break;\r\n            case \"melee\":\r\n                //damage\r\n                //accuracy\r\n                //entangle range trade\r\n                //features\r\n                //efficiency!?\r\n                break;\r\n            case \"missile\":\r\n                //damage\r\n                //accuracy\r\n                //range mod\r\n                //pack size (>0)\r\n                //smart\r\n                //skill (only with Smart >=1)\r\n                //blast radius\r\n                //features\r\n                //efficiency!?\r\n                break;\r\n            case \"projectile\":\r\n                //damage\r\n                //accuracy\r\n                //burst val\r\n                //multi-feed\r\n                //range mod\r\n                //features\r\n                //efficiency!?\r\n                break;\r\n            case \"magazine\":\r\n                //gun??\r\n                //ammo table/feature\r\n                //shots (>0)\r\n                break;\r\n            case \"energy_pool\":\r\n                //energy_pool\r\n                //portfolio size\r\n                //feature\r\n                //efficiency!?\r\n                break;\r\n            case \"shield\":\r\n                //class\r\n                //def ability, STANDARD ONLY\r\n                //binder, STD and ACTVE ONLY\r\n                //armor type, STD and ACTVE ONLY\r\n                //RAM, STD and ACTVE ONLY\r\n                //weakness, REACTIVE ONLY\r\n                //reset time, REACTIVE ONLY\r\n                //turns in use, REACTIVE ONLY\r\n                //efficiency!?\r\n                break;\r\n            case \"reflector\":\r\n                //quality\r\n                //efficiency!?\r\n                break;\r\n            case \"locomotion\":\r\n                //type\r\n                //class\r\n                break;\r\n        }\r\n   }\r\n   return cleanedComponent;\r\n};\r\n\r\nlet getAlerts=()=>alerts;\r\n\r\nexport {validateComponent, getAlerts};"],"sourceRoot":""}