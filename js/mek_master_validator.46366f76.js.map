{"version":3,"sources":["webpack:///./src/store/modules/validators lazy ^.*$ namespace object","webpack:///./src/store/modules/validators/mek_master_validator.js"],"names":["map","./mek_armor_validators","./mek_armor_validators.js","./mek_beam_validators","./mek_beam_validators.js","./mek_master_validator","./mek_master_validator.js","./mek_servo_validators","./mek_servo_validators.js","webpackAsyncContext","req","ids","Promise","all","slice","__webpack_require__","e","then","id","resolve","Error","code","keys","Object","module","exports","r","__webpack_exports__","d","validateComponent","getAlerts","alerts","validators","importValidator","_module_name","_validator_prop_name","_module","module_list","module_name","validator_prop_name","forEach","_val","validateServo","_component","validatedData","cleanedComponent","mek_servo","type","selected_servo_type","update","concat","data","create_class_table","servo","selected_servo_class","trade_formatted","kills","kills_space_trade","kills_modifier","space","space_modifier","cost","trade","mek_armor","armor_filter","armor","selected_armor","selected_armor_type","RAM","selected_absorption","validateBeam","mek_beam","damage","selected_damage","base_range","range","update_range_mod","range_mod","selected_range_mod","burst_value","selected_burst_value","filter_feature","feature","feature_array","cleaned_array","magFed","some","update_shots","shots","selected_shots","accuracy","selected_accuracy","warm_up","selected_warm_up_time","wide_angle","selected_wide_angle","component_category","component_type"],"mappings":"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","file":"js/mek_master_validator.46366f76.js","sourcesContent":["var map = {\n\t\"./mek_armor_validators\": [\n\t\t\"db1c\",\n\t\t\"mek_armor_validators\"\n\t],\n\t\"./mek_armor_validators.js\": [\n\t\t\"db1c\",\n\t\t\"mek_armor_validators\"\n\t],\n\t\"./mek_beam_validators\": [\n\t\t\"7757\",\n\t\t\"mek_beam_validators\"\n\t],\n\t\"./mek_beam_validators.js\": [\n\t\t\"7757\",\n\t\t\"mek_beam_validators\"\n\t],\n\t\"./mek_master_validator\": [\n\t\t\"9972\"\n\t],\n\t\"./mek_master_validator.js\": [\n\t\t\"9972\"\n\t],\n\t\"./mek_servo_validators\": [\n\t\t\"e117\",\n\t\t\"mek_servo_validators\"\n\t],\n\t\"./mek_servo_validators.js\": [\n\t\t\"e117\",\n\t\t\"mek_servo_validators\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"7b06\";\nmodule.exports = webpackAsyncContext;","let alerts=[];\r\n\r\nlet validators={};\r\n//load mek_armor validators from module\r\n// import(/* webpackChunkName: \"[request]\" */\"./mek_armor_validators\")\r\n// .then((_module)=>\r\n// {\r\n//     validators.mek_armor=_module.validators;\r\n// });\r\n\r\nlet importValidator=(_module_name, _validator_prop_name)=>\r\n{\r\n    import(/* webpackChunkName: \"[request]\" */`${_module_name}`)\r\n    .then((_module)=>\r\n    {\r\n        validators[_validator_prop_name]=_module.validators;\r\n    });\r\n};\r\n\r\nlet module_list=\r\n[\r\n    {module_name:\"./mek_armor_validators\",validator_prop_name:\"mek_armor\"},\r\n    {module_name:\"./mek_servo_validators\",validator_prop_name:\"mek_servo\"},\r\n    {module_name:\"./mek_beam_validators\",validator_prop_name:\"mek_beam\"},\r\n];\r\nmodule_list.forEach((_val)=>\r\n{\r\n    importValidator(_val.module_name,_val.validator_prop_name);\r\n});\r\n\r\nlet validateServo=(_component)=>\r\n{\r\n    let cleanedComponent=_component;\r\n    let validatedData;\r\n    //validate servo-type\r\n    validatedData=validators.mek_servo.type(\"type\",_component.selected_servo_type);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.selected_servo_type=validatedData.data;\r\n    //validate servo-class\r\n    validators.mek_servo.create_class_table(_component.selected_servo_type.type);\r\n    validatedData=validators.mek_servo.servo(\"code\",_component.selected_servo_class);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.selected_servo_class=validatedData.data;\r\n    //validate servo-kills-space-trade\r\n    let trade_formatted=\r\n        {\r\n            kills:_component.kills_space_trade.kills_modifier,\r\n            space:_component.kills_space_trade.space_modifier,\r\n            cost:_component.kills_space_trade.cost\r\n        };\r\n    validatedData=validators.mek_servo.trade(\r\n        trade_formatted,\r\n        _component.selected_servo_class.kills,\r\n        _component.selected_servo_class.space);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.kills_space_trade=validatedData.data;\r\n    //validate armor\r\n    validators.mek_armor.armor_filter(_component.selected_servo_class.code+2);\r\n    validatedData=validators.mek_armor.armor(\"code\",_component.selected_armor);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.selected_armor=validatedData.data;\r\n    //validate armor-type\r\n    validatedData=validators.mek_armor.type(\"damage_coefficient\",_component.selected_armor_type);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.selected_armor_type=validatedData.data;\r\n    //validate RAM\r\n    validatedData=validators.mek_armor.RAM(\"absorption\",_component.selected_absorption);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.selected_absorption=validatedData.data;\r\n    return cleanedComponent;\r\n};\r\n\r\nlet validateBeam=(_component)=>\r\n{\r\n    let cleanedComponent=_component;\r\n    let validatedData;\r\n    //validate damage\r\n    validatedData=validators.mek_beam.damage(\"damage\",_component.selected_damage);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.selected_damage=validatedData.data;\r\n    //extract base range for range_mod update\r\n    let base_range=cleanedComponent.selected_damage.range;\r\n    //update range_mod table\r\n    validators.mek_beam.update_range_mod(base_range);\r\n    //validate range mod\r\n    validatedData=validators.mek_beam.range_mod(\"range_mod\",_component.selected_range_mod);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.selected_range_mod=validatedData.data;\r\n    //validate burst_value\r\n    validatedData=validators.mek_beam.burst_value(\"burst_value\",_component.selected_burst_value);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.selected_burst_value=validatedData.data;\r\n    //extract BV for feature data table update\r\n    let burst_value=cleanedComponent.selected_burst_value.burst_value;\r\n    //update feature table\r\n    validators.mek_beam.filter_feature(burst_value);\r\n    //validate features\r\n    validatedData=validators.mek_beam.feature(_component.feature_array,\"feature\");\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.feature_array=validatedData.cleaned_array;\r\n    //extract if Mag-Fed\r\n    let magFed=cleanedComponent.feature_array.some(_val=>_val.feature==\"Mag-Fed\");\r\n    //update shots table\r\n    validators.mek_beam.update_shots(magFed);\r\n    //validate shots\r\n    validatedData=validators.mek_beam.shots(\"shots\",_component.selected_shots);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.selected_shots=validatedData.data;\r\n    //validate accuracy\r\n    validatedData=validators.mek_beam.accuracy(\"accuracy\",_component.selected_accuracy);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.selected_accuracy=validatedData.data;\r\n    //validate warm-up\r\n    validatedData=validators.mek_beam.warm_up(\"time\",_component.selected_warm_up_time);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.selected_warm_up_time=validatedData.data;\r\n    //validate wide-angle\r\n    validatedData=validators.mek_beam.wide_angle(\"angle\",_component.selected_wide_angle);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.selected_wide_angle=validatedData.data;\r\n\r\n    return cleanedComponent;\r\n};\r\n\r\nlet validateComponent=(_component)=>\r\n{\r\n    //console.log(_component);\r\n    let cleanedComponent;\r\n\r\n    //console.log(cleanedComponent.selected_armor)\r\n    /* *\r\n    *\r\n    * need to find a good way to 'scan' a provided component, with focused validation\r\n    * likely need to have a decent switch for component_category\r\n    * then component_type\r\n    * then mass-validate known props\r\n    *   also need to check for undefined?  \r\n    * \r\n    * \r\n    * finally return the cleaned/validate component\r\n    * \r\n    * */\r\n   if(_component.component_category==\"equipment\")\r\n   {//validate equipment\r\n        switch(_component.component_type)\r\n        {\r\n            case \"servo\":\r\n                cleanedComponent=validateServo(_component);\r\n                break;\r\n            case \"beam\":\r\n                cleanedComponent=validateBeam(_component);\r\n                //damage\r\n                //accuracy\r\n                //brust val\r\n                //range mod\r\n                //warm up time\r\n                //shots (>0)\r\n                //wide angle\r\n                //features\r\n                //efficiency!?\r\n                break;\r\n            case \"emw\":\r\n                //damage\r\n                //accuracy\r\n                //atk factor\r\n                //turns in use\r\n                //features\r\n                //efficiency!?\r\n                break;\r\n            case \"melee\":\r\n                //damage\r\n                //accuracy\r\n                //entangle range trade\r\n                //features\r\n                //efficiency!?\r\n                break;\r\n            case \"missile\":\r\n                //damage\r\n                //accuracy\r\n                //range mod\r\n                //pack size (>0)\r\n                //smart\r\n                //skill (only with Smart >=1)\r\n                //blast radius\r\n                //features\r\n                //efficiency!?\r\n                break;\r\n            case \"projectile\":\r\n                //damage\r\n                //accuracy\r\n                //burst val\r\n                //multi-feed\r\n                //range mod\r\n                //features\r\n                //efficiency!?\r\n                break;\r\n            case \"magazine\":\r\n                //gun??\r\n                //ammo table/feature\r\n                //shots (>0)\r\n                break;\r\n            case \"energy_pool\":\r\n                //energy_pool\r\n                //portfolio size\r\n                //feature\r\n                //efficiency!?\r\n                break;\r\n            case \"shield\":\r\n                //class\r\n                //def ability, STANDARD ONLY\r\n                //binder, STD and ACTVE ONLY\r\n                //armor type, STD and ACTVE ONLY\r\n                //RAM, STD and ACTVE ONLY\r\n                //weakness, REACTIVE ONLY\r\n                //reset time, REACTIVE ONLY\r\n                //turns in use, REACTIVE ONLY\r\n                //efficiency!?\r\n                break;\r\n            case \"reflector\":\r\n                //quality\r\n                //efficiency!?\r\n                break;\r\n            case \"locomotion\":\r\n                //type\r\n                //class\r\n                break;\r\n        }\r\n   }\r\n   return cleanedComponent;\r\n};\r\n\r\nlet getAlerts=()=>alerts;\r\n\r\nexport {validateComponent, getAlerts};"],"sourceRoot":""}