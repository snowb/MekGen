{"version":3,"sources":["webpack:///./src/data_table_modules/universal/mek_partial-function-data-module.js","webpack:///./src/data_table_modules/mek_emw/mek_emw-damage-data-module.js"],"names":["__webpack_require__","d","__webpack_exports__","partial_validate","partial_has_feature","partial_get_feature","partial_cleaned_feature","_data_table","_validation_keys","_data","Array","isArray","length","valid","some","_val","every","_keys","_key","undefined","_has_feature","found_feature","_table_val","_validator","_get_feature","_default_data","_name","_pkey","_feature","data","key_list","update","alerts","json_data","JSON","stringify","parse","push","r","damage_data_table","damage_validate","has_feature","get_feature","cleaned_feature","create_damage_data_table","_data_table_modules_universal_mek_partial_function_data_module__WEBPACK_IMPORTED_MODULE_0__","raw_damage_data_table","apply","map","_el","_index","damage","cost","data_table_keys","default_data","data_cached","_is_nonvariable_beam_shield","_elem","newElem","cached_validate"],"mappings":"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","file":"js/mek_emw-damage-data-module.33819d89.js","sourcesContent":["//data table module, raw data output for re-use in non-vue-component formats\r\n\r\n//ATTEMPT: make validators and has_feat and get_feat and cleaned_feat functions \r\n//          neutral and reusable across all data modules\r\n\r\n//partial data validator\r\n//called with data_table and validation_keys in data-module\r\nlet partial_validate=(_data_table,_validation_keys)=>(_data)=>\r\n{//_data_table: Array, array of data to validate against\r\n    //_validation_keys: Array, keys to be compared between passed in data and data_table\r\n    //_data: Object, data to be compared to data table \r\n    if(typeof _data===\"undefined\" || !Array.isArray(_validation_keys) || _validation_keys.length==0)\r\n    {\r\n        return false;\r\n    }\r\n    let valid=_data_table.some((_val)=>\r\n    {\r\n        return _validation_keys.every((_keys)=>\r\n        {//return true if all validation_keys in _data match an element in _data_table\r\n            return _data[_keys]==_val[_keys];\r\n        });\r\n    });\r\n    return valid;\r\n}\r\n\r\n//partial_has_feature, determine if provided data table has matching element with provided key and val\r\n//called in data module to generate full function with local data\r\nlet partial_has_feature=(_data_table)=>(_key, _val)=>\r\n{\r\n    return _data_table.some((_data)=>\r\n    {\r\n        return _data[_key]!==undefined && _data[_key]==_val;\r\n    });\r\n};\r\n\r\n//partial get_feature, returns full function for data module\r\n//requires data_table (array) and module's has_feature function\r\n//returns full matching element in provided data table\r\n//has_feature must exist in data table module\r\nlet partial_get_feature=(_data_table, _has_feature)=>(_key, _val)=>\r\n{\r\n    let found_feature=null;\r\n    if(_has_feature(_key,_val))\r\n    {\r\n        _data_table.some((_table_val)=>\r\n        {\r\n            if(_table_val[_key]==_val)\r\n            {\r\n                found_feature=_table_val;\r\n                return true;\r\n            }\r\n        },this);\r\n    }\r\n    return found_feature;\r\n}\r\n\r\nlet partial_cleaned_feature=(_validator, _has_feature, _get_feature, _default_data, _name)=>(_pkey, _feature)=>\r\n{//input: primary key, selected feature, filtered data table\r\n    let data=undefined;\r\n    let key_list=[];\r\n    let update=false;\r\n    let alerts=[];\r\n    let json_data=JSON.stringify(_feature);\r\n\r\n    if(_feature===undefined || !_has_feature(_pkey,_feature[_pkey]))\r\n    {\r\n        data=_default_data;\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting to default. ****\");\r\n    }\r\n    else if(!_validator(_feature))\r\n    {\r\n        data=JSON.parse(JSON.stringify(_get_feature(_pkey,_feature[_pkey])));\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting. ****\");\r\n    }\r\n    else\r\n    {\r\n        data=JSON.parse(JSON.stringify(_feature));\r\n        key_list=[data[_pkey]];\r\n        update=false;\r\n    }\r\n    return {data:data, key_list:key_list, update:update, alerts:alerts};\r\n}\r\n\r\nexport {partial_validate, partial_has_feature, partial_get_feature, partial_cleaned_feature};\r\n","//data table module, raw data output for re-use in non-vue-component formats\r\nimport {partial_validate, partial_has_feature, partial_get_feature, partial_cleaned_feature} \r\n    from \"@/data_table_modules/universal/mek_partial-function-data-module\";\r\n\r\n//create new damage_data_table\r\nlet raw_damage_data_table=Array.apply({}, Array(20)).map((_el,_index)=>\r\n{\r\n    let damage=_index+1;\r\n    let cost=damage;\r\n    return {damage:damage,cost:cost};\r\n});\r\nlet data_table_keys=[\"damage\",\"cost\"];\r\nlet default_data={damage:1,cost:1};\r\n\r\nlet damage_data_table=JSON.parse(JSON.stringify(raw_damage_data_table));\r\n\r\nlet data_cached=false;\r\n//update damage data table\r\nlet create_damage_data_table=(_is_nonvariable_beam_shield)=>\r\n{\r\n    if(!_is_nonvariable_beam_shield)\r\n    {\r\n        damage_data_table=JSON.parse(JSON.stringify(raw_damage_data_table));\r\n        default_data={damage:1,cost:1};\r\n    }\r\n    else\r\n    {\r\n        damage_data_table=raw_damage_data_table.map((_elem)=>\r\n        {\r\n            let newElem={damage:_elem.damage/2, cost:_elem.cost};\r\n            return newElem;\r\n        });\r\n        default_data={damage:0.5,cost:1};\r\n    }\r\n    data_cached=false;\r\n};\r\n\r\nlet cached_validate=partial_validate(damage_data_table, data_table_keys);\r\n//data validator for damage_data_table\r\n//call partial_validate with appropriate data for full validate\r\nlet damage_validate=(_data)=>\r\n{\r\n    if(data_cached)\r\n    {\r\n        return cached_validate(_data);\r\n    }\r\n    data_cached=true;\r\n    cached_validate=partial_validate(damage_data_table, data_table_keys);\r\n    return cached_validate(_data);\r\n};\r\n\r\n\r\n//completed function for checking if data has data\r\nlet has_feature=(_pkey,_data)=>\r\n{\r\n    return partial_has_feature(damage_data_table)(_pkey,_data);\r\n};\r\n\r\n//completed function for returning matching data\r\nlet get_feature=(_pkey,_data)=>\r\n{\r\n    return partial_get_feature(damage_data_table, has_feature)(_pkey,_data);\r\n};\r\n\r\n//completed function for returning cleaed data\r\nlet cleaned_feature=\r\n    partial_cleaned_feature(damage_validate, has_feature, get_feature, default_data, \"Mek_EMW-Damage\");\r\n\r\nexport {damage_data_table, damage_validate, has_feature, get_feature, cleaned_feature, create_damage_data_table};\r\n"],"sourceRoot":""}