(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["mek_servo_validator"],{de33:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateComponent", function() { return validateComponent; });\n/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ac6a");\n/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0__);\n\nlet validators = {};\n__webpack_require__.e(/* import() | mek_servo-class-data-module */ "mek_servo-class-data-module").then(__webpack_require__.bind(null, "063b")).then(_module => {\n  validators.servo_class = _module.cleaned_feature;\n  validators.create_class_table = _module.create_class_data_table;\n});\n__webpack_require__.e(/* import() | mek_servo-kills-space-trade-data-module */ "mek_servo-kills-space-trade-data-module").then(__webpack_require__.bind(null, "f1d4")).then(_module => {\n  validators.servo_trade = _module.cleaned_feature;\n});\n__webpack_require__.e(/* import() | mek_servo-type-data-module */ "mek_servo-type-data-module").then(__webpack_require__.bind(null, "5ca7")).then(_module => {\n  validators.servo_type = _module.cleaned_feature;\n});\n__webpack_require__.e(/* import() | mek_armor-data-module */ "mek_armor-data-module").then(__webpack_require__.bind(null, "4753")).then(_module => {\n  validators.armor = _module.cleaned_feature;\n  validators.armor_filter = _module.filter_data_table;\n});\n__webpack_require__.e(/* import() | mek_armor-type-data-module */ "mek_armor-type-data-module").then(__webpack_require__.bind(null, "e492")).then(_module => {\n  validators.armor_type = _module.cleaned_feature;\n});\n__webpack_require__.e(/* import() | mek_armor-RAM-data-module */ "mek_armor-RAM-data-module").then(__webpack_require__.bind(null, "4277")).then(_module => {\n  validators.armor_RAM = _module.cleaned_feature;\n});\nlet loopValidators, updateMultipliers, round;\n__webpack_require__.e(/* import() | validator_functions */ "validator_functions").then(__webpack_require__.bind(null, "07de")).then(_module => {\n  loopValidators = _module.loopValidators;\n  updateMultipliers = _module.updateMultipliers;\n  round = _module.round;\n});\n\nvalidators.derived = _component => {\n  //component unique derived value validation\n  let cleanedComponent = _component;\n  let alerts = [];\n  let updateList = ["selected_armor_type", "selected_absorption"]; //update multipliers\n\n  let validatedData = updateMultipliers(updateList, cleanedComponent, "Mek-Servo");\n  cleanedComponent.cost_multipliers.armor = validatedData.data;\n  alerts = alerts.concat(validatedData.alerts);\n  let cost_multiplier = Object.entries(cleanedComponent.cost_multipliers.armor).reduce((_multi, _val) => {\n    //calc new cost_multiplier\n    return _multi * _val[1];\n  }, 1);\n  cost_multiplier = round(cost_multiplier, 2);\n\n  if (cleanedComponent.armor_cost_multiplier != cost_multiplier) {\n    //correct cost_multiplier if mismatch\n    alerts.push("Mek-Servo: cost_multiplier.armor");\n    alerts.push("**** Invalid Armor Cost Multiplier. Correcting. ****");\n    cleanedComponent.armor_cost_multiplier = cost_multiplier;\n  }\n\n  let newCost = cleanedComponent.selected_servo_class.cost + cleanedComponent.selected_armor.cost * cleanedComponent.armor_cost_multiplier + cleanedComponent.kills_space_trade.cost;\n  newCost = round(newCost, 2);\n\n  if (cleanedComponent.cost != newCost) {\n    //correct cost if mismatch\n    alerts.push("Mek-Servo: cost");\n    alerts.push("**** Invalid Cost. Correcting. ****");\n    cleanedComponent.cost = newCost;\n  }\n\n  let newWeight = (cleanedComponent.total_kills + cleanedComponent.selected_armor.stopping_power) / 2;\n  newWeight = round(newWeight, 2);\n\n  if (cleanedComponent.weight != newWeight) {\n    //correct weight if mismatch\n    alerts.push("Mek-Servo: weight");\n    alerts.push("**** Invalid Weight. Correcting. ****");\n    cleanedComponent.weight = newWeight;\n  } // update total kills\n\n\n  let newTotalKills = cleanedComponent.selected_servo_class.kills + cleanedComponent.kills_space_trade.kills_modifier;\n\n  if (cleanedComponent.total_kills != newTotalKills) {\n    alerts.push("Mek-Servo: total_kills");\n    alerts.push("**** Invalid Total Kills. Correcting. ****");\n    cleanedComponent.total_kills = newTotalKills;\n  } // update available_space\n\n\n  let newAvailSpace = cleanedComponent.selected_servo_class.space + cleanedComponent.kills_space_trade.space_modifier;\n\n  if (cleanedComponent.available_space != newAvailSpace) {\n    alerts.push("Mek-Servo: available_space");\n    alerts.push("**** Invalid Available Space. Correcting. ****");\n    cleanedComponent.available_space = newAvailSpace;\n  }\n\n  return {\n    data: cleanedComponent,\n    alerts: alerts\n  };\n};\n\nlet validateComponent = _component => {\n  let cleanedComponent = _component;\n  let validatedData; //let updateList=["selected_armor_type","selected_absorption"];\n\n  let loopAlerts;\n  let alerts = [];\n  let componentsToValidate = [{\n    validator: validators.servo_type,\n    pkey: "type",\n    component_prop: "selected_servo_type",\n    skipUpdateList: true\n  }, {\n    validator: validators.armor_type,\n    pkey: "damage_coefficient",\n    component_prop: "selected_armor_type"\n  }, {\n    validator: validators.armor_RAM,\n    pkey: "absorption",\n    component_prop: \'selected_absorption\'\n  }];\n\n  var _loopValidators = loopValidators(componentsToValidate, cleanedComponent);\n\n  cleanedComponent = _loopValidators.cleanedComponent;\n  loopAlerts = _loopValidators.loopAlerts;\n  alerts = alerts.concat(loopAlerts); //update mek_servo class table based on mek servo type\n\n  validators.create_class_table(_component.selected_servo_type.type); //validate servo-class\n\n  validatedData = validators.servo_class("code", _component.selected_servo_class);\n  alerts = alerts.concat(validatedData.alerts);\n  cleanedComponent.selected_servo_class = validatedData.data; //generate properly formatted kill-space-trade data\n\n  let trade_formatted = {\n    kills_modifier: _component.kills_space_trade.kills_modifier,\n    space_modifier: _component.kills_space_trade.space_modifier,\n    cost: _component.kills_space_trade.cost,\n    kills: _component.kills_space_trade.kills,\n    space: _component.kills_space_trade.space\n  }; //validate servo-kills-space-trade\n\n  validatedData = validators.servo_trade(trade_formatted, _component.selected_servo_class.kills, _component.selected_servo_class.space);\n  alerts = alerts.concat(validatedData.alerts);\n  cleanedComponent.kills_space_trade = validatedData.data; //update armor based on servo class\n\n  validators.armor_filter(_component.selected_servo_class.code + 2); //validate armor\n\n  validatedData = validators.armor("code", _component.selected_armor);\n  alerts = alerts.concat(validatedData.alerts);\n  cleanedComponent.selected_armor = validatedData.data; //validate derived data\n\n  validatedData = validators.derived(cleanedComponent);\n  cleanedComponent = validatedData.data;\n  alerts = alerts.concat(validatedData.alerts);\n  return {\n    data: cleanedComponent,\n    alerts: alerts\n  };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///de33\n')}}]);