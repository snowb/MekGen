{"version":3,"sources":["webpack:///./src/data_table_modules/universal/mek_partial-function-data-module.js","webpack:///./node_modules/core-js/library/fn/json/stringify.js","webpack:///./src/data_table_modules/mek_projectile/mek_projectile-burst-value-data-module.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/json/stringify.js"],"names":["partial_validate","_data_table","_validation_keys","_data","F_DEV_Projects_Mekton_Mek_Generator_node_modules_babel_runtime_corejs2_core_js_array_is_array__WEBPACK_IMPORTED_MODULE_1___default","length","valid","some","_val","every","_keys","partial_has_feature","_key","undefined","partial_get_feature","_has_feature","found_feature","_table_val","_this","partial_cleaned_feature","_validator","_get_feature","_default_data","_name","_pkey","_feature","data","key_list","update","alerts","json_data","F_DEV_Projects_Mekton_Mek_Generator_node_modules_babel_runtime_corejs2_core_js_json_stringify__WEBPACK_IMPORTED_MODULE_0___default","JSON","parse","push","core","__webpack_require__","$JSON","stringify","module","exports","it","apply","arguments","r","__webpack_exports__","d","burst_value_data_table","burst_value_validate","has_feature","get_feature","cleaned_feature","_data_table_modules_universal_mek_partial_function_data_module__WEBPACK_IMPORTED_MODULE_0__","burst_value","cost","data_table_keys","default_data"],"mappings":"2WAOIA,EAAiB,SAACC,EAAYC,GAAb,OAAgC,SAACC,GAIlD,GAAkB,qBAARA,IAAwBC,IAAcF,IAA8C,GAAzBA,EAAiBG,OAElF,OAAO,EAEX,IAAIC,EAAML,EAAYM,KAAK,SAACC,GAExB,OAAON,EAAiBO,MAAM,SAACC,GAE3B,OAAOP,EAAMO,IAAQF,EAAKE,OAGlC,OAAOJ,IAKPK,EAAoB,SAACV,GAAD,OAAe,SAACW,EAAMJ,GAE1C,OAAOP,EAAYM,KAAK,SAACJ,GAErB,YAAqBU,IAAdV,EAAMS,IAAqBT,EAAMS,IAAOJ,MAQnDM,EAAoB,SAACb,EAAac,GAAd,OAA6B,SAACH,EAAMJ,GAExD,IAAIQ,EAAc,KAYlB,OAXGD,EAAaH,EAAKJ,IAEjBP,EAAYM,KAAK,SAACU,GAEd,GAAGA,EAAWL,IAAOJ,EAGjB,OADAQ,EAAcC,GACP,GAEbC,GAECF,IAGPG,EAAwB,SAACC,EAAYL,EAAcM,EAAcC,EAAeC,GAAxD,OAAgE,SAACC,EAAOC,GAEhG,IAAIC,OAAKb,EACLc,EAAS,GACTC,GAAO,EACPC,EAAO,GACPC,EAAUC,IAAeN,GAwB7B,YAtBcZ,IAAXY,GAAyBV,EAAaS,EAAMC,EAASD,IAQ/CJ,EAAWK,IAUhBC,EAAKM,KAAKC,MAAMF,IAAeN,IAC/BE,EAAS,CAACD,EAAKF,IACfI,GAAO,IAVPF,EAAKM,KAAKC,MAAMF,IAAeV,EAAaG,EAAMC,EAASD,MAC3DG,EAAS,CAACD,EAAKF,IACfI,GAAO,EACPC,EAAOK,KAAKX,EAAM,KAAKO,GACvBD,EAAOK,KAAK,uCAZZR,EAAKJ,EACLK,EAAS,CAACD,EAAKF,IACfI,GAAO,EACPC,EAAOK,KAAKX,EAAM,KAAKO,GACvBD,EAAOK,KAAK,iDAgBT,CAACR,KAAKA,EAAMC,SAASA,EAAUC,OAAOA,EAAQC,OAAOA,2BCtFhE,IAAAM,EAAWC,EAAQ,QACnBC,EAAAF,EAAAH,OAAAG,EAAAH,KAAA,CAAuCM,UAAAN,KAAAM,YACvCC,EAAAC,QAAA,SAAAC,GACA,OAAAJ,EAAAC,UAAAI,MAAAL,EAAAM,+CCHAP,EAAAQ,EAAAC,GAAAT,EAAAU,EAAAD,EAAA,2CAAAE,IAAAX,EAAAU,EAAAD,EAAA,yCAAAG,IAAAZ,EAAAU,EAAAD,EAAA,gCAAAI,IAAAb,EAAAU,EAAAD,EAAA,gCAAAK,IAAAd,EAAAU,EAAAD,EAAA,oCAAAM,IAAA,IAAAC,EAAAhB,EAAA,QAKIW,EACJ,CACI,CAACM,YAAY,EAAEC,KAAK,GACpB,CAACD,YAAY,EAAEC,KAAK,KACpB,CAACD,YAAY,EAAEC,KAAK,GACpB,CAACD,YAAY,EAAEC,KAAK,KACpB,CAACD,YAAY,EAAEC,KAAK,GACpB,CAACD,YAAY,EAAEC,KAAK,KACpB,CAACD,YAAY,EAAEC,KAAK,GACpB,CAACD,YAAY,EAAEC,KAAK,MAEpBC,EAAgB,CAAC,cAAc,QAC/BC,EAAa,CAACH,YAAY,EAAEC,KAAK,GAIjCN,EAAqBhD,eAAiB+C,EAAwBQ,GAG9DN,EAAYtC,eAAoBoC,GAGhCG,EAAYpC,eAAoBiC,EAAwBE,GAGxDE,EACAhC,eAAwB6B,EAAsBC,EAAaC,EAAaM,EAAc,oDC/B1FjB,EAAAC,QAAiBJ,EAAQ","file":"js/mek_projectile-burst-value-data-module-legacy.9deb6f29.js","sourcesContent":["//data table module, raw data output for re-use in non-vue-component formats\r\n\r\n//ATTEMPT: make validators and has_feat and get_feat and cleaned_feat functions \r\n//          neutral and reusable across all data modules\r\n\r\n//partial data validator\r\n//called with data_table and validation_keys in data-module\r\nlet partial_validate=(_data_table,_validation_keys)=>(_data)=>\r\n{//_data_table: Array, array of data to validate against\r\n    //_validation_keys: Array, keys to be compared between passed in data and data_table\r\n    //_data: Object, data to be compared to data table \r\n    if(typeof _data===\"undefined\" || !Array.isArray(_validation_keys) || _validation_keys.length==0)\r\n    {\r\n        return false;\r\n    }\r\n    let valid=_data_table.some((_val)=>\r\n    {\r\n        return _validation_keys.every((_keys)=>\r\n        {//return true if all validation_keys in _data match an element in _data_table\r\n            return _data[_keys]==_val[_keys];\r\n        });\r\n    });\r\n    return valid;\r\n}\r\n\r\n//partial_has_feature, determine if provided data table has matching element with provided key and val\r\n//called in data module to generate full function with local data\r\nlet partial_has_feature=(_data_table)=>(_key, _val)=>\r\n{\r\n    return _data_table.some((_data)=>\r\n    {\r\n        return _data[_key]!==undefined && _data[_key]==_val;\r\n    });\r\n};\r\n\r\n//partial get_feature, returns full function for data module\r\n//requires data_table (array) and module's has_feature function\r\n//returns full matching element in provided data table\r\n//has_feature must exist in data table module\r\nlet partial_get_feature=(_data_table, _has_feature)=>(_key, _val)=>\r\n{\r\n    let found_feature=null;\r\n    if(_has_feature(_key,_val))\r\n    {\r\n        _data_table.some((_table_val)=>\r\n        {\r\n            if(_table_val[_key]==_val)\r\n            {\r\n                found_feature=_table_val;\r\n                return true;\r\n            }\r\n        },this);\r\n    }\r\n    return found_feature;\r\n}\r\n\r\nlet partial_cleaned_feature=(_validator, _has_feature, _get_feature, _default_data, _name)=>(_pkey, _feature)=>\r\n{//input: primary key, selected feature, filtered data table\r\n    let data=undefined;\r\n    let key_list=[];\r\n    let update=false;\r\n    let alerts=[];\r\n    let json_data=JSON.stringify(_feature);\r\n\r\n    if(_feature===undefined || !_has_feature(_pkey,_feature[_pkey]))\r\n    {\r\n        data=_default_data;\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting to default. ****\");\r\n    }\r\n    else if(!_validator(_feature))\r\n    {\r\n        data=JSON.parse(JSON.stringify(_get_feature(_pkey,_feature[_pkey])));\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting. ****\");\r\n    }\r\n    else\r\n    {\r\n        data=JSON.parse(JSON.stringify(_feature));\r\n        key_list=[data[_pkey]];\r\n        update=false;\r\n    }\r\n    return {data:data, key_list:key_list, update:update, alerts:alerts};\r\n}\r\n\r\nexport {partial_validate, partial_has_feature, partial_get_feature, partial_cleaned_feature};\r\n","var core = require('../../modules/_core');\nvar $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });\nmodule.exports = function stringify(it) { // eslint-disable-line no-unused-vars\n  return $JSON.stringify.apply($JSON, arguments);\n};\n","//data table module, raw data output for re-use in non-vue-component formats\r\nimport {partial_validate, partial_has_feature, partial_get_feature, partial_cleaned_feature} \r\n    from \"@/data_table_modules/universal/mek_partial-function-data-module\";\r\n\r\n//create new burst_value_data_table\r\nlet burst_value_data_table=\r\n[\r\n    {burst_value:1,cost:1},\r\n    {burst_value:2,cost:1.5},\r\n    {burst_value:3,cost:2},\r\n    {burst_value:4,cost:2.5},\r\n    {burst_value:5,cost:3},\r\n    {burst_value:6,cost:3.5},\r\n    {burst_value:7,cost:4},\r\n    {burst_value:8,cost:4.5},\r\n];\r\nlet data_table_keys=[\"burst_value\",\"cost\"];\r\nlet default_data={burst_value:1,cost:1};\r\n\r\n//data validator for burst_value_data_table\r\n//call partial_validate with appropriate data for full validate\r\nlet burst_value_validate=partial_validate(burst_value_data_table, data_table_keys);\r\n\r\n//completed function for checking if data has data\r\nlet has_feature=partial_has_feature(burst_value_data_table);\r\n\r\n//completed function for returning matching data\r\nlet get_feature=partial_get_feature(burst_value_data_table, has_feature);\r\n\r\n//completed function for returning cleaed data\r\nlet cleaned_feature=\r\n    partial_cleaned_feature(burst_value_validate, has_feature, get_feature, default_data, \"Mek_Projectile-Burst_Value\");\r\n\r\nexport {burst_value_data_table, burst_value_validate, has_feature, get_feature, cleaned_feature};\r\n","module.exports = require(\"core-js/library/fn/json/stringify\");"],"sourceRoot":""}