{"version":3,"sources":["webpack:///./src/store/modules/validators/mek_shield_validator.js"],"names":["loopValidators","updateMultipliers","round","validators","__webpack_require__","e","then","bind","_module","type","cleaned_feature","binder","create_binder","create_binder_data_table","class","create_class","create_class_data_table","weakness","cleaned_weakness","defense_ability","reset_time","turns","armor_type","armor_RAM","space_efficiency","validate_efficiency","derived","_component","validatedData","updateList","cleanedComponent","alerts","name","cost_multipliers","data","concat","cost_multiplier","Object","entries","reduce","_multi","_val","includes","push","armor_multiplier","absorption","newWeight","shield_class","stopping_power","weight","newCost","cost","efficiencies","space","newIsAblative","undefined","weakness_array","some","_weakness","is_ablative","validateComponent","loopAlerts","toLowerCase","componentsToValidate","validator","pkey","component_prop","_loopValidators"],"mappings":"yLAAA,IAsDIA,EAAgBC,EAAmBC,EAtDnCC,EAAa,GAEjBC,EAAAC,EAAA,+BAAAC,KAAAF,EAAAG,KAAA,cACGD,KAAME,IACLL,EAAWM,KAAOD,EAAQE,kBAG5BN,EAAAC,EAAA,iCAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IACLL,EAAWQ,OAASH,EAAQE,gBAC5BP,EAAWS,cAAgBJ,EAAQK,2BAGvCT,EAAAC,EAAA,gCAAAC,KAAAF,EAAAG,KAAA,cACGD,KAAME,IACLL,EAAWW,MAAQN,EAAQE,gBAC3BP,EAAWY,aAAeP,EAAQQ,0BAGtCZ,EAAAC,EAAA,mCAAAC,KAAAF,EAAAG,KAAA,cACGD,KAAME,IACLL,EAAWc,SAAWT,EAAQU,mBAGlCd,EAAAC,EAAA,0CAAAC,KAAAF,EAAAG,KAAA,cACGD,KAAME,IACLL,EAAWgB,gBAAkBX,EAAQE,kBAGzCN,EAAAC,EAAA,qCAAAC,KAAAF,EAAAG,KAAA,cACGD,KAAME,IACLL,EAAWiB,WAAaZ,EAAQE,kBAGpCN,EAAAC,EAAA,uCAAAC,KAAAF,EAAAG,KAAA,cACGD,KAAME,IACLL,EAAWkB,MAAQb,EAAQE,kBAG/BN,EAAAC,EAAA,8BAAAC,KAAAF,EAAAG,KAAA,cACGD,KAAME,IACLL,EAAWmB,WAAad,EAAQE,kBAGpCN,EAAAC,EAAA,6BAAAC,KAAAF,EAAAG,KAAA,cACGD,KAAME,IACLL,EAAWoB,UAAYf,EAAQE,kBAGnCN,EAAAC,EAAA,oCAAAC,KAAAF,EAAAG,KAAA,cACGD,KAAME,IACLL,EAAWqB,iBAAmBhB,EAAQiB,sBAI1CrB,EAAAC,EAAA,uBAAAC,KAAAF,EAAAG,KAAA,cACGD,KAAME,IACFR,EAA6CQ,EAA7CR,eAAgBC,EAA6BO,EAA7BP,kBAAmBC,EAAUM,EAAVN,QAG1CC,EAAWuB,QAAWC,IACpB,IAEIC,EACAC,EAHAC,EAAmBH,EACnBI,EAAS,GAGb,OAAOD,EAAiBrB,KAAKuB,MAE3B,IAAK,WACHH,EACA,CACE,SACA,kBACA,aACA,cAEF,MACF,IAAK,SACHA,EACA,CACE,SACA,aACA,cAEF,MACF,IAAK,WACHA,EACA,CACE,aACA,eACA,kBAIND,EAAgB3B,EAAkB4B,EAAYC,EAAkB,cAChEA,EAAiBG,iBAAmBL,EAAcM,KAClDH,EAASA,EAAOI,OAAOP,EAAcG,QAErC,IAAIK,EAAkBC,OAAOC,QAAQR,EAAiBG,kBAAkBM,OAAO,CAACC,EAAQC,KAEtF,MAAG,CAAC,aAAa,cAAcC,SAASD,EAAK,IAEpCD,EAEFA,EAASC,EAAK,IACpB,GACHL,EAAkBlC,EAAMkC,EAAiB,GACrCN,EAAiBM,iBAAmBA,IACtCL,EAAOY,KAAK,+BACZZ,EAAOY,KAAK,kDACZb,EAAiBM,gBAAkBlC,EAAMkC,EAAiB,IAE5D,IAAIQ,EAAiBd,EAAiBG,iBAAiBX,WAAWQ,EAAiBG,iBAAiBY,WAChGf,EAAiBc,kBAAoBA,IACvCb,EAAOY,KAAK,gCACZZ,EAAOY,KAAK,mDACZb,EAAiBc,iBAAmB1C,EAAM0C,EAAkB,IAE9D,IAAIE,EAAYhB,EAAiBiB,aAAaC,eAAe,EACzDlB,EAAiBmB,QAAUH,IAC7Bf,EAAOY,KAAK,sBACZZ,EAAOY,KAAK,yCACZb,EAAiBmB,OAASH,GAE5B,IAAII,EAAWpB,EAAiBiB,aAAaI,KAAOf,EAAkBQ,EAAoBd,EAAiBsB,aAAaC,MAAMF,KAC9HD,EAAUhD,EAAMgD,EAAS,GACrBpB,EAAiBqB,MAAQD,IAC3BnB,EAAOY,KAAK,oBACZZ,EAAOY,KAAK,uCACZb,EAAiBqB,KAAOD,GAE1B,IAAII,OAAgDC,IAAlCzB,EAAiB0B,gBAAiC1B,EAAiB0B,eAAeC,KAAMC,IAExG,MAA2B,YAApBA,EAAUzC,WASnB,OAPGa,EAAiB6B,aAAaL,IAE/BvB,EAAOY,KAAK,2BACZZ,EAAOY,KAAK,8CACZb,EAAiB6B,YAAcL,GAG1B,CAAEpB,KAAMJ,EAAkBC,OAAQA,IAG3C,IAAI6B,EAAqBjC,IACvB,IACIC,EACAiC,EAFA/B,EAAmBH,EAGnBI,EAAS,GAEbH,EAAczB,EAAWM,KAAK,OAAOqB,EAAiBrB,MACtDsB,EAASA,EAAOI,OAAOP,EAAcG,QACrCD,EAAiBrB,KAAOmB,EAAcM,KAEtC/B,EAAWY,aAAae,EAAiBrB,KAAKuB,KAAK8B,eAEnDlC,EAAczB,EAAWW,MAAM,OAAOgB,EAAiBiB,cACvDhB,EAASA,EAAOI,OAAOP,EAAcG,QACrCD,EAAiBiB,aAAenB,EAAcM,KAE3C,CAAC,WAAW,UAAUQ,SAASZ,EAAiBrB,KAAKuB,OAEtD7B,EAAWS,cAAckB,EAAiBiB,aAAaC,gBAGzD,IAAIe,EAAqB,GACzB,OAAOjC,EAAiBrB,KAAKuB,MAE3B,IAAK,WACH+B,EACA,CACE,CAAEC,UAAW7D,EAAWgB,gBAAiB8C,KAAM,KAAMC,eAAgB,oBAGzE,IAAK,SACHH,EACA,IACKA,EACH,CAAEC,UAAW7D,EAAWQ,OAAQsD,KAAM,0BAA2BC,eAAgB,UACjF,CAAEF,UAAW7D,EAAWmB,WAAY2C,KAAM,OAAQC,eAAgB,cAClE,CAAEF,UAAW7D,EAAWoB,UAAW0C,KAAM,aAAcC,eAAgB,eAEzE,MACF,IAAK,WACHH,EACA,CACE,CAAEC,UAAW7D,EAAWiB,WAAY6C,KAAM,OAAQC,eAAgB,cAClE,CAAEF,UAAW7D,EAAWkB,MAAO4C,KAAM,OAAQC,eAAgB,gBAC7D,CAAEF,UAAW7D,EAAWc,SAAUgD,KAAM,WAAYC,eAAgB,mBAEtE,MA9CkC,IAAAC,EAiDFnE,EAAe+D,EAAsBjC,GAWzE,OAXGA,EAjDmCqC,EAiDnCrC,iBAAkB+B,EAjDiBM,EAiDjBN,WACrB9B,EAASA,EAAOI,OAAO0B,GAEvBjC,EAAgBzB,EAAWuB,QAAQI,GACnCA,EAAmBF,EAAcM,KACjCH,EAASA,EAAOI,OAAOP,EAAcG,QAErCH,EAAgBzB,EAAWqB,iBAAiBM,EAAiBsB,aAAaC,MAAOvB,EAAiBqB,KAAM,cACxGpB,EAASA,EAAOI,OAAOP,EAAcG,QACrCD,EAAiBsB,aAAaC,MAAQzB,EAAcM,KAE7C,CAAEA,KAAMJ,EAAkBC,OAAQA","file":"js/mek_shield_validator.5aa6e4d6.js","sourcesContent":["let validators = {};\r\n\r\nimport(/* webpackChunkName: \"mek_shield-type-data-module\" */\"@/data_table_modules/mek_shield/mek_shield-type-data-module\")\r\n  .then((_module) => {\r\n    validators.type = _module.cleaned_feature;\r\n  });\r\n\r\n  import(/* webpackChunkName: \"mek_shield-binder-data-module\" */\"@/data_table_modules/mek_shield/mek_shield-binder-data-module\")\r\n  .then((_module) => {\r\n    validators.binder = _module.cleaned_feature;\r\n    validators.create_binder = _module.create_binder_data_table;\r\n  });\r\n\r\nimport(/* webpackChunkName: \"mek_shield-class-data-module\" */\"@/data_table_modules/mek_shield/mek_shield-class-data-module\")\r\n  .then((_module) => {\r\n    validators.class = _module.cleaned_feature;\r\n    validators.create_class = _module.create_class_data_table;\r\n  });\r\n\r\nimport(/* webpackChunkName: \"mek_shield-weakness-data-module\" */\"@/data_table_modules/mek_shield/mek_shield-weakness-data-module\")\r\n  .then((_module) => {\r\n    validators.weakness = _module.cleaned_weakness;\r\n  });\r\n\r\nimport(/* webpackChunkName: \"mek_shield-defense-ability-data-module\" */\"@/data_table_modules/mek_shield/mek_shield-defense-ability-data-module\")\r\n  .then((_module) => {\r\n    validators.defense_ability = _module.cleaned_feature;\r\n  });\r\n\r\nimport(/* webpackChunkName: \"mek_shield-reset-time-data-module\" */\"@/data_table_modules/mek_shield/mek_shield-reset-time-data-module\")\r\n  .then((_module) => {\r\n    validators.reset_time = _module.cleaned_feature;\r\n  });\r\n\r\nimport(/* webpackChunkName: \"mek_shield-turns-in-use-data-module\" */\"@/data_table_modules/mek_shield/mek_shield-turns-in-use-data-module\")\r\n  .then((_module) => {\r\n    validators.turns = _module.cleaned_feature;\r\n  });\r\n\r\nimport(/* webpackChunkName: \"mek_armor-type-data-module\" */\"@/data_table_modules/mek_armor/mek_armor-type-data-module\")\r\n  .then((_module) => {\r\n    validators.armor_type = _module.cleaned_feature;\r\n  });\r\n\r\nimport(/* webpackChunkName: \"mek_armor-RAM-data-module\" */\"@/data_table_modules/mek_armor/mek_armor-RAM-data-module\")\r\n  .then((_module) => {\r\n    validators.armor_RAM = _module.cleaned_feature;\r\n  });\r\n\r\nimport(/* webpackChunkName: \"mek_space-efficiency-data-module\" */\"@/data_table_modules/universal/mek_space-efficiency-data-module\")\r\n  .then((_module) => {\r\n    validators.space_efficiency = _module.validate_efficiency;\r\n  });\r\n\r\nlet loopValidators, updateMultipliers, round;\r\nimport(/* webpackChunkName: \"validator_functions\" */\"./validator_functions\")\r\n  .then((_module) => {\r\n    ({ loopValidators, updateMultipliers, round } = _module);\r\n  });\r\n\r\nvalidators.derived = (_component) => {\r\n  let cleanedComponent = _component;\r\n  let alerts = [];\r\n  let validatedData;\r\n  let updateList;\r\n  switch(cleanedComponent.type.name)\r\n  {\r\n    case \"Standard\":\r\n      updateList = \r\n      [\r\n        \"binder\", \r\n        \"defense_ability\",\r\n        \"armor_type\",\r\n        \"absorption\"\r\n      ];\r\n      break;\r\n    case \"Active\":\r\n      updateList = \r\n      [\r\n        \"binder\", \r\n        \"armor_type\",\r\n        \"absorption\"\r\n      ];\r\n      break;\r\n    case \"Reactive\":\r\n      updateList = \r\n      [\r\n        \"reset_time\",\r\n        \"turns_in_use\",\r\n        \"weakness_array\"\r\n      ];\r\n  }\r\n  //update cost_multipliers for components needing update\r\n  validatedData = updateMultipliers(updateList, cleanedComponent, \"Mek-Shield\");\r\n  cleanedComponent.cost_multipliers = validatedData.data;\r\n  alerts = alerts.concat(validatedData.alerts);\r\n  //update cost_multiplier\r\n  let cost_multiplier = Object.entries(cleanedComponent.cost_multipliers).reduce((_multi, _val) => {\r\n    //calc new cost_multiplier\r\n    if([\"armor_type\",\"absorption\"].includes(_val[0]))\r\n    {\r\n      return _multi;\r\n    }\r\n    return _multi * _val[1];\r\n  }, 1);\r\n  cost_multiplier = round(cost_multiplier, 2);\r\n  if (cleanedComponent.cost_multiplier != cost_multiplier) {\r\n    alerts.push(\"Mek-Shield: cost_multiplier\");\r\n    alerts.push(\"**** Invalid Cost Multiplier. Correcting. ****\");\r\n    cleanedComponent.cost_multiplier = round(cost_multiplier, 2);\r\n  }\r\n  let armor_multiplier=cleanedComponent.cost_multipliers.armor_type*cleanedComponent.cost_multipliers.absorption;\r\n  if (cleanedComponent.armor_multiplier != armor_multiplier) {\r\n    alerts.push(\"Mek-Shield: armor_multiplier\");\r\n    alerts.push(\"**** Invalid Armor Multiplier. Correcting. ****\");\r\n    cleanedComponent.armor_multiplier = round(armor_multiplier, 2);\r\n  }\r\n  let newWeight = cleanedComponent.shield_class.stopping_power/2;\r\n  if (cleanedComponent.weight != newWeight) {\r\n    alerts.push(\"Mek-Shield: weight\");\r\n    alerts.push(\"**** Invalid Weight. Correcting. ****\");\r\n    cleanedComponent.weight = newWeight;\r\n  }\r\n  let newCost = (cleanedComponent.shield_class.cost * cost_multiplier * armor_multiplier) + cleanedComponent.efficiencies.space.cost;\r\n  newCost = round(newCost, 2);\r\n  if (cleanedComponent.cost != newCost) {\r\n    alerts.push(\"Mek-Shield: cost\");\r\n    alerts.push(\"**** Invalid Cost. Correcting. ****\");\r\n    cleanedComponent.cost = newCost;\r\n  }\r\n  let newIsAblative=cleanedComponent.weakness_array===undefined?false:cleanedComponent.weakness_array.some((_weakness)=>\r\n  {\r\n    return _weakness.weakness==\"Ablative\";\r\n  });\r\n  if(cleanedComponent.is_ablative!=newIsAblative)\r\n  {\r\n    alerts.push(\"Mek-Shield: is_ablative\");\r\n    alerts.push(\"**** Invalid Is_Ablative. Correcting. ****\");\r\n    cleanedComponent.is_ablative = newIsAblative;\r\n  }\r\n\r\n  return { data: cleanedComponent, alerts: alerts };\r\n};\r\n\r\nlet validateComponent = (_component) => {\r\n  let cleanedComponent = _component;\r\n  let validatedData;\r\n  let loopAlerts;\r\n  let alerts = [];\r\n  //valid super-master type data\r\n  validatedData=validators.type(\"name\",cleanedComponent.type);\r\n  alerts = alerts.concat(validatedData.alerts);\r\n  cleanedComponent.type = validatedData.data;\r\n  //update shield class data\r\n  validators.create_class(cleanedComponent.type.name.toLowerCase());\r\n  //validate shield class data\r\n  validatedData=validators.class(\"code\",cleanedComponent.shield_class);\r\n  alerts = alerts.concat(validatedData.alerts);\r\n  cleanedComponent.shield_class = validatedData.data;\r\n  //update binder data for Standard and Active shields\r\n  if([\"Standard\",\"Active\"].includes(cleanedComponent.type.name))\r\n  {\r\n    validators.create_binder(cleanedComponent.shield_class.stopping_power);\r\n  }\r\n  //setup validation loopers for shield type\r\n  let componentsToValidate=[];\r\n  switch(cleanedComponent.type.name)\r\n  {\r\n    case \"Standard\":\r\n      componentsToValidate=\r\n      [\r\n        { validator: validators.defense_ability, pkey: \"da\", component_prop: \"defense_ability\" },\r\n      ];\r\n    // eslint-disable-next-line\r\n    case \"Active\":\r\n      componentsToValidate=\r\n      [\r\n        ...componentsToValidate,\r\n        { validator: validators.binder, pkey: \"stopping_power_modifier\", component_prop: \"binder\" },\r\n        { validator: validators.armor_type, pkey: \"type\", component_prop: \"armor_type\" },\r\n        { validator: validators.armor_RAM, pkey: \"absorption\", component_prop: \"absorption\" },\r\n      ];\r\n      break;\r\n    case \"Reactive\":\r\n      componentsToValidate=\r\n      [\r\n        { validator: validators.reset_time, pkey: \"time\", component_prop: \"reset_time\" },\r\n        { validator: validators.turns, pkey: \"time\", component_prop: \"turns_in_use\" },\r\n        { validator: validators.weakness, pkey: \"weakness\", component_prop: \"weakness_array\" },\r\n      ];\r\n      break;\r\n  }\r\n  //loop thru validations\r\n  ({ cleanedComponent, loopAlerts } = loopValidators(componentsToValidate, cleanedComponent));\r\n  alerts = alerts.concat(loopAlerts)\r\n  //update cost_multipliers for components needing update\r\n  validatedData = validators.derived(cleanedComponent);\r\n  cleanedComponent = validatedData.data;\r\n  alerts = alerts.concat(validatedData.alerts);\r\n  //validate space efficienc\r\n  validatedData = validators.space_efficiency(cleanedComponent.efficiencies.space, cleanedComponent.cost, \"Mek-Shield\");\r\n  alerts = alerts.concat(validatedData.alerts);\r\n  cleanedComponent.efficiencies.space = validatedData.data;\r\n\r\n  return { data: cleanedComponent, alerts: alerts };\r\n};\r\n\r\nexport { validateComponent };"],"sourceRoot":""}