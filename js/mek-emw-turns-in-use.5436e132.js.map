{"version":3,"sources":["webpack:///./src/design_components/mek_emw/subcomponents/mek_emw-turns-in-use.vue?ebfe","webpack:///./src/data_table_modules/mek_emw/mek_emw-turns-in-use-data-module.js","webpack:///src/design_components/mek_emw/subcomponents/mek_emw-turns-in-use.vue","webpack:///./src/design_components/mek_emw/subcomponents/mek_emw-turns-in-use.vue?5ab7","webpack:///./src/design_components/mek_emw/subcomponents/mek_emw-turns-in-use.vue","webpack:///./src/data_table_modules/universal/mek_partial-function-data-module.js","webpack:///./src/mixins/alerts_mixin.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","items","turns_table","pkey","selected-keys","selected_keys","headers","turns","cost","name","flow","show-headers","format","on","update-selected-data","select_turns","staticRenderFns","turns_data_table","data_table_keys","default_data","Infinity","turns_validate","partial_validate","has_feature","partial_has_feature","get_feature","partial_get_feature","cleaned_feature","_pkey","_feature","data","undefined","key_list","update","alerts","json_data","JSON","stringify","parse","push","mek_emw_turns_in_usevue_type_script_lang_js_","props","mixins","utility_mixin","alerts_mixin","components","mek-sub-component-table","__webpack_require__","e","then","bind","obj","suppressAlerts","methods","_selected_turns","$emit","computed","[object Object]","cleaned_data","turnsInUse","length","forEach","_alert","addAlert","publishAlerts","subcomponents_mek_emw_turns_in_usevue_type_script_lang_js_","component","Object","componentNormalizer","__webpack_exports__","d","partial_cleaned_feature","_data_table","_validation_keys","_data","Array","isArray","valid","some","_val","_keys","_key","_has_feature","found_feature","_table_val","_validator","_get_feature","_default_data","_name","_alert_string","$store","commit","$set"],"mappings":"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","file":"js/mek-emw-turns-in-use.5436e132.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('mek-sub-component-table',{attrs:{\"items\":_vm.turns_table,\"pkey\":_vm.pkey,\"selected-keys\":_vm.selected_keys,\"headers\":{turns:'Turns',cost:'Cost'},\"name\":\"Turns in Use\",\"flow\":\"pkey-row\",\"show-headers\":true,\"format\":{cost:'multiplier'}},on:{\"update-selected-data\":_vm.select_turns}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","//data table module, raw data output for re-use in non-vue-component formats\r\nimport {partial_validate, partial_has_feature, partial_get_feature} from \"../universal/mek_partial-function-data-module\";\r\n\r\n//create new turns_data_table\r\nlet turns_data_table=\r\n[\r\n    {turns:1,cost:0.3},\r\n    {turns:2,cost:0.4},\r\n    {turns:3,cost:0.5},\r\n    {turns:4,cost:0.6},\r\n    {turns:5,cost:0.7},\r\n    {turns:7,cost:0.8},\r\n    {turns:10,cost:0.9},\r\n    {turns:\"__INFINITY__\",cost:1.0}\r\n];\r\nlet data_table_keys=[\"turns\",\"cost\"];\r\nlet default_data={turns:Infinity,cost:1};\r\n\r\n//data validator for turns_data_table\r\n//call partial_validate with appropriate data for full validate\r\nlet turns_validate=partial_validate(turns_data_table, data_table_keys);\r\n\r\n//completed function for checking if data has data\r\nlet has_feature=partial_has_feature(turns_data_table);\r\n\r\n//completed function for returning matching data\r\nlet get_feature=partial_get_feature(turns_data_table, has_feature);\r\n\r\n/**** \r\n * see cleaned_feat can be converted to partial func due to use of Infinity\r\n * probably with a For...Of loop prior to JSON clone\r\n * \r\n *  ****/\r\nlet cleaned_feature=function(_pkey, _feature)\r\n{//input: primary key, selected feature, filtered data table\r\n    let data=undefined;\r\n    let key_list=[];\r\n    let update=false;\r\n    let alerts=[];\r\n    let json_data=JSON.stringify(_feature);\r\n\r\n    if(_feature===undefined || !has_feature(_pkey,_feature[_pkey]))\r\n    {\r\n        data=default_data;\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(\"Mek_EMW-Turns-In-Use: \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting to default. ****\");\r\n    }\r\n    else if(!turns_validate(_feature))\r\n    {\r\n        data=JSON.parse(JSON.stringify(get_feature(_pkey,_feature[_pkey])));\r\n        data.turns=data.turns===null?Infinity:data.turns;\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(\"Mek_EMW-Turns-In-Use: \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting. ****\");\r\n    }\r\n    else\r\n    {\r\n        data=JSON.parse(JSON.stringify(_feature));\r\n        data.turns=data.turns===null?Infinity:data.turns;\r\n        key_list=[data[_pkey]];\r\n        update=false;\r\n    }\r\n    return {data:data, key_list:key_list, update:update, alerts:alerts};\r\n};\r\n\r\nexport {turns_data_table, turns_validate, has_feature, get_feature, cleaned_feature};\r\n","<template>\r\n    <mek-sub-component-table\r\n        :items=\"turns_table\" :pkey=\"pkey\" :selected-keys=\"selected_keys\"\r\n        :headers=\"{turns:'Turns',cost:'Cost'}\"\r\n        name=\"Turns in Use\" flow=\"pkey-row\" :show-headers=\"true\"\r\n        :format=\"{cost:'multiplier'}\"\r\n        @update-selected-data=\"select_turns\"\r\n    ></mek-sub-component-table>\r\n</template>\r\n<script>\r\nimport utility_mixin from \"../../../mixins/utility_mixin\";\r\nimport alerts_mixin from \"../../../mixins/alerts_mixin\";\r\nimport { turns_data_table, cleaned_feature } \r\n    from \"../../../data_table_modules/mek_emw/mek_emw-turns-in-use-data-module\";\r\n\r\nexport default \r\n{\r\n    name:\"mek_emw_turns_in_use\",\r\n    props:[\"turnsInUse\"],\r\n    mixins:[utility_mixin,alerts_mixin],\r\n    components:\r\n    {\r\n        \"mek-sub-component-table\":()=>import(\"../../universal/mek_sub-component-table.vue\")\r\n    },\r\n    data:function()\r\n    {\r\n        let obj={};\r\n        obj.pkey=\"turns\";\r\n        obj.suppressAlerts=false;\r\n        obj.alerts=[];\r\n        return obj;\r\n    },\r\n    methods:\r\n    {\r\n        select_turns:function(_selected_turns)\r\n        {\r\n            let data=JSON.parse(JSON.stringify(_selected_turns))\r\n            data.turns=_selected_turns.turns===Infinity?Infinity:_selected_turns.turns;\r\n            this.$emit(\"update-turns-in-use\",data);\r\n        }\r\n    },\r\n    computed:\r\n    {\r\n        turns_table()\r\n        {\r\n            return turns_data_table;\r\n        },\r\n        selected_keys()\r\n        {\r\n            let cleaned_data=cleaned_feature(this.pkey, this.turnsInUse);\r\n            if(cleaned_data.alerts.length>0 && !this.suppressAlerts)\r\n            {\r\n                cleaned_data.alerts.forEach((_alert)=>\r\n                {\r\n                    this.addAlert(_alert);\r\n                });\r\n                this.publishAlerts();\r\n            }\r\n            if(cleaned_data.update)\r\n            {\r\n                this.select_turns(cleaned_data.data);\r\n            }\r\n            return cleaned_data.key_list;\r\n        }\r\n    }\r\n}\r\n</script>","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./mek_emw-turns-in-use.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./mek_emw-turns-in-use.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./mek_emw-turns-in-use.vue?vue&type=template&id=59786c3f&\"\nimport script from \"./mek_emw-turns-in-use.vue?vue&type=script&lang=js&\"\nexport * from \"./mek_emw-turns-in-use.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","//data table module, raw data output for re-use in non-vue-component formats\r\n\r\n//ATTEMPT: make validators and has_feat and get_feat and cleaned_feat functions \r\n//          neutral and reusable across all data modules\r\n\r\n//partial data validator\r\n//called with data_table and validation_keys in data-module\r\nlet partial_validate=(_data_table,_validation_keys)=>(_data)=>\r\n{//_data_table: Array, array of data to validate against\r\n    //_validation_keys: Array, keys to be compared between passed in data and data_table\r\n    //_data: Object, data to be compared to data table \r\n    if(typeof _data===\"undefined\" || !Array.isArray(_validation_keys) || _validation_keys.length==0)\r\n    {\r\n        return false;\r\n    }\r\n    let valid=_data_table.some((_val)=>\r\n    {\r\n        return !_validation_keys.some((_keys)=>\r\n        {//returns true on invalid data, Not the return to return True if matching valid value is found\r\n            return _data[_keys]!=_val[_keys];\r\n        });\r\n    });\r\n    return valid;\r\n}\r\n\r\n//partial_has_feature, determine if provided data table has matching element with provided key and val\r\n//called in data module to generate full function with local data\r\nlet partial_has_feature=(_data_table)=>(_key, _val)=>\r\n{\r\n    return _data_table.some((_data)=>\r\n    {\r\n        return _data[_key]!==undefined && _data[_key]==_val;\r\n    });\r\n};\r\n\r\n//partial get_feature, returns full function for data module\r\n//requires data_table (array) and module's has_feature function\r\n//returns full matching element in provided data table\r\n//has_feature must exist in data table module\r\nlet partial_get_feature=(_data_table, _has_feature)=>(_key, _val)=>\r\n{\r\n    let found_feature=null;\r\n    if(_has_feature(_key,_val))\r\n    {\r\n        _data_table.some((_table_val)=>\r\n        {\r\n            if(_table_val[_key]==_val)\r\n            {\r\n                found_feature=_table_val;\r\n                return true;\r\n            }\r\n        },this);\r\n    }\r\n    return found_feature;\r\n}\r\n\r\nlet partial_cleaned_feature=(_validator, _has_feature, _get_feature, _default_data, _name)=>(_pkey, _feature)=>\r\n{//input: primary key, selected feature, filtered data table\r\n    let data=undefined;\r\n    let key_list=[];\r\n    let update=false;\r\n    let alerts=[];\r\n    let json_data=JSON.stringify(_feature);\r\n\r\n    if(_feature===undefined || !_has_feature(_pkey,_feature[_pkey]))\r\n    {\r\n        data=_default_data;\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting to default. ****\");\r\n    }\r\n    else if(!_validator(_feature))\r\n    {\r\n        data=JSON.parse(JSON.stringify(_get_feature(_pkey,_feature[_pkey])));\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting. ****\");\r\n    }\r\n    else\r\n    {\r\n        data=JSON.parse(JSON.stringify(_feature));\r\n        key_list=[data[_pkey]];\r\n        update=false;\r\n    }\r\n    return {data:data, key_list:key_list, update:update, alerts:alerts};\r\n}\r\n\r\nexport {partial_validate, partial_has_feature, partial_get_feature, partial_cleaned_feature};\r\n","export default\r\n{\r\n    methods:\r\n    {\r\n        addAlert(_alert_string)\r\n        {\r\n            this.alerts.push(_alert_string);\r\n        },\r\n        publishAlerts()\r\n        {\r\n            if(this.alerts.length>0)\r\n            {   \r\n                this.$store.commit(\"alertMessage\",this.alerts);\r\n            }\r\n            this.$set(this,\"alerts\",[]);\r\n        },\r\n    }\r\n}"],"sourceRoot":""}