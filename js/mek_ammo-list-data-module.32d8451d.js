(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["mek_ammo-list-data-module"],{"706d":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return partial_validate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return partial_has_feature; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return partial_get_feature; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return partial_cleaned_feature; });\n//data table module, raw data output for re-use in non-vue-component formats\n//ATTEMPT: make validators and has_feat and get_feat and cleaned_feat functions \n//          neutral and reusable across all data modules\n//partial data validator\n//called with data_table and validation_keys in data-module\nlet partial_validate = (_data_table, _validation_keys) => _data => {\n  //_data_table: Array, array of data to validate against\n  //_validation_keys: Array, keys to be compared between passed in data and data_table\n  //_data: Object, data to be compared to data table \n  if (typeof _data === "undefined" || !Array.isArray(_validation_keys) || _validation_keys.length == 0) {\n    return false;\n  }\n\n  let valid = _data_table.some(_val => {\n    return _validation_keys.every(_keys => {\n      //return true if all validation_keys in _data match an element in _data_table\n      return _data[_keys] == _val[_keys];\n    });\n  });\n\n  return valid;\n}; //partial_has_feature, determine if provided data table has matching element with provided key and val\n//called in data module to generate full function with local data\n\n\nlet partial_has_feature = _data_table => (_key, _val) => {\n  return _data_table.some(_data => {\n    return _data[_key] !== undefined && _data[_key] == _val;\n  });\n}; //partial get_feature, returns full function for data module\n//requires data_table (array) and module\'s has_feature function\n//returns full matching element in provided data table\n//has_feature must exist in data table module\n\n\nlet partial_get_feature = (_data_table, _has_feature) => (_key, _val) => {\n  let found_feature = null;\n\n  if (_has_feature(_key, _val)) {\n    _data_table.some(_table_val => {\n      if (_table_val[_key] == _val) {\n        found_feature = _table_val;\n        return true;\n      }\n    }, undefined);\n  }\n\n  return found_feature;\n};\n\nlet partial_cleaned_feature = (_validator, _has_feature, _get_feature, _default_data, _name) => (_pkey, _feature) => {\n  //input: primary key, selected feature, filtered data table\n  let data = undefined;\n  let key_list = [];\n  let update = false;\n  let alerts = [];\n  let json_data = JSON.stringify(_feature);\n\n  if (_feature === undefined || !_has_feature(_pkey, _feature[_pkey])) {\n    data = _default_data;\n    key_list = [data[_pkey]];\n    update = true;\n    alerts.push(_name + ": " + json_data);\n    alerts.push("**** Invalid data. Reseting to default. ****");\n  } else if (!_validator(_feature)) {\n    data = JSON.parse(JSON.stringify(_get_feature(_pkey, _feature[_pkey])));\n    key_list = [data[_pkey]];\n    update = true;\n    alerts.push(_name + ": " + json_data);\n    alerts.push("**** Invalid data. Reseting. ****");\n  } else {\n    data = JSON.parse(JSON.stringify(_feature));\n    key_list = [data[_pkey]];\n    update = false;\n  }\n\n  return {\n    data: data,\n    key_list: key_list,\n    update: update,\n    alerts: alerts\n  };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///706d\n')},f155:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "feature_data_table", function() { return feature_data_table; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "feature_validate", function() { return feature_validate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "has_feature", function() { return has_feature; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "get_feature", function() { return get_feature; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shock_exclusive", function() { return shock_exclusive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blast_exclusive", function() { return blast_exclusive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cleaned_feature", function() { return cleaned_feature; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filter_data_table", function() { return filter_data_table; });\n/* harmony import */ var _data_table_modules_universal_mek_partial_function_data_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("706d");\n//data table module, raw data output for re-use in non-vue-component formats\n //create new ammo_data_table\n\nlet raw_feature_data_table = [{\n  type: "Paintball",\n  cost: 0.5,\n  effect: "Practice Rounds"\n}, {\n  type: "Foam",\n  cost: 0.5,\n  effect: "Firefighting"\n}, {\n  type: "High-Ex",\n  cost: 1,\n  effect: "Standard"\n}, {\n  type: "Tracer",\n  cost: 3,\n  effect: "+1 to WA"\n}, {\n  type: "Kinetic",\n  cost: 3,\n  effect: "More Knockback"\n}, {\n  type: "Tangler",\n  cost: 3,\n  effect: "Grappling Attack"\n}, {\n  type: "Armor Piercing",\n  cost: 4,\n  effect: "1/2 SP vs Armor"\n}, {\n  type: "Disruptor",\n  cost: 4,\n  effect: "1/2 SP vs Energy"\n}, {\n  type: "Incendiary",\n  cost: 4,\n  effect: "Flamethrower"\n}, {\n  type: "Shock (only)",\n  cost: 4,\n  effect: "Stun Effect",\n  shock_exclusive: true\n}, {\n  type: "Shock (add)",\n  cost: 6,\n  effect: "Stun & Damage",\n  shock_exclusive: true\n}, {\n  type: "Scattershot",\n  cost: 5,\n  effect: "Shotgun Effect"\n}, {\n  type: "Blast I",\n  cost: 6,\n  effect: "1-Hex Radius",\n  blast_exclusive: true\n}, {\n  type: "Blast II",\n  cost: 8,\n  effect: "2-Hex Radius",\n  blast_exclusive: true\n}, {\n  type: "Blast III",\n  cost: 10,\n  effect: "3-Hex Radius",\n  blast_exclusive: true\n}, {\n  type: "Blast IV",\n  cost: 12,\n  effect: "4-Hex Radius",\n  blast_exclusive: true\n}, {\n  type: "Blast V",\n  cost: 14,\n  effect: "5-Hex Radius",\n  blast_exclusive: true\n}, {\n  type: "Nuclear",\n  cost: 1000,\n  effect: "Atomic Ammo"\n}];\nlet shock_exclusive = raw_feature_data_table.filter(_el => {\n  return typeof _el.shock_exclusive !== "undefined";\n});\nlet blast_exclusive = raw_feature_data_table.filter(_el => {\n  return typeof _el.blast_exclusive !== "undefined";\n});\nlet data_table_keys = ["type", "cost", "effect", "shock_exclusive", "blast_exclusive"];\nlet default_data = {\n  type: "High-Ex",\n  cost: 1,\n  effect: "Standard"\n};\nlet feature_data_table = raw_feature_data_table;\nlet data_cached = false;\n\nlet filter_data_table = _has_blast_radius => {\n  data_cached = false;\n\n  if (!_has_blast_radius) {\n    feature_data_table = raw_feature_data_table.filter(_val => {\n      return _val.type != "Nuclear";\n    });\n  } else {\n    feature_data_table = raw_feature_data_table;\n  }\n};\n\nlet cached_validate = Object(_data_table_modules_universal_mek_partial_function_data_module__WEBPACK_IMPORTED_MODULE_0__[/* partial_validate */ "d"])(raw_feature_data_table, data_table_keys); //data validator for feature_data_table\n//call partial_validate with appropriate data for full validate\n\nlet feature_validate = _data => {\n  if (data_cached) {\n    return cached_validate(_data);\n  }\n\n  data_cached = true;\n  cached_validate = Object(_data_table_modules_universal_mek_partial_function_data_module__WEBPACK_IMPORTED_MODULE_0__[/* partial_validate */ "d"])(feature_data_table, data_table_keys);\n  return cached_validate(_data);\n}; //completed function for checking if data has data\n\n\nlet has_feature = (_pkey, _data) => {\n  return Object(_data_table_modules_universal_mek_partial_function_data_module__WEBPACK_IMPORTED_MODULE_0__[/* partial_has_feature */ "c"])(feature_data_table)(_pkey, _data);\n}; //completed function for returning matching data\n\n\nlet get_feature = (_pkey, _data) => {\n  return Object(_data_table_modules_universal_mek_partial_function_data_module__WEBPACK_IMPORTED_MODULE_0__[/* partial_get_feature */ "b"])(feature_data_table, has_feature)(_pkey, _data);\n};\n\nlet is_exclusive_feature = function is_exclusive_feature(_exclusive_target, _pkey, _pkey_value) {\n  let exclusive_target_array = null;\n\n  switch (_exclusive_target.toLowerCase()) {\n    case "shock_exclusive":\n      exclusive_target_array = shock_exclusive;\n      break;\n\n    case "blast_exclusive":\n      exclusive_target_array = blast_exclusive;\n      break;\n  }\n\n  if (exclusive_target_array === null) {\n    return false;\n  }\n\n  return exclusive_target_array.some(_val => {\n    return _val[_pkey] == _pkey_value;\n  });\n};\n/*** \r\n * \r\n * create cleaned_feat function for features\r\n * \r\n *  ***/\n\n\nlet cleaned_feature = function cleaned_feature(_feature_array, _pkey) {\n  //takes feature_array, returns cleaned array removing multiple exclusive values\n  let hasExclusiveShock = false;\n  let hasExclusiveBlast = false;\n  let update = false;\n  let key_list = [];\n  let alerts = [];\n\n  if (_feature_array === undefined || _pkey === undefined) {\n    alerts.push("Mek_Magazine-Ammo-List: ");\n    let error = _feature_array === undefined ? "**** Missing feature array. Returning default. ****" : "**** No primary key provided. Returning default. ****";\n    alerts.push(error);\n    return {\n      cleaned_array: [default_data],\n      update: true,\n      key_list: ["High-Ex"],\n      alerts: alerts\n    };\n  }\n\n  let temp_selected_feature_array = _feature_array.reduceRight((_cleaned_array, _val) => {\n    if (_val[_pkey] === undefined) {\n      //if feature with pkey doesn\'t exist in data table, ignore\n      alerts.push("Mek_Magazine-Ammo-List: " + JSON.stringify(_val));\n      alerts.push("**** Missing primary key. Ignoring. ****");\n      return _cleaned_array;\n    }\n\n    let clean_feature = _val;\n\n    if (!feature_validate(_val)) {\n      //invalid data\n      alerts.push("Mek_Magazine-Ammo-List: " + JSON.stringify(_val));\n      alerts.push("**** Invalid data, attempting to reset. ****");\n      clean_feature = get_feature(_pkey, _val[_pkey]);\n      _val = clean_feature; //replace current value with correct value\n\n      update = true; //attempt to set to corrected feature\n    }\n\n    if (clean_feature === null) {\n      //no matching feature\n      alerts.push("**** Unable to reset. No matching data. ****");\n      update = true;\n      return _cleaned_array; //ignore element\n    }\n\n    let isShock = is_exclusive_feature("shock_exclusive", _pkey, _val[_pkey]);\n    let isBlast = is_exclusive_feature("blast_exclusive", _pkey, _val[_pkey]);\n\n    if (isShock && !hasExclusiveShock) {\n      _cleaned_array.push(_val);\n\n      hasExclusiveShock = true;\n      key_list.push(_val[_pkey]);\n      return _cleaned_array;\n    } else if (isShock && hasExclusiveShock) {\n      alerts.push("Mek_Magazine-Ammo-List: " + _val);\n      alerts.push("**** Duplicate exclusive shock data. Ignoring. ****");\n      update = true;\n      return _cleaned_array;\n    }\n\n    if (isBlast && !hasExclusiveBlast) {\n      _cleaned_array.push(_val);\n\n      hasExclusiveBlast = true;\n      key_list.push(_val[_pkey]);\n      return _cleaned_array;\n    } else if (isBlast && hasExclusiveBlast) {\n      alerts.push("Mek_Magazine-Ammo-List: " + _val);\n      alerts.push("**** Duplicate exclusive blast radius data. Ignoring. ****");\n      update = true;\n      return _cleaned_array;\n    }\n\n    if (!key_list.includes(_val[_pkey])) {\n      _cleaned_array.push(_val);\n\n      key_list.push(_val[_pkey]);\n    }\n\n    return _cleaned_array;\n  }, []);\n\n  temp_selected_feature_array = temp_selected_feature_array.filter(_val => {\n    return _val[_pkey].toLowerCase() != "nuclear" || hasExclusiveBlast && _val[_pkey].toLowerCase() == "nuclear"; //filter out nuclear if blast-radius isn\'t a feature\n  }).reverse();\n\n  if (temp_selected_feature_array.length == 0) {\n    //empty, reset to default\n    temp_selected_feature_array = [JSON.parse(JSON.stringify(default_data))];\n    update = true;\n    key_list = ["High-Ex"];\n    alerts.push("Mek_Magazine-Ammo-List: ");\n    alerts.push("**** Reseting to default ****");\n  }\n\n  return {\n    cleaned_array: temp_selected_feature_array,\n    update: update,\n    key_list: key_list,\n    alerts: alerts\n  }; //returns an object with the pruned feature array, whether it was updated, and the key_list\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///f155\n')}}]);