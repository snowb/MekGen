{"version":3,"sources":["webpack:///./src/data_table_modules/mek_projectile/mek_projectile-damage-data-module.js","webpack:///./src/data_table_modules/universal/mek_partial-function-data-module.js"],"names":["__webpack_require__","r","__webpack_exports__","d","damage_data_table","damage_validate","has_feature","get_feature","cleaned_feature","_data_table_modules_universal_mek_partial_function_data_module__WEBPACK_IMPORTED_MODULE_0__","Array","apply","map","_el","_index","damage","cost","range","Math","round","sqrt","data_table_keys","default_data","partial_validate","partial_has_feature","partial_get_feature","partial_cleaned_feature","_data_table","_validation_keys","_data","isArray","length","valid","some","_val","every","_keys","_key","undefined","_has_feature","found_feature","_table_val","_validator","_get_feature","_default_data","_name","_pkey","_feature","data","key_list","update","alerts","json_data","JSON","stringify","parse","push"],"mappings":"qIAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,sCAAAE,IAAAJ,EAAAG,EAAAD,EAAA,oCAAAG,IAAAL,EAAAG,EAAAD,EAAA,gCAAAI,IAAAN,EAAAG,EAAAD,EAAA,gCAAAK,IAAAP,EAAAG,EAAAD,EAAA,oCAAAM,IAAA,IAAAC,EAAAT,EAAA,QAKA,IAAII,EAAkBM,MAAMC,MAAM,GAAID,MAAM,KAAKE,IAAI,CAACC,EAAIC,KAEtD,IAAIC,EAAOD,EAAO,EACdE,EAAKD,EACLE,EAAMC,KAAKC,MAAwB,EAAlBD,KAAKE,KAAKL,IAC/B,MAAO,CAACA,OAAOA,EAAOC,KAAKA,EAAKC,MAAMA,KAEtCI,EAAgB,CAAC,SAAS,OAAO,SACjCC,EAAa,CAACP,OAAO,EAAEC,KAAK,EAAEC,MAAM,GAIpCZ,EAAgBkB,eAAiBnB,EAAmBiB,GAGpDf,EAAYkB,eAAoBpB,GAGhCG,EAAYkB,eAAoBrB,EAAmBE,GAGnDE,EACAkB,eAAwBrB,EAAiBC,EAAaC,EAAae,EAAc,8DC3BrFtB,EAAAG,EAAAD,EAAA,sBAAAqB,IAAAvB,EAAAG,EAAAD,EAAA,sBAAAsB,IAAAxB,EAAAG,EAAAD,EAAA,sBAAAuB,IAAAzB,EAAAG,EAAAD,EAAA,sBAAAwB,IAOA,IAAIH,EAAiB,CAACI,EAAYC,IAAoBC,IAIlD,GAAkB,qBAARA,IAAwBnB,MAAMoB,QAAQF,IAA8C,GAAzBA,EAAiBG,OAElF,OAAO,EAEX,IAAIC,EAAML,EAAYM,KAAMC,IAExB,OAAON,EAAiBO,MAAOC,IAE3B,OAAOP,EAAMO,IAAQF,EAAKE,OAGlC,OAAOJ,GAKPR,EAAqBG,GAAc,CAACU,EAAMH,KAE1C,OAAOP,EAAYM,KAAMJ,IAErB,YAAqBS,IAAdT,EAAMQ,IAAqBR,EAAMQ,IAAOH,KAQnDT,EAAoB,CAACE,EAAaY,IAAe,CAACF,EAAMH,KAExD,IAAIM,EAAc,KAYlB,OAXGD,EAAaF,EAAKH,IAEjBP,EAAYM,KAAMQ,IAEd,GAAGA,EAAWJ,IAAOH,EAGjB,OADAM,EAAcC,GACP,QAEbH,GAECE,GAGPd,EAAwB,CAACgB,EAAYH,EAAcI,EAAcC,EAAeC,IAAQ,CAACC,EAAOC,KAEhG,IAAIC,OAAKV,EACLW,EAAS,GACTC,GAAO,EACPC,EAAO,GACPC,EAAUC,KAAKC,UAAUP,GAwB7B,YAtBcT,IAAXS,GAAyBR,EAAaO,EAAMC,EAASD,IAQ/CJ,EAAWK,IAUhBC,EAAKK,KAAKE,MAAMF,KAAKC,UAAUP,IAC/BE,EAAS,CAACD,EAAKF,IACfI,GAAO,IAVPF,EAAKK,KAAKE,MAAMF,KAAKC,UAAUX,EAAaG,EAAMC,EAASD,MAC3DG,EAAS,CAACD,EAAKF,IACfI,GAAO,EACPC,EAAOK,KAAKX,EAAM,KAAKO,GACvBD,EAAOK,KAAK,uCAZZR,EAAKJ,EACLK,EAAS,CAACD,EAAKF,IACfI,GAAO,EACPC,EAAOK,KAAKX,EAAM,KAAKO,GACvBD,EAAOK,KAAK,iDAgBT,CAACR,KAAKA,EAAMC,SAASA,EAAUC,OAAOA,EAAQC,OAAOA","file":"js/mek_projectile-damage-data-module.8d40909e.js","sourcesContent":["//data table module, raw data output for re-use in non-vue-component formats\r\nimport {partial_validate, partial_has_feature, partial_get_feature, partial_cleaned_feature} \r\n    from \"@/data_table_modules/universal/mek_partial-function-data-module\";\r\n\r\n//create new damage_data_table\r\nlet damage_data_table=Array.apply({}, Array(20)).map((_el,_index)=>\r\n{\r\n    let damage=_index+1;\r\n    let cost=damage;\r\n    let range=Math.round(Math.sqrt(damage)*3);\r\n    return {damage:damage,cost:cost,range:range};\r\n});\r\nlet data_table_keys=[\"damage\",\"cost\",\"range\"];\r\nlet default_data={damage:1,cost:1,range:3};\r\n\r\n//data validator for damage_data_table\r\n//call partial_validate with appropriate data for full validate\r\nlet damage_validate=partial_validate(damage_data_table, data_table_keys);\r\n\r\n//completed function for checking if data has data\r\nlet has_feature=partial_has_feature(damage_data_table);\r\n\r\n//completed function for returning matching data\r\nlet get_feature=partial_get_feature(damage_data_table, has_feature);\r\n\r\n//completed function for returning cleaed data\r\nlet cleaned_feature=\r\n    partial_cleaned_feature(damage_validate, has_feature, get_feature, default_data, \"Mek_Projectile-Damage\");\r\n\r\nexport {damage_data_table, damage_validate, has_feature, get_feature, cleaned_feature};\r\n","//data table module, raw data output for re-use in non-vue-component formats\r\n\r\n//ATTEMPT: make validators and has_feat and get_feat and cleaned_feat functions \r\n//          neutral and reusable across all data modules\r\n\r\n//partial data validator\r\n//called with data_table and validation_keys in data-module\r\nlet partial_validate=(_data_table,_validation_keys)=>(_data)=>\r\n{//_data_table: Array, array of data to validate against\r\n    //_validation_keys: Array, keys to be compared between passed in data and data_table\r\n    //_data: Object, data to be compared to data table \r\n    if(typeof _data===\"undefined\" || !Array.isArray(_validation_keys) || _validation_keys.length==0)\r\n    {\r\n        return false;\r\n    }\r\n    let valid=_data_table.some((_val)=>\r\n    {\r\n        return _validation_keys.every((_keys)=>\r\n        {//return true if all validation_keys in _data match an element in _data_table\r\n            return _data[_keys]==_val[_keys];\r\n        });\r\n    });\r\n    return valid;\r\n}\r\n\r\n//partial_has_feature, determine if provided data table has matching element with provided key and val\r\n//called in data module to generate full function with local data\r\nlet partial_has_feature=(_data_table)=>(_key, _val)=>\r\n{\r\n    return _data_table.some((_data)=>\r\n    {\r\n        return _data[_key]!==undefined && _data[_key]==_val;\r\n    });\r\n};\r\n\r\n//partial get_feature, returns full function for data module\r\n//requires data_table (array) and module's has_feature function\r\n//returns full matching element in provided data table\r\n//has_feature must exist in data table module\r\nlet partial_get_feature=(_data_table, _has_feature)=>(_key, _val)=>\r\n{\r\n    let found_feature=null;\r\n    if(_has_feature(_key,_val))\r\n    {\r\n        _data_table.some((_table_val)=>\r\n        {\r\n            if(_table_val[_key]==_val)\r\n            {\r\n                found_feature=_table_val;\r\n                return true;\r\n            }\r\n        },this);\r\n    }\r\n    return found_feature;\r\n}\r\n\r\nlet partial_cleaned_feature=(_validator, _has_feature, _get_feature, _default_data, _name)=>(_pkey, _feature)=>\r\n{//input: primary key, selected feature, filtered data table\r\n    let data=undefined;\r\n    let key_list=[];\r\n    let update=false;\r\n    let alerts=[];\r\n    let json_data=JSON.stringify(_feature);\r\n\r\n    if(_feature===undefined || !_has_feature(_pkey,_feature[_pkey]))\r\n    {\r\n        data=_default_data;\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting to default. ****\");\r\n    }\r\n    else if(!_validator(_feature))\r\n    {\r\n        data=JSON.parse(JSON.stringify(_get_feature(_pkey,_feature[_pkey])));\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting. ****\");\r\n    }\r\n    else\r\n    {\r\n        data=JSON.parse(JSON.stringify(_feature));\r\n        key_list=[data[_pkey]];\r\n        update=false;\r\n    }\r\n    return {data:data, key_list:key_list, update:update, alerts:alerts};\r\n}\r\n\r\nexport {partial_validate, partial_has_feature, partial_get_feature, partial_cleaned_feature};\r\n"],"sourceRoot":""}