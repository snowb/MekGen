{"version":3,"sources":["webpack:///./src/design_components/mek_shield/subcomponents/mek_shield-weakness.vue?ea87","webpack:///src/design_components/mek_shield/subcomponents/mek_shield-weakness.vue","webpack:///./src/design_components/mek_shield/subcomponents/mek_shield-weakness.vue?07d1","webpack:///./src/design_components/mek_shield/subcomponents/mek_shield-weakness.vue","webpack:///./src/data_table_modules/universal/mek_partial-function-data-module.js","webpack:///./src/data_table_modules/mek_shield/mek_shield-weakness-data-module.js","webpack:///./src/mixins/alerts_mixin.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","items","weakness_table","pkey","selected-keys","selected_keys","headers","weakness","monicker","cost","name","flow","show-headers","format","on","update-selected-data","select_weakness","staticRenderFns","mek_shield_weaknessvue_type_script_lang_js_","props","mixins","alerts_mixin","components","mek-sub-component-table","__webpack_require__","e","then","bind","data","obj","alerts","suppressAlerts","selected_weakness_array","methods","_selected_weakness","_this","new_selected_weakness_array","toggleWeakness","cleaned_data","Object","mek_shield_weakness_data_module","cleaned_array","length","forEach","_alert","addAlert","publishAlerts","$set","$emit","_weakness_array","_weakness","_this2","weakness_array","JSON","parse","stringify","remove_weakness","some","_val","filter","push","computed","_this3","weaknessArray","update","key_list","subcomponents_mek_shield_weaknessvue_type_script_lang_js_","component","componentNormalizer","__webpack_exports__","partial_validate","_data_table","_validation_keys","_data","Array","isArray","valid","every","_keys","partial_has_feature","_key","undefined","partial_get_feature","_has_feature","found_feature","_table_val","partial_cleaned_feature","_validator","_get_feature","_default_data","_name","_pkey","_feature","json_data","weakness_data_table","only_exclusive","_el","data_table_keys","default_data","all_exclusive","weakness_validate","has_weakness","get_weakness","is_exclusive_weakness","_exclusive_target","_pkey_value","exclusive_target_array","toLowerCase","cleaned_weakness","hasExclusiveOnly","hasExclusiveAll","error","temp_selected_weakness_array","reduceRight","_cleaned_array","isAll","clean_weakness","isOnly","includes","reverse","_alert_string","$store","commit"],"mappings":"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","file":"js/mek_shield-weakness-legacy.a6660772.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('mek-sub-component-table',{attrs:{\"items\":_vm.weakness_table,\"pkey\":_vm.pkey,\"selected-keys\":_vm.selected_keys,\"headers\":{weakness:'Weakness',monicker:'Monicker',cost:'Cost'},\"name\":\"Weakness\",\"flow\":\"pkey-col\",\"show-headers\":true,\"format\":{cost:'multiplier'}},on:{\"update-selected-data\":_vm.select_weakness}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <mek-sub-component-table\r\n        :items=\"weakness_table\" :pkey=\"pkey\" :selected-keys=\"selected_keys\"\r\n        :headers=\"{weakness:'Weakness',monicker:'Monicker',cost:'Cost'}\"\r\n        name=\"Weakness\" flow=\"pkey-col\" :show-headers=\"true\"\r\n        :format=\"{cost:'multiplier'}\"\r\n        @update-selected-data=\"select_weakness\"\r\n    ></mek-sub-component-table>\r\n</template>\r\n<script>\r\nimport alerts_mixin from \"@/mixins/alerts_mixin\";\r\n\r\nimport {weakness_data_table, cleaned_weakness}\r\n    from \"@/data_table_modules/mek_shield/mek_shield-weakness-data-module\";\r\n\r\nexport default \r\n{\r\n    name:\"mek_shield_weakness\",\r\n    props:[\"weaknessArray\"],\r\n    mixins:[alerts_mixin],\r\n    components:\r\n    {\r\n        \"mek-sub-component-table\":()=>import(\"@/design_components/universal/mek_sub-component-table.vue\")\r\n    },\r\n    data:function()\r\n    {\r\n        let obj={};\r\n        obj.alerts=[];\r\n        obj.pkey=\"weakness\";\r\n        obj.suppressAlerts=false;\r\n        obj.selected_weakness_array=[{weakness:\"All\",monicker:\"Shield\",cost:1.0}];\r\n        return obj;\r\n    },\r\n    methods:\r\n    {\r\n        select_weakness:function(_selected_weakness)\r\n        {\r\n            this.suppressAlerts=true;//suppress alerts, for exclusive switching\r\n            let new_selected_weakness_array=this.toggleWeakness(this.selected_weakness_array,_selected_weakness);\r\n            let cleaned_data=cleaned_weakness(new_selected_weakness_array, this.pkey);\r\n            new_selected_weakness_array=cleaned_data.cleaned_array;\r\n            if(cleaned_data.alerts.length>0 && !this.suppressAlerts)\r\n            {\r\n                cleaned_data.alerts.forEach((_alert)=>\r\n                {\r\n                    this.addAlert(_alert);\r\n                });\r\n                this.publishAlerts();\r\n            }\r\n            this.$set(this,\"selected_weakness_array\",new_selected_weakness_array);\r\n            this.$emit(\"update-weakness\",new_selected_weakness_array);\r\n            this.suppressAlerts=false;\r\n        },\r\n        toggleWeakness(_weakness_array,_weakness)\r\n        {\r\n            let weakness_array=JSON.parse(JSON.stringify(_weakness_array));\r\n            \r\n            let remove_weakness=weakness_array.some((_val)=>\r\n            {//if _weakness matches already existing weakness, flag for deletion\r\n                return _val[this.pkey]==_weakness[this.pkey];\r\n            },this);\r\n\r\n            if(remove_weakness)\r\n            {//if flagged for removal, filter out\r\n                return weakness_array.filter((_val)=>\r\n                {\r\n                    return _val[this.pkey]!=_weakness[this.pkey];\r\n                },this);\r\n            }\r\n            weakness_array.push(_weakness);\r\n            //otherwise add weakness and return\r\n            return weakness_array;\r\n        }\r\n    },\r\n    computed:\r\n    {\r\n        weakness_table()\r\n        {\r\n            return weakness_data_table;\r\n        },\r\n        selected_keys()\r\n        {\r\n            let cleaned_data=cleaned_weakness(this.weaknessArray,this.pkey);\r\n            if(cleaned_data.alerts.length>0 && !this.suppressAlerts)\r\n            {\r\n                cleaned_data.alerts.forEach((_alert)=>\r\n                {\r\n                    this.addAlert(_alert);\r\n                });\r\n                this.publishAlerts();\r\n            }\r\n            if(cleaned_data.update)\r\n            {\r\n                this.$emit(\"alert-generated\",true);\r\n                this.$emit(\"update-weakness\",cleaned_data.cleaned_array);\r\n            }\r\n            this.$set(this,\"selected_weakness_array\",cleaned_data.cleaned_array);\r\n            return cleaned_data.key_list;\r\n        }\r\n    }\r\n}\r\n</script>","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./mek_shield-weakness.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./mek_shield-weakness.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./mek_shield-weakness.vue?vue&type=template&id=b1f497ee&\"\nimport script from \"./mek_shield-weakness.vue?vue&type=script&lang=js&\"\nexport * from \"./mek_shield-weakness.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","//data table module, raw data output for re-use in non-vue-component formats\r\n\r\n//ATTEMPT: make validators and has_feat and get_feat and cleaned_feat functions \r\n//          neutral and reusable across all data modules\r\n\r\n//partial data validator\r\n//called with data_table and validation_keys in data-module\r\nlet partial_validate=(_data_table,_validation_keys)=>(_data)=>\r\n{//_data_table: Array, array of data to validate against\r\n    //_validation_keys: Array, keys to be compared between passed in data and data_table\r\n    //_data: Object, data to be compared to data table \r\n    if(typeof _data===\"undefined\" || !Array.isArray(_validation_keys) || _validation_keys.length==0)\r\n    {\r\n        return false;\r\n    }\r\n    let valid=_data_table.some((_val)=>\r\n    {\r\n        return _validation_keys.every((_keys)=>\r\n        {//return true if all validation_keys in _data match an element in _data_table\r\n            return _data[_keys]==_val[_keys];\r\n        });\r\n    });\r\n    return valid;\r\n}\r\n\r\n//partial_has_feature, determine if provided data table has matching element with provided key and val\r\n//called in data module to generate full function with local data\r\nlet partial_has_feature=(_data_table)=>(_key, _val)=>\r\n{\r\n    return _data_table.some((_data)=>\r\n    {\r\n        return _data[_key]!==undefined && _data[_key]==_val;\r\n    });\r\n};\r\n\r\n//partial get_feature, returns full function for data module\r\n//requires data_table (array) and module's has_feature function\r\n//returns full matching element in provided data table\r\n//has_feature must exist in data table module\r\nlet partial_get_feature=(_data_table, _has_feature)=>(_key, _val)=>\r\n{\r\n    let found_feature=null;\r\n    if(_has_feature(_key,_val))\r\n    {\r\n        _data_table.some((_table_val)=>\r\n        {\r\n            if(_table_val[_key]==_val)\r\n            {\r\n                found_feature=_table_val;\r\n                return true;\r\n            }\r\n        },this);\r\n    }\r\n    return found_feature;\r\n}\r\n\r\nlet partial_cleaned_feature=(_validator, _has_feature, _get_feature, _default_data, _name)=>(_pkey, _feature)=>\r\n{//input: primary key, selected feature, filtered data table\r\n    let data=undefined;\r\n    let key_list=[];\r\n    let update=false;\r\n    let alerts=[];\r\n    let json_data=JSON.stringify(_feature);\r\n\r\n    if(_feature===undefined || !_has_feature(_pkey,_feature[_pkey]))\r\n    {\r\n        data=_default_data;\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting to default. ****\");\r\n    }\r\n    else if(!_validator(_feature))\r\n    {\r\n        data=JSON.parse(JSON.stringify(_get_feature(_pkey,_feature[_pkey])));\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting. ****\");\r\n    }\r\n    else\r\n    {\r\n        data=JSON.parse(JSON.stringify(_feature));\r\n        key_list=[data[_pkey]];\r\n        update=false;\r\n    }\r\n    return {data:data, key_list:key_list, update:update, alerts:alerts};\r\n}\r\n\r\nexport {partial_validate, partial_has_feature, partial_get_feature, partial_cleaned_feature};\r\n","//data table module, raw data output for re-use in non-vue-component formats\r\nimport {partial_validate, partial_has_feature, partial_get_feature} \r\n    from \"@/data_table_modules/universal/mek_partial-function-data-module\";\r\n\r\n//create new weakness_data_table\r\nlet weakness_data_table=\r\n[\r\n    {weakness:\"All\",monicker:\"Shield\",cost:1.0},\r\n    {weakness:\"Ablative\",monicker:\"Screen\",cost:1.0},\r\n    {weakness:\"Energy Only\",monicker:\"Interference\",cost:0.75,only_exclusive:true},\r\n    {weakness:\"Matter Only\",monicker:\"Kinetic\",cost:0.75,only_exclusive:true},\r\n    {weakness:\"Ranged Only\",monicker:\"Swashbuckling\",cost:0.75,only_exclusive:true},\r\n    {weakness:\"Enclosing\",monicker:\"Mirror\",cost:0.5},\r\n    {weakness:\"Surge\",monicker:\"Surge\",cost:2.5}\r\n];\r\nlet only_exclusive=weakness_data_table.filter((_el)=>{return typeof _el.only_exclusive!==\"undefined\";});\r\nlet data_table_keys=[\"weakness\",\"monicker\",\"only_exclusive\",\"cost\"];\r\nlet default_data={weakness:\"All\",monicker:\"Shield\",cost:1.0};\r\nlet all_exclusive=[default_data];\r\n\r\n//data validator for damage_data_table\r\n//call partial_validate with appropriate data for full validate\r\nlet weakness_validate=partial_validate(weakness_data_table, data_table_keys);\r\n\r\n//completed function for checking if data has data\r\nlet has_weakness=partial_has_feature(weakness_data_table);\r\n\r\n//completed function for returning matching data\r\nlet get_weakness=partial_get_feature(weakness_data_table, has_weakness);\r\n\r\nlet is_exclusive_weakness=function(_exclusive_target, _pkey, _pkey_value)\r\n{\r\n    let exclusive_target_array=null;\r\n    switch(_exclusive_target.toLowerCase())\r\n    {\r\n        case \"only_exclusive\":\r\n            exclusive_target_array=only_exclusive;\r\n            break;\r\n        case \"all_exclusive\":\r\n            exclusive_target_array=all_exclusive;\r\n            break;\r\n    }\r\n    if(exclusive_target_array===null)\r\n    {\r\n        return false;\r\n    }\r\n    return exclusive_target_array.some((_val)=>\r\n    {\r\n        return _val[_pkey]==_pkey_value;\r\n    });\r\n};\r\n\r\nlet cleaned_weakness=function(_weakness_array, _pkey)\r\n{//takes weakness_array, returns cleaned array removing multiple exclusive values\r\n    let hasExclusiveOnly=false;\r\n    let hasExclusiveAll=false;\r\n    let update=false;\r\n    let key_list=[];\r\n    let alerts=[];\r\n\r\n    if(_weakness_array===undefined || _pkey===undefined)\r\n    {\r\n        alerts.push(\"Mek_Shield-Weakness: \");\r\n        let error=_weakness_array===undefined\r\n            ? \"**** Missing weakness array. Returning blank. ****\"\r\n            : \"**** No primary key provided. Returning blank. ****\";\r\n        alerts.push(error);\r\n        return {cleaned_array:[default_data],update:true,key_list:[\"All\"],alerts:alerts};\r\n    }\r\n\r\n    let temp_selected_weakness_array=_weakness_array.reduceRight((_cleaned_array, _val)=>\r\n    {\r\n        if(hasExclusiveAll)\r\n        {//found exclusive all weakness, return just that\r\n            key_list=[\"All\"];\r\n            return [default_data];\r\n        }\r\n        let isAll=is_exclusive_weakness(\"all_exclusive\",_pkey,_val[_pkey]);\r\n        if(isAll && _cleaned_array.length==0)\r\n        {//last item added was All, return that and essential end\r\n            hasExclusiveAll=true;\r\n            key_list=[\"All\"];\r\n            return [default_data];\r\n        }\r\n        else if(isAll)\r\n        {//otherwise, not last item, ignore All weakness\r\n            return _cleaned_array;\r\n        }\r\n        if(_val[_pkey]===undefined)\r\n        {//if weakness with pkey doesn't exist in data table, ignore\r\n            alerts.push(\"Mek_Shield-Weakness: \"+JSON.stringify(_val));\r\n            alerts.push(\"**** Missing primary key. Ignoring. ****\");\r\n            return _cleaned_array;\r\n        }\r\n        let clean_weakness=_val;\r\n        if(!weakness_validate(_val))\r\n        {//invalid data\r\n            alerts.push(\"Mek_Shield-Weakness: \"+JSON.stringify(_val))\r\n            alerts.push(\"**** Invalid data, attempting to reset. ****\")\r\n            clean_weakness=get_weakness(_pkey,_val[_pkey]);\r\n            _val=clean_weakness;//replace current value with correct value\r\n            update=true;\r\n            //attempt to set to corrected weakness\r\n        }\r\n        if(clean_weakness===null)\r\n        {//no matching weakness\r\n            alerts.push(\"**** Unable to reset. No matching data. ****\")\r\n            update=true;\r\n            return _cleaned_array;\r\n            //ignore element\r\n        }\r\n\r\n        let isOnly=is_exclusive_weakness(\"only_exclusive\",_pkey,_val[_pkey]);\r\n\r\n        if(isOnly && !hasExclusiveOnly)\r\n        {\r\n            _cleaned_array.push(_val);\r\n            hasExclusiveOnly=true;\r\n            key_list.push(_val[_pkey]);\r\n            return _cleaned_array;\r\n        }\r\n        else if(isOnly && hasExclusiveOnly)\r\n        {\r\n            alerts.push(\"Mek_Shield-Weakness: \"+_val);\r\n            alerts.push(\"**** Duplicate exclusive Shield data. Ignoring. ****\");\r\n            update=true;\r\n            return _cleaned_array;\r\n        }\r\n\r\n        if(!key_list.includes(_val[_pkey]))\r\n        {\r\n            _cleaned_array.push(_val);\r\n            key_list.push(_val[_pkey]);\r\n        }\r\n        return _cleaned_array;\r\n    },[]);\r\n    temp_selected_weakness_array.reverse();\r\n    if(temp_selected_weakness_array.length==0)\r\n    {//empty, reset to default\r\n        temp_selected_weakness_array=[JSON.parse(JSON.stringify(default_data))];\r\n        update=true;\r\n        key_list=[\"All\"];\r\n        alerts.push(\"Mek_Shield-Weakness: \");\r\n        alerts.push(\"**** Reseting to default ****\");\r\n    }\r\n    return {cleaned_array:temp_selected_weakness_array,update:update,key_list:key_list,alerts:alerts};\r\n    //returns an object with the pruned weakness array, whether it was updated, and the key_list\r\n}\r\n\r\nexport {weakness_data_table, weakness_validate, has_weakness, get_weakness, cleaned_weakness};\r\n","export default\r\n{\r\n    methods:\r\n    {\r\n        addAlert(_alert_string)\r\n        {\r\n            this.alerts.push(_alert_string);\r\n        },\r\n        publishAlerts()\r\n        {\r\n            if(this.alerts.length>0)\r\n            {   \r\n                this.$store.commit(\"alertMessage\",this.alerts);\r\n            }\r\n            this.$set(this,\"alerts\",[]);\r\n        },\r\n    }\r\n}"],"sourceRoot":""}