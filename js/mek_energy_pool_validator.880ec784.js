(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["mek_energy_pool_validator"],{"10ad":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateComponent", function() { return validateComponent; });\n/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ac6a");\n/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0__);\n\nlet validators = {};\n__webpack_require__.e(/* import() | mek_energy_pool-size-data-module */ "mek_energy_pool-size-data-module").then(__webpack_require__.bind(null, "ca58")).then(_module => {\n  validators.size = _module.cleaned_feature;\n});\n__webpack_require__.e(/* import() | mek_energy_pool-pool-data-module */ "mek_energy_pool-pool-data-module").then(__webpack_require__.bind(null, "5d4a")).then(_module => {\n  validators.pool = _module.cleaned_feature;\n});\n__webpack_require__.e(/* import() | mek_energy_pool-feature-data-module */ "mek_energy_pool-feature-data-module").then(__webpack_require__.bind(null, "46e2")).then(_module => {\n  validators.feature = _module.cleaned_feature;\n});\n__webpack_require__.e(/* import() | mek_space-efficiency-data-module */ "mek_space-efficiency-data-module").then(__webpack_require__.bind(null, "16e1")).then(_module => {\n  validators.space_efficiency = _module.validate_efficiency;\n});\nlet loopValidators, updateMultipliers, round;\n__webpack_require__.e(/* import() | validator_functions */ "validator_functions").then(__webpack_require__.bind(null, "07de")).then(_module => {\n  loopValidators = _module.loopValidators;\n  updateMultipliers = _module.updateMultipliers;\n  round = _module.round;\n});\n\nvalidators.derived = _component => {\n  let cleanedComponent = _component;\n  let alerts = []; //update static values\n\n  let isFragile = cleanedComponent.feature_array.some(_val => {\n    return _val.feature == "Fragile";\n  });\n  let newDamageCapacity = isFragile ? 1 : cleanedComponent.selected_energy_pool.damage_capacity;\n\n  if (cleanedComponent.damage_capacity != newDamageCapacity) {\n    //validate damage capacity\n    alerts.push("Mek-Energy_Pool: damage_capacity");\n    alerts.push("**** Invalid Damage Capacity. Correcting. ****");\n    cleanedComponent.damage_capacity = newDamageCapacity;\n  }\n\n  let newWeight = cleanedComponent.selected_energy_pool.damage_capacity / 2;\n\n  if (cleanedComponent.weight != newWeight) {\n    //validate weight\n    alerts.push("Mek-Energy_Pool: weight");\n    alerts.push("**** Invalid Weight. Correcting. ****");\n    cleanedComponent.weight = newWeight;\n  }\n\n  let newCost = cleanedComponent.selected_energy_pool.cost * cleanedComponent.cost_multiplier + cleanedComponent.efficiencies.space.cost;\n  newCost = round(newCost, 2);\n\n  if (cleanedComponent.cost != newCost) {\n    //validate weight\n    alerts.push("Mek-Energy_Pool: cost");\n    alerts.push("**** Invalid Cost. Correcting. ****");\n    cleanedComponent.cost = newCost;\n  }\n\n  let isMorphable = cleanedComponent.feature_array.some(_val => {\n    return _val.feature == "Morphable";\n  });\n\n  switch (true) {\n    case isMorphable && (cleanedComponent.selected_morphable === undefined || !cleanedComponent.selected_morphable):\n    case !isMorphable && cleanedComponent.selected_morphable:\n      alerts.push("Mek-Energy_Pool: Morphable");\n      alerts.push("**** Invalid Morphable data. Correcting. ****");\n      cleanedComponent.selected_morphable = isMorphable;\n  }\n\n  return {\n    data: cleanedComponent,\n    alerts: alerts\n  };\n};\n\nlet validateComponent = _component => {\n  let cleanedComponent = _component;\n  let validatedData;\n  let updateList = ["selected_portfolio_size", "feature_array"];\n  let loopAlerts;\n  let alerts = []; //loop thru independent validations\n\n  let componentsToValidate = [{\n    validator: validators.pool,\n    pkey: "power_available",\n    component_prop: "selected_energy_pool"\n  }, {\n    validator: validators.size,\n    pkey: "size",\n    component_prop: "selected_portfolio_size"\n  }, {\n    validator: validators.feature,\n    pkey: "feature",\n    component_prop: \'feature_array\'\n  }];\n\n  var _loopValidators = loopValidators(componentsToValidate, cleanedComponent);\n\n  cleanedComponent = _loopValidators.cleanedComponent;\n  loopAlerts = _loopValidators.loopAlerts;\n  alerts = alerts.concat(loopAlerts); //update cost_multipliers for components needing update\n\n  validatedData = updateMultipliers(updateList, cleanedComponent, "Mek-Energy_Pool");\n  cleanedComponent.cost_multipliers = validatedData.data;\n  alerts = alerts.concat(validatedData.alerts); //validate space efficiency\n\n  let cost_multiplier = Object.entries(cleanedComponent.cost_multipliers).reduce((_multi, _val) => {\n    //calc new cost_multiplier\n    return _multi * _val[1];\n  }, 1);\n  cleanedComponent.cost_multiplier = round(cost_multiplier, 2);\n  let total_cost = cleanedComponent.selected_energy_pool.cost * cleanedComponent.cost_multiplier;\n  validatedData = validators.space_efficiency(cleanedComponent.efficiencies.space, total_cost, "Mek-Energy_Pool");\n  alerts = alerts.concat(validatedData.alerts);\n  cleanedComponent.efficiencies.space = validatedData.data; //update derived values\n\n  validatedData = validators.derived(cleanedComponent);\n  cleanedComponent = validatedData.data;\n  alerts = alerts.concat(validatedData.alerts);\n  return {\n    data: cleanedComponent,\n    alerts: alerts\n  };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10ad\n')}}]);