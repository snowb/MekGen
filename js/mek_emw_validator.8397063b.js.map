{"version":3,"sources":["webpack:///./src/store/modules/validators/mek_emw_validator.js"],"names":["loopValidators","updateMultipliers","round","validators","__webpack_require__","e","then","bind","_module","accuracy","cleaned_feature","attack_factor","damage","filter_feature","filter_data_table","feature","turns_in_use","space_efficiency","validate_efficiency","validateComponent","_component","validatedData","loopAlerts","cleanedComponent","updateList","alerts","componentsToValidate","validator","pkey","component_prop","_loopValidators","concat","selected_turns_in_use","turns","feature_array","cleaned_array","cost_multiplier","Object","entries","cost_multipliers","reduce","_multi","_val","total_cost","selected_damage","cost","efficiencies","space","data","damage_capacity","weight","isBeamShield","some","_feat","test","beam_shield","stopping_power","defense_accuracy","selected_accuracy"],"mappings":"oLAAA,IAuCIA,EAAgBC,EAAmBC,EAvCnCC,EAAW,GAEfC,EAAAC,EAAA,gCAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IAEHL,EAAWM,SAASD,EAAQE,kBAGhCN,EAAAC,EAAA,qCAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IAEHL,EAAWQ,cAAcH,EAAQE,kBAGrCN,EAAAC,EAAA,8BAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IAEHL,EAAWS,OAAOJ,EAAQE,kBAG9BN,EAAAC,EAAA,+BAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IAEHL,EAAWU,eAAeL,EAAQM,kBAClCX,EAAWY,QAAQP,EAAQE,kBAG/BN,EAAAC,EAAA,oCAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IAEHL,EAAWa,aAAaR,EAAQE,kBAGpCN,EAAAC,EAAA,oCAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IAEHL,EAAWc,iBAAiBT,EAAQU,sBAIxCd,EAAAC,EAAA,uBAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IAEDR,EAA4CQ,EAA5CR,eAAgBC,EAA4BO,EAA5BP,kBAAmBC,EAASM,EAATN,QAGzC,IAAIiB,EAAmBC,IAEnB,IACIC,EAEAC,EAHAC,EAAiBH,EAEjBI,EAAW,CAAC,wBAAwB,oBAAoB,yBAAyB,iBAEjFC,EAAO,GAEPC,EACJ,CACI,CAACC,UAAUxB,EAAWS,OAAOgB,KAAK,SAASC,eAAe,mBAC1D,CAACF,UAAUxB,EAAWa,aAAaY,KAAK,QAAQC,eAAe,yBAC/D,CAACF,UAAUxB,EAAWM,SAASmB,KAAK,WAAWC,eAAe,qBAC9D,CAACF,UAAUxB,EAAWQ,cAAciB,KAAK,gBAAgBC,eAAe,2BAZhF,IAAAC,EAcsC9B,EAAe0B,EAAsBH,GAArEA,EAdNO,EAcMP,iBAAkBD,EAdxBQ,EAcwBR,WACpBG,EAAOA,EAAOM,OAAOT,GAErBnB,EAAWU,eAA6D,gBAA9CU,EAAiBS,sBAAsBC,OAEjEZ,EAAclB,EAAWY,QAAQQ,EAAiBW,cAAc,WAChEX,EAAiBW,cAAcb,EAAcc,cAC7CV,EAAOA,EAAOM,OAAOV,EAAcI,QAEnCF,EAAiBtB,EAAkBuB,EAAWD,GAE9C,IAAIa,EAAgBC,OAAOC,QAAQf,EAAiBgB,kBAAkBC,OAAO,CAACC,EAAQC,KAElF,OAAOD,EAAOC,EAAK,IACrB,GACFnB,EAAiBa,gBAAgBlC,EAAMkC,EAAgB,GACvD,IAAIO,EAAWpB,EAAiBqB,gBAAgBC,KAAOtB,EAAiBa,gBACxEf,EAAclB,EAAWc,iBAAiBM,EAAiBuB,aAAaC,MAAOJ,EAAY,WAC3FlB,EAAOA,EAAOM,OAAOV,EAAcI,QACnCF,EAAiBuB,aAAaC,MAAM1B,EAAc2B,KAElDzB,EAAiB0B,gBAAgB1B,EAAiBqB,gBAAgBhC,OAClEW,EAAiB2B,OAAO3B,EAAiB0B,gBAAgB,EAEzD,IAAIE,EAAa5B,EAAiBW,cAAckB,KAAMC,IAElD,MAAO,qBAAqBC,KAAKD,EAAMtC,WAW3C,OATGoC,IAEC5B,EAAiBgC,YAAY,GAE7BhC,EAAiBgC,YAAYC,eAAejC,EAAiBqB,gBAAgBhC,OAC7EW,EAAiBgC,YAAYE,iBAAiBlC,EAAiBmC,kBAAkBjD,SAAS,EAC1Fc,EAAiBgC,YAAY3C,OAAOW,EAAiBqB,gBAAgBhC,OAAO,GAGzE,CAACoC,KAAKzB,EAAiBE,OAAOA","file":"js/mek_emw_validator.8397063b.js","sourcesContent":["let validators={};\r\n\r\nimport(/* webpackChunkName: \"mek_emw-accuracy-data-module\" */\"@/data_table_modules/mek_emw/mek_emw-accuracy-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.accuracy=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_emw-attack-factor-data-module\" */\"@/data_table_modules/mek_emw/mek_emw-attack-factor-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.attack_factor=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_emw-damage-data-module\" */\"@/data_table_modules/mek_emw/mek_emw-damage-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.damage=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_emw-feature-data-module\" */\"@/data_table_modules/mek_emw/mek_emw-feature-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.filter_feature=_module.filter_data_table;//filter based on burst_value\r\n    validators.feature=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_emw-turns-in-use-data-module\" */\"@/data_table_modules/mek_emw/mek_emw-turns-in-use-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.turns_in_use=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_space-efficiency-data-module\" */\"@/data_table_modules/universal/mek_space-efficiency-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.space_efficiency=_module.validate_efficiency;\r\n});\r\n\r\nlet loopValidators, updateMultipliers, round;\r\nimport(/* webpackChunkName: \"validator_functions\" */\"./validator_functions\")\r\n.then((_module)=>\r\n{\r\n    ({loopValidators, updateMultipliers, round} = _module);\r\n});\r\n\r\nlet validateComponent=(_component)=>\r\n{\r\n    let cleanedComponent=_component;\r\n    let validatedData;\r\n    let updateList=[\"selected_turns_in_use\",\"selected_accuracy\",\"selected_attack_factor\",\"feature_array\"];\r\n    let loopAlerts;\r\n    let alerts=[];\r\n    //loop thru independent validations\r\n    let componentsToValidate=\r\n    [\r\n        {validator:validators.damage,pkey:\"damage\",component_prop:\"selected_damage\"},\r\n        {validator:validators.turns_in_use,pkey:\"turns\",component_prop:\"selected_turns_in_use\"},\r\n        {validator:validators.accuracy,pkey:\"accuracy\",component_prop:'selected_accuracy'},\r\n        {validator:validators.attack_factor,pkey:\"attack_factor\",component_prop:'selected_attack_factor'},\r\n    ];\r\n    ({cleanedComponent, loopAlerts} = loopValidators(componentsToValidate, cleanedComponent));\r\n    alerts=alerts.concat(loopAlerts)\r\n    //update feature table\r\n    validators.filter_feature(cleanedComponent.selected_turns_in_use.turns==\"__INFINITY__\");\r\n    //validate feature_array\r\n    validatedData=validators.feature(cleanedComponent.feature_array,\"feature\");\r\n    cleanedComponent.feature_array=validatedData.cleaned_array;\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    //update cost_multipliers for components needing update\r\n    cleanedComponent=updateMultipliers(updateList,cleanedComponent);\r\n    //validate space efficiency\r\n    let cost_multiplier=Object.entries(cleanedComponent.cost_multipliers).reduce((_multi, _val)=>\r\n    {//calc new cost_multiplier\r\n        return _multi*_val[1];\r\n    },1);\r\n    cleanedComponent.cost_multiplier=round(cost_multiplier,2);\r\n    let total_cost=cleanedComponent.selected_damage.cost * cleanedComponent.cost_multiplier;\r\n    validatedData=validators.space_efficiency(cleanedComponent.efficiencies.space, total_cost, \"Mek-EMW\");\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    cleanedComponent.efficiencies.space=validatedData.data;\r\n    //update static values\r\n    cleanedComponent.damage_capacity=cleanedComponent.selected_damage.damage;\r\n    cleanedComponent.weight=cleanedComponent.damage_capacity/2;\r\n\r\n    let isBeamShield=cleanedComponent.feature_array.some((_feat)=>\r\n    {\r\n        return /.*beam.*shield.*/gi.test(_feat.feature);\r\n    });\r\n    if(isBeamShield)\r\n    {\r\n        cleanedComponent.beam_shield={};\r\n\r\n        cleanedComponent.beam_shield.stopping_power=cleanedComponent.selected_damage.damage;\r\n        cleanedComponent.beam_shield.defense_accuracy=cleanedComponent.selected_accuracy.accuracy-2;\r\n        cleanedComponent.beam_shield.damage=cleanedComponent.selected_damage.damage/2;\r\n    }\r\n\r\n    return {data:cleanedComponent,alerts:alerts};\r\n};\r\n\r\nexport {validateComponent};"],"sourceRoot":""}