{"version":3,"sources":["webpack:///./src/store/modules/validators/mek_magazine_validator.js"],"names":["loopValidators","updateMultipliers","validators","__webpack_require__","e","then","bind","_module","filter_data_table","ammo","cleaned_feature","validateComponent","_component","loopAlerts","cleanedComponent","updateList","alerts","hasBlastRadius","feature_array","some","_feat","test","feature","componentsToValidate","validator","pkey","component_prop","_loopValidators","concat","cost_multiplier","Object","entries","cost_multipliers","reduce","_multi","_val","cost","selected_gun","data"],"mappings":"2LAAA,IAUIA,EAAgBC,EAVhBC,EAAW,GAEfC,EAAAC,EAAA,6BAAAC,KAAAF,EAAAG,KAAA,cAECD,KAAME,IAEHL,EAAWM,kBAAkBD,EAAQC,kBACrCN,EAAWO,KAAKF,EAAQG,kBAI5BP,EAAAC,EAAA,uBAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IAEDP,EAAqCO,EAArCP,eAAgBC,EAAqBM,EAArBN,oBAGtB,IAAIU,EAAmBC,IAEnB,IACIC,EADAC,EAAiBF,EAEjBG,EAAW,CAAC,iBACZC,EAAO,GACPC,EAAeH,EAAiBI,cAAcC,KAAMC,IAEpD,MAAO,UAAUC,KAAKD,EAAME,WAEhCpB,EAAWM,kBAAkBS,GAE7B,IAAIM,EACJ,CACI,CAACC,UAAUtB,EAAWO,KAAKgB,KAAK,OAAOC,eAAe,kBAb9D,IAAAC,EAesC3B,EAAeuB,EAAsBT,GAYvE,OAZEA,EAfNa,EAeMb,iBAAkBD,EAfxBc,EAewBd,WACpBG,EAAOA,EAAOY,OAAOf,GAGrBC,EAAiBb,EAAkBc,EAAWD,GAE9CA,EAAiBe,gBAAgBC,OAAOC,QAAQjB,EAAiBkB,kBAAkBC,OAAO,CAACC,EAAQC,KAE/F,OAAOD,EAAOC,EAAK,IACrB,GACFrB,EAAiBsB,KAAKtB,EAAiBuB,aAAaD,KAAOtB,EAAiBe,gBAErE,CAACS,KAAKxB,EAAiBE,OAAOA","file":"js/mek_magazine_validator.b5777932.js","sourcesContent":["let validators={};\r\n\r\nimport(/* webpackChunkName: \"mek_ammo-list-data-module\" */\r\n    \"@/data_table_modules/mek_magazine/mek_ammo-list-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.filter_data_table=_module.filter_data_table;\r\n    validators.ammo=_module.cleaned_feature;\r\n});\r\n\r\nlet loopValidators, updateMultipliers;\r\nimport(/* webpackChunkName: \"validator_functions\" */\"./validator_functions\")\r\n.then((_module)=>\r\n{\r\n    ({loopValidators, updateMultipliers} = _module);\r\n});\r\n\r\nlet validateComponent=(_component)=>\r\n{\r\n    let cleanedComponent=_component;\r\n    let loopAlerts;\r\n    let updateList=[\"feature_array\"];\r\n    let alerts=[];\r\n    let hasBlastRadius=cleanedComponent.feature_array.some((_feat)=>\r\n    {\r\n        return /blast/gi.test(_feat.feature);\r\n    });\r\n    validators.filter_data_table(hasBlastRadius);\r\n    //loop thru independent validations\r\n    let componentsToValidate=\r\n    [\r\n        {validator:validators.ammo,pkey:\"type\",component_prop:\"feature_array\"},\r\n    ];\r\n    ({cleanedComponent, loopAlerts} = loopValidators(componentsToValidate, cleanedComponent));\r\n    alerts=alerts.concat(loopAlerts)\r\n\r\n    //update cost_multipliers for components needing update\r\n    cleanedComponent=updateMultipliers(updateList,cleanedComponent);\r\n    //validate space efficiency\r\n    cleanedComponent.cost_multiplier=Object.entries(cleanedComponent.cost_multipliers).reduce((_multi, _val)=>\r\n    {//calc new cost_mulitplier\r\n        return _multi*_val[1];\r\n    },1);\r\n    cleanedComponent.cost=cleanedComponent.selected_gun.cost * cleanedComponent.cost_multiplier;\r\n    \r\n    return {data:cleanedComponent,alerts:alerts};\r\n};\r\n\r\nexport {validateComponent};"],"sourceRoot":""}