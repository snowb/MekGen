{"version":3,"sources":["webpack:///./src/data_table_modules/universal/mek_partial-function-data-module.js","webpack:///./src/data_table_modules/mek_energy_pool/mek_energy_pool-size-data-module.js"],"names":["partial_validate","_data_table","_validation_keys","_data","Array","isArray","length","valid","some","_val","every","_keys","partial_has_feature","_key","undefined","partial_get_feature","_has_feature","found_feature","_table_val","_this","partial_cleaned_feature","_validator","_get_feature","_default_data","_name","_pkey","_feature","data","key_list","update","alerts","json_data","JSON","stringify","parse","push","__webpack_require__","r","__webpack_exports__","d","energy_pool_size_data_table","energy_pool_size_validate","has_feature","get_feature","cleaned_feature","_data_table_modules_universal_mek_partial_function_data_module__WEBPACK_IMPORTED_MODULE_0__","size","cost","data_table_keys","default_data","Infinity"],"mappings":"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","file":"js/mek_energy_pool-size-data-module-legacy.fcfc0d79.js","sourcesContent":["//data table module, raw data output for re-use in non-vue-component formats\r\n\r\n//ATTEMPT: make validators and has_feat and get_feat and cleaned_feat functions \r\n//          neutral and reusable across all data modules\r\n\r\n//partial data validator\r\n//called with data_table and validation_keys in data-module\r\nlet partial_validate=(_data_table,_validation_keys)=>(_data)=>\r\n{//_data_table: Array, array of data to validate against\r\n    //_validation_keys: Array, keys to be compared between passed in data and data_table\r\n    //_data: Object, data to be compared to data table \r\n    if(typeof _data===\"undefined\" || !Array.isArray(_validation_keys) || _validation_keys.length==0)\r\n    {\r\n        return false;\r\n    }\r\n    let valid=_data_table.some((_val)=>\r\n    {\r\n        return _validation_keys.every((_keys)=>\r\n        {//return true if all validation_keys in _data match an element in _data_table\r\n            return _data[_keys]==_val[_keys];\r\n        });\r\n    });\r\n    return valid;\r\n}\r\n\r\n//partial_has_feature, determine if provided data table has matching element with provided key and val\r\n//called in data module to generate full function with local data\r\nlet partial_has_feature=(_data_table)=>(_key, _val)=>\r\n{\r\n    return _data_table.some((_data)=>\r\n    {\r\n        return _data[_key]!==undefined && _data[_key]==_val;\r\n    });\r\n};\r\n\r\n//partial get_feature, returns full function for data module\r\n//requires data_table (array) and module's has_feature function\r\n//returns full matching element in provided data table\r\n//has_feature must exist in data table module\r\nlet partial_get_feature=(_data_table, _has_feature)=>(_key, _val)=>\r\n{\r\n    let found_feature=null;\r\n    if(_has_feature(_key,_val))\r\n    {\r\n        _data_table.some((_table_val)=>\r\n        {\r\n            if(_table_val[_key]==_val)\r\n            {\r\n                found_feature=_table_val;\r\n                return true;\r\n            }\r\n        },this);\r\n    }\r\n    return found_feature;\r\n}\r\n\r\nlet partial_cleaned_feature=(_validator, _has_feature, _get_feature, _default_data, _name)=>(_pkey, _feature)=>\r\n{//input: primary key, selected feature, filtered data table\r\n    let data=undefined;\r\n    let key_list=[];\r\n    let update=false;\r\n    let alerts=[];\r\n    let json_data=JSON.stringify(_feature);\r\n\r\n    if(_feature===undefined || !_has_feature(_pkey,_feature[_pkey]))\r\n    {\r\n        data=_default_data;\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting to default. ****\");\r\n    }\r\n    else if(!_validator(_feature))\r\n    {\r\n        data=JSON.parse(JSON.stringify(_get_feature(_pkey,_feature[_pkey])));\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting. ****\");\r\n    }\r\n    else\r\n    {\r\n        data=JSON.parse(JSON.stringify(_feature));\r\n        key_list=[data[_pkey]];\r\n        update=false;\r\n    }\r\n    return {data:data, key_list:key_list, update:update, alerts:alerts};\r\n}\r\n\r\nexport {partial_validate, partial_has_feature, partial_get_feature, partial_cleaned_feature};\r\n","//data table module, raw data output for re-use in non-vue-component formats\r\nimport {partial_validate, partial_has_feature, partial_get_feature} \r\n    from \"@/data_table_modules/universal/mek_partial-function-data-module\";\r\n\r\n//create new energy_pool_size_data_table\r\nlet energy_pool_size_data_table=\r\n[\r\n    {size:1,cost:0.6},\r\n    {size:2,cost:0.75},\r\n    {size:3,cost:1},\r\n    {size:4,cost:1.2},\r\n    {size:5,cost:1.3},\r\n    {size:7,cost:1.4},\r\n    {size:10,cost:1.5},\r\n    {size:\"__INFINITY__\",cost:2},\r\n];\r\nlet data_table_keys=[\"size\",\"cost\"];\r\nlet default_data={size:3,cost:1};\r\n\r\n//data validator for energy_pool_size_data_table\r\n//call partial_validate with appropriate data for full validate\r\nlet energy_pool_size_validate=partial_validate(energy_pool_size_data_table, data_table_keys);\r\n\r\n//completed function for checking if data has data\r\nlet has_feature=partial_has_feature(energy_pool_size_data_table);\r\n\r\n//completed function for returning matching data\r\nlet get_feature=partial_get_feature(energy_pool_size_data_table, has_feature);\r\n\r\n/**** \r\n * \r\n * find way to partial function of Infinity values\r\n * \r\n * ****/\r\nlet cleaned_feature=function(_pkey, _feature)\r\n{//input: primary key, selected feature, filtered data table\r\n    let data=undefined;\r\n    let key_list=[];\r\n    let update=false;\r\n    let alerts=[];\r\n    let json_data=JSON.stringify(_feature);\r\n\r\n    if(_feature===undefined || !has_feature(_pkey,_feature[_pkey]))\r\n    {\r\n        data=default_data;\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(\"Mek_Energy_Pool-Size: \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting to default. ****\");\r\n    }\r\n    else if(!energy_pool_size_validate(_feature))\r\n    {\r\n        data=JSON.parse(JSON.stringify(get_feature(_pkey,_feature[_pkey])));\r\n        data.size=data.size===null?Infinity:data.size;\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(\"Mek_Energy_Pool-Size: \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting. ****\");\r\n    }\r\n    else\r\n    {\r\n        data=JSON.parse(JSON.stringify(_feature));\r\n        data.size=data.size===null?Infinity:data.size;\r\n        key_list=[data[_pkey]];\r\n        update=false;\r\n    }\r\n    return {data:data, key_list:key_list, update:update, alerts:alerts};\r\n};\r\n\r\nexport {energy_pool_size_data_table, energy_pool_size_validate, has_feature, get_feature, cleaned_feature};\r\n"],"sourceRoot":""}