{"version":3,"sources":["webpack:///./src/design_components/mek_shield/subcomponents/mek_shield-weakness.vue?49d1","webpack:///./src/data_table_modules/mek_shield/mek_shield-weakness-data-module.js","webpack:///src/design_components/mek_shield/subcomponents/mek_shield-weakness.vue","webpack:///./src/design_components/mek_shield/subcomponents/mek_shield-weakness.vue?07d1","webpack:///./src/design_components/mek_shield/subcomponents/mek_shield-weakness.vue","webpack:///./src/data_table_modules/universal/mek_partial-function-data-module.js","webpack:///./src/mixins/alerts_mixin.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","items","weakness_table","pkey","selected-keys","selected_keys","headers","weakness","monicker","cost","name","flow","show-headers","format","on","update-selected-data","select_weakness","staticRenderFns","weakness_data_table","only_exclusive","filter","_el","data_table_keys","default_data","all_exclusive","weakness_validate","partial_validate","has_weakness","partial_has_feature","get_weakness","partial_get_feature","is_exclusive_weakness","_exclusive_target","_pkey","_pkey_value","exclusive_target_array","toLowerCase","some","_val","cleaned_weakness","_weakness_array","hasExclusiveOnly","hasExclusiveAll","update","key_list","alerts","undefined","push","error","cleaned_array","temp_selected_weakness_array","reduceRight","_cleaned_array","isAll","length","stringify_default","clean_weakness","isOnly","includes","reverse","JSON","parse","mek_shield_weaknessvue_type_script_lang_js_","props","mixins","alerts_mixin","components","mek-sub-component-table","__webpack_require__","e","then","bind","data","obj","suppressAlerts","selected_weakness_array","methods","_selected_weakness","_this","new_selected_weakness_array","toggleWeakness","cleaned_data","mek_shield_weakness_data_module_cleaned_weakness","forEach","_alert","addAlert","publishAlerts","$set","$emit","_weakness","_this2","weakness_array","remove_weakness","computed","_this3","weaknessArray","subcomponents_mek_shield_weaknessvue_type_script_lang_js_","component","Object","componentNormalizer","__webpack_exports__","_data_table","_validation_keys","_data","F_DEV_Projects_Mekton_Mek_Generator_node_modules_babel_runtime_corejs2_core_js_array_is_array__WEBPACK_IMPORTED_MODULE_1___default","valid","_keys","_key","_has_feature","found_feature","_table_val","partial_cleaned_feature","_validator","_get_feature","_default_data","_name","_feature","json_data","F_DEV_Projects_Mekton_Mek_Generator_node_modules_babel_runtime_corejs2_core_js_json_stringify__WEBPACK_IMPORTED_MODULE_0___default","_alert_string","$store","commit"],"mappings":"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","file":"js/mek-shield-weakness-legacy.90cd7729.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('mek-sub-component-table',{attrs:{\"items\":_vm.weakness_table,\"pkey\":_vm.pkey,\"selected-keys\":_vm.selected_keys,\"headers\":{weakness:'Weakness',monicker:'Monicker',cost:'Cost'},\"name\":\"Weakness\",\"flow\":\"pkey-col\",\"show-headers\":true,\"format\":{cost:'multiplier'}},on:{\"update-selected-data\":_vm.select_weakness}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","//data table module, raw data output for re-use in non-vue-component formats\r\nimport {partial_validate, partial_has_feature, partial_get_feature} from \"../universal/mek_partial-function-data-module\";\r\n\r\n//create new weakness_data_table\r\nlet weakness_data_table=\r\n[\r\n    {weakness:\"All\",monicker:\"Shield\",cost:1.0},\r\n    {weakness:\"Ablative\",monicker:\"Screen\",cost:1.0},\r\n    {weakness:\"Energy Only\",monicker:\"Interference\",cost:0.75,only_exclusive:true},\r\n    {weakness:\"Matter Only\",monicker:\"Kinetic\",cost:0.75,only_exclusive:true},\r\n    {weakness:\"Ranged Only\",monicker:\"Swashbuckling\",cost:0.75,only_exclusive:true},\r\n    {weakness:\"Enclosing\",monicker:\"Mirror\",cost:0.5},\r\n    {weakness:\"Surge\",monicker:\"Surge\",cost:2.5}\r\n];\r\nlet only_exclusive=weakness_data_table.filter((_el)=>{return typeof _el.only_exclusive!==\"undefined\";});\r\nlet data_table_keys=[\"weakness\",\"monicker\",\"only_exclusive\",\"cost\"];\r\nlet default_data={weakness:\"All\",monicker:\"Shield\",cost:1.0};\r\nlet all_exclusive=[default_data];\r\n\r\n//data validator for damage_data_table\r\n//call partial_validate with appropriate data for full validate\r\nlet weakness_validate=partial_validate(weakness_data_table, data_table_keys);\r\n\r\n//completed function for checking if data has data\r\nlet has_weakness=partial_has_feature(weakness_data_table);\r\n\r\n//completed function for returning matching data\r\nlet get_weakness=partial_get_feature(weakness_data_table, has_weakness);\r\n\r\nlet is_exclusive_weakness=function(_exclusive_target, _pkey, _pkey_value)\r\n{\r\n    let exclusive_target_array=null;\r\n    switch(_exclusive_target.toLowerCase())\r\n    {\r\n        case \"only_exclusive\":\r\n            exclusive_target_array=only_exclusive;\r\n            break;\r\n        case \"all_exclusive\":\r\n            exclusive_target_array=all_exclusive;\r\n            break;\r\n    }\r\n    if(exclusive_target_array===null)\r\n    {\r\n        return false;\r\n    }\r\n    return exclusive_target_array.some((_val)=>\r\n    {\r\n        return _val[_pkey]==_pkey_value;\r\n    });\r\n};\r\n\r\nlet cleaned_weakness=function(_weakness_array, _pkey)\r\n{//takes weakness_array, returns cleaned array removing multiple exclusive values\r\n    let hasExclusiveOnly=false;\r\n    let hasExclusiveAll=false;\r\n    let update=false;\r\n    let key_list=[];\r\n    let alerts=[];\r\n\r\n    if(_weakness_array===undefined || _pkey===undefined)\r\n    {\r\n        alerts.push(\"Mek_Shield-Weakness: \");\r\n        let error=_weakness_array===undefined\r\n            ? \"**** Missing weakness array. Returning blank. ****\"\r\n            : \"**** No primary key provided. Returning blank. ****\";\r\n        alerts.push(error);\r\n        return {cleaned_array:[default_data],update:true,key_list:[\"All\"],alerts:alerts};\r\n    }\r\n\r\n    let temp_selected_weakness_array=_weakness_array.reduceRight((_cleaned_array, _val)=>\r\n    {\r\n        if(hasExclusiveAll)\r\n        {//found exclusive all weakness, return just that\r\n            key_list=[\"All\"];\r\n            return [default_data];\r\n        }\r\n        let isAll=is_exclusive_weakness(\"all_exclusive\",_pkey,_val[_pkey]);\r\n        if(isAll && _cleaned_array.length==0)\r\n        {//last item added was All, return that and essential end\r\n            hasExclusiveAll=true;\r\n            key_list=[\"All\"];\r\n            return [default_data];\r\n        }\r\n        else if(isAll)\r\n        {//otherwise, not last item, ignore All weakness\r\n            return _cleaned_array;\r\n        }\r\n        if(_val[_pkey]===undefined)\r\n        {//if weakness with pkey doesn't exist in data table, ignore\r\n            alerts.push(\"Mek_Shield-Weakness: \"+JSON.stringify(_val));\r\n            alerts.push(\"**** Missing primary key. Ignoring. ****\");\r\n            return _cleaned_array;\r\n        }\r\n        let clean_weakness=_val;\r\n        if(!weakness_validate(_val))\r\n        {//invalid data\r\n            alerts.push(\"Mek_Shield-Weakness: \"+JSON.stringify(_val))\r\n            alerts.push(\"**** Invalid data, attempting to reset. ****\")\r\n            clean_weakness=get_weakness(_pkey,_val[_pkey]);\r\n            update=true;\r\n            //attempt to set to corrected weakness\r\n        }\r\n        if(clean_weakness===null)\r\n        {//no matching weakness\r\n            alerts.push(\"**** Unable to reset. No matching data. ****\")\r\n            update=true;\r\n            return _cleaned_array;\r\n            //ignore element\r\n        }\r\n\r\n        let isOnly=is_exclusive_weakness(\"only_exclusive\",_pkey,_val[_pkey]);\r\n\r\n        if(isOnly && !hasExclusiveOnly)\r\n        {\r\n            _cleaned_array.push(_val);\r\n            hasExclusiveOnly=true;\r\n            key_list.push(_val[_pkey]);\r\n            return _cleaned_array;\r\n        }\r\n        else if(isOnly && hasExclusiveOnly)\r\n        {\r\n            alerts.push(\"Mek_Shield-Weakness: \"+_val);\r\n            alerts.push(\"**** Duplicate exclusive Shield data. Ignoring. ****\");\r\n            update=true;\r\n            return _cleaned_array;\r\n        }\r\n\r\n        if(!key_list.includes(_val[_pkey]))\r\n        {\r\n            _cleaned_array.push(_val);\r\n            key_list.push(_val[_pkey]);\r\n        }\r\n        return _cleaned_array;\r\n    },[]);\r\n    temp_selected_weakness_array.reverse();\r\n    if(temp_selected_weakness_array.length==0)\r\n    {//empty, reset to default\r\n        temp_selected_weakness_array=[JSON.parse(JSON.stringify(default_data))];\r\n        update=true;\r\n        key_list=[\"All\"];\r\n        alerts.push(\"Mek_Shield-Weakness: \");\r\n        alerts.push(\"**** Reseting to default ****\");\r\n    }\r\n    return {cleaned_array:temp_selected_weakness_array,update:update,key_list:key_list,alerts:alerts};\r\n    //returns an object with the pruned weakness array, whether it was updated, and the key_list\r\n}\r\n\r\nexport {weakness_data_table, weakness_validate, has_weakness, get_weakness, cleaned_weakness};\r\n","<template>\r\n    <mek-sub-component-table\r\n        :items=\"weakness_table\" :pkey=\"pkey\" :selected-keys=\"selected_keys\"\r\n        :headers=\"{weakness:'Weakness',monicker:'Monicker',cost:'Cost'}\"\r\n        name=\"Weakness\" flow=\"pkey-col\" :show-headers=\"true\"\r\n        :format=\"{cost:'multiplier'}\"\r\n        @update-selected-data=\"select_weakness\"\r\n    ></mek-sub-component-table>\r\n</template>\r\n<script>\r\nimport alerts_mixin from \"../../../mixins/alerts_mixin\";\r\n\r\nimport {weakness_data_table, cleaned_weakness}\r\n    from \"../../../data_table_modules/mek_shield/mek_shield-weakness-data-module\";\r\n\r\nexport default \r\n{\r\n    name:\"mek_shield_weakness\",\r\n    props:[\"weaknessArray\"],\r\n    mixins:[alerts_mixin],\r\n    components:\r\n    {\r\n        \"mek-sub-component-table\":()=>import(\"../../universal/mek_sub-component-table.vue\")\r\n    },\r\n    data:function()\r\n    {\r\n        let obj={};\r\n        obj.alerts=[];\r\n        obj.pkey=\"weakness\";\r\n        obj.suppressAlerts=false;\r\n        obj.selected_weakness_array=[{weakness:\"All\",monicker:\"Shield\",cost:1.0}];\r\n        return obj;\r\n    },\r\n    methods:\r\n    {\r\n        select_weakness:function(_selected_weakness)\r\n        {\r\n            this.suppressAlerts=true;//suppress alerts, for exclusive switching\r\n            let new_selected_weakness_array=this.toggleWeakness(this.selected_weakness_array,_selected_weakness);\r\n            let cleaned_data=cleaned_weakness(new_selected_weakness_array, this.pkey);\r\n            new_selected_weakness_array=cleaned_data.cleaned_array;\r\n            if(cleaned_data.alerts.length>0 && !this.suppressAlerts)\r\n            {\r\n                cleaned_data.alerts.forEach((_alert)=>\r\n                {\r\n                    this.addAlert(_alert);\r\n                });\r\n                this.publishAlerts();\r\n            }\r\n            this.$set(this,\"selected_weakness_array\",new_selected_weakness_array);\r\n            this.$emit(\"update-weakness\",new_selected_weakness_array);\r\n            this.suppressAlerts=false;\r\n        },\r\n        toggleWeakness(_weakness_array,_weakness)\r\n        {\r\n            let weakness_array=JSON.parse(JSON.stringify(_weakness_array));\r\n            \r\n            let remove_weakness=weakness_array.some((_val)=>\r\n            {//if _weakness matches already existing weakness, flag for deletion\r\n                return _val[this.pkey]==_weakness[this.pkey];\r\n            },this);\r\n\r\n            if(remove_weakness)\r\n            {//if flagged for removal, filter out\r\n                return weakness_array.filter((_val)=>\r\n                {\r\n                    return _val[this.pkey]!=_weakness[this.pkey];\r\n                },this);\r\n            }\r\n            weakness_array.push(_weakness);\r\n            //otherwise add weakness and return\r\n            return weakness_array;\r\n        }\r\n    },\r\n    computed:\r\n    {\r\n        weakness_table()\r\n        {\r\n            return weakness_data_table;\r\n        },\r\n        selected_keys()\r\n        {\r\n            let cleaned_data=cleaned_weakness(this.weaknessArray,this.pkey);\r\n            if(cleaned_data.alerts.length>0 && !this.suppressAlerts)\r\n            {\r\n                cleaned_data.alerts.forEach((_alert)=>\r\n                {\r\n                    this.addAlert(_alert);\r\n                });\r\n                this.publishAlerts();\r\n            }\r\n            if(cleaned_data.update)\r\n            {\r\n                this.$emit(\"alert-generated\",true);\r\n                this.$emit(\"update-weakness\",cleaned_data.cleaned_array);\r\n            }\r\n            this.$set(this,\"selected_weakness_array\",cleaned_data.cleaned_array);\r\n            return cleaned_data.key_list;\r\n        }\r\n    }\r\n}\r\n</script>","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./mek_shield-weakness.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./mek_shield-weakness.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./mek_shield-weakness.vue?vue&type=template&id=0e8fd9ea&\"\nimport script from \"./mek_shield-weakness.vue?vue&type=script&lang=js&\"\nexport * from \"./mek_shield-weakness.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","//data table module, raw data output for re-use in non-vue-component formats\r\n\r\n//ATTEMPT: make validators and has_feat and get_feat and cleaned_feat functions \r\n//          neutral and reusable across all data modules\r\n\r\n//partial data validator\r\n//called with data_table and validation_keys in data-module\r\nlet partial_validate=(_data_table,_validation_keys)=>(_data)=>\r\n{//_data_table: Array, array of data to validate against\r\n    //_validation_keys: Array, keys to be compared between passed in data and data_table\r\n    //_data: Object, data to be compared to data table \r\n    if(typeof _data===\"undefined\" || !Array.isArray(_validation_keys) || _validation_keys.length==0)\r\n    {\r\n        return false;\r\n    }\r\n    let valid=_data_table.some((_val)=>\r\n    {\r\n        return !_validation_keys.some((_keys)=>\r\n        {//returns true on invalid data, Not the return to return True if matching valid value is found\r\n            return _data[_keys]!=_val[_keys];\r\n        });\r\n    });\r\n    return valid;\r\n}\r\n\r\n//partial_has_feature, determine if provided data table has matching element with provided key and val\r\n//called in data module to generate full function with local data\r\nlet partial_has_feature=(_data_table)=>(_key, _val)=>\r\n{\r\n    return _data_table.some((_data)=>\r\n    {\r\n        return _data[_key]!==undefined && _data[_key]==_val;\r\n    });\r\n};\r\n\r\n//partial get_feature, returns full function for data module\r\n//requires data_table (array) and module's has_feature function\r\n//returns full matching element in provided data table\r\n//has_feature must exist in data table module\r\nlet partial_get_feature=(_data_table, _has_feature)=>(_key, _val)=>\r\n{\r\n    let found_feature=null;\r\n    if(_has_feature(_key,_val))\r\n    {\r\n        _data_table.some((_table_val)=>\r\n        {\r\n            if(_table_val[_key]==_val)\r\n            {\r\n                found_feature=_table_val;\r\n                return true;\r\n            }\r\n        },this);\r\n    }\r\n    return found_feature;\r\n}\r\n\r\nlet partial_cleaned_feature=(_validator, _has_feature, _get_feature, _default_data, _name)=>(_pkey, _feature)=>\r\n{//input: primary key, selected feature, filtered data table\r\n    let data=undefined;\r\n    let key_list=[];\r\n    let update=false;\r\n    let alerts=[];\r\n    let json_data=JSON.stringify(_feature);\r\n\r\n    if(_feature===undefined || !_has_feature(_pkey,_feature[_pkey]))\r\n    {\r\n        data=_default_data;\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting to default. ****\");\r\n    }\r\n    else if(!_validator(_feature))\r\n    {\r\n        data=JSON.parse(JSON.stringify(_get_feature(_pkey,_feature[_pkey])));\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting. ****\");\r\n    }\r\n    else\r\n    {\r\n        data=JSON.parse(JSON.stringify(_feature));\r\n        key_list=[data[_pkey]];\r\n        update=false;\r\n    }\r\n    return {data:data, key_list:key_list, update:update, alerts:alerts};\r\n}\r\n\r\nexport {partial_validate, partial_has_feature, partial_get_feature, partial_cleaned_feature};\r\n","export default\r\n{\r\n    methods:\r\n    {\r\n        addAlert(_alert_string)\r\n        {\r\n            this.alerts.push(_alert_string);\r\n        },\r\n        publishAlerts()\r\n        {\r\n            if(this.alerts.length>0)\r\n            {   \r\n                this.$store.commit(\"alertMessage\",this.alerts);\r\n            }\r\n            this.$set(this,\"alerts\",[]);\r\n        },\r\n    }\r\n}"],"sourceRoot":""}