(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["mek_shield-weakness-data-module"],{"706d":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return partial_validate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return partial_has_feature; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return partial_get_feature; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return partial_cleaned_feature; });\nvar _this = undefined;\n\n//data table module, raw data output for re-use in non-vue-component formats\n//ATTEMPT: make validators and has_feat and get_feat and cleaned_feat functions \n//          neutral and reusable across all data modules\n//partial data validator\n//called with data_table and validation_keys in data-module\nvar partial_validate = function partial_validate(_data_table, _validation_keys) {\n  return function (_data) {\n    //_data_table: Array, array of data to validate against\n    //_validation_keys: Array, keys to be compared between passed in data and data_table\n    //_data: Object, data to be compared to data table \n    if (typeof _data === "undefined" || !Array.isArray(_validation_keys) || _validation_keys.length == 0) {\n      return false;\n    }\n\n    var valid = _data_table.some(function (_val) {\n      return _validation_keys.every(function (_keys) {\n        //return true if all validation_keys in _data match an element in _data_table\n        return _data[_keys] == _val[_keys];\n      });\n    });\n\n    return valid;\n  };\n}; //partial_has_feature, determine if provided data table has matching element with provided key and val\n//called in data module to generate full function with local data\n\n\nvar partial_has_feature = function partial_has_feature(_data_table) {\n  return function (_key, _val) {\n    return _data_table.some(function (_data) {\n      return _data[_key] !== undefined && _data[_key] == _val;\n    });\n  };\n}; //partial get_feature, returns full function for data module\n//requires data_table (array) and module\'s has_feature function\n//returns full matching element in provided data table\n//has_feature must exist in data table module\n\n\nvar partial_get_feature = function partial_get_feature(_data_table, _has_feature) {\n  return function (_key, _val) {\n    var found_feature = null;\n\n    if (_has_feature(_key, _val)) {\n      _data_table.some(function (_table_val) {\n        if (_table_val[_key] == _val) {\n          found_feature = _table_val;\n          return true;\n        }\n      }, _this);\n    }\n\n    return found_feature;\n  };\n};\n\nvar partial_cleaned_feature = function partial_cleaned_feature(_validator, _has_feature, _get_feature, _default_data, _name) {\n  return function (_pkey, _feature) {\n    //input: primary key, selected feature, filtered data table\n    var data = undefined;\n    var key_list = [];\n    var update = false;\n    var alerts = [];\n    var json_data = JSON.stringify(_feature);\n\n    if (_feature === undefined || !_has_feature(_pkey, _feature[_pkey])) {\n      data = _default_data;\n      key_list = [data[_pkey]];\n      update = true;\n      alerts.push(_name + ": " + json_data);\n      alerts.push("**** Invalid data. Reseting to default. ****");\n    } else if (!_validator(_feature)) {\n      data = JSON.parse(JSON.stringify(_get_feature(_pkey, _feature[_pkey])));\n      key_list = [data[_pkey]];\n      update = true;\n      alerts.push(_name + ": " + json_data);\n      alerts.push("**** Invalid data. Reseting. ****");\n    } else {\n      data = JSON.parse(JSON.stringify(_feature));\n      key_list = [data[_pkey]];\n      update = false;\n    }\n\n    return {\n      data: data,\n      key_list: key_list,\n      update: update,\n      alerts: alerts\n    };\n  };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///706d\n')},cf03:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "weakness_data_table", function() { return weakness_data_table; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "weakness_validate", function() { return weakness_validate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "has_weakness", function() { return has_weakness; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "get_weakness", function() { return get_weakness; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cleaned_weakness", function() { return cleaned_weakness; });\n/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("6762");\n/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("2fdb");\n/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _data_table_modules_universal_mek_partial_function_data_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("706d");\n\n\n//data table module, raw data output for re-use in non-vue-component formats\n //create new weakness_data_table\n\nvar weakness_data_table = [{\n  weakness: "All",\n  monicker: "Shield",\n  cost: 1.0\n}, {\n  weakness: "Ablative",\n  monicker: "Screen",\n  cost: 1.0\n}, {\n  weakness: "Energy Only",\n  monicker: "Interference",\n  cost: 0.75,\n  only_exclusive: true\n}, {\n  weakness: "Matter Only",\n  monicker: "Kinetic",\n  cost: 0.75,\n  only_exclusive: true\n}, {\n  weakness: "Ranged Only",\n  monicker: "Swashbuckling",\n  cost: 0.75,\n  only_exclusive: true\n}, {\n  weakness: "Enclosing",\n  monicker: "Mirror",\n  cost: 0.5\n}, {\n  weakness: "Surge",\n  monicker: "Surge",\n  cost: 2.5\n}];\nvar only_exclusive = weakness_data_table.filter(function (_el) {\n  return typeof _el.only_exclusive !== "undefined";\n});\nvar data_table_keys = ["weakness", "monicker", "only_exclusive", "cost"];\nvar default_data = {\n  weakness: "All",\n  monicker: "Shield",\n  cost: 1.0\n};\nvar all_exclusive = [default_data]; //data validator for damage_data_table\n//call partial_validate with appropriate data for full validate\n\nvar weakness_validate = Object(_data_table_modules_universal_mek_partial_function_data_module__WEBPACK_IMPORTED_MODULE_2__[/* partial_validate */ "d"])(weakness_data_table, data_table_keys); //completed function for checking if data has data\n\nvar has_weakness = Object(_data_table_modules_universal_mek_partial_function_data_module__WEBPACK_IMPORTED_MODULE_2__[/* partial_has_feature */ "c"])(weakness_data_table); //completed function for returning matching data\n\nvar get_weakness = Object(_data_table_modules_universal_mek_partial_function_data_module__WEBPACK_IMPORTED_MODULE_2__[/* partial_get_feature */ "b"])(weakness_data_table, has_weakness);\n\nvar is_exclusive_weakness = function is_exclusive_weakness(_exclusive_target, _pkey, _pkey_value) {\n  var exclusive_target_array = null;\n\n  switch (_exclusive_target.toLowerCase()) {\n    case "only_exclusive":\n      exclusive_target_array = only_exclusive;\n      break;\n\n    case "all_exclusive":\n      exclusive_target_array = all_exclusive;\n      break;\n  }\n\n  if (exclusive_target_array === null) {\n    return false;\n  }\n\n  return exclusive_target_array.some(function (_val) {\n    return _val[_pkey] == _pkey_value;\n  });\n};\n\nvar cleaned_weakness = function cleaned_weakness(_weakness_array, _pkey) {\n  //takes weakness_array, returns cleaned array removing multiple exclusive values\n  var hasExclusiveOnly = false;\n  var hasExclusiveAll = false;\n  var update = false;\n  var key_list = [];\n  var alerts = [];\n\n  if (_weakness_array === undefined || _pkey === undefined) {\n    alerts.push("Mek_Shield-Weakness: ");\n    var error = _weakness_array === undefined ? "**** Missing weakness array. Returning blank. ****" : "**** No primary key provided. Returning blank. ****";\n    alerts.push(error);\n    return {\n      cleaned_array: [default_data],\n      update: true,\n      key_list: ["All"],\n      alerts: alerts\n    };\n  }\n\n  var temp_selected_weakness_array = _weakness_array.reduceRight(function (_cleaned_array, _val) {\n    if (hasExclusiveAll) {\n      //found exclusive all weakness, return just that\n      key_list = ["All"];\n      return [default_data];\n    }\n\n    var isAll = is_exclusive_weakness("all_exclusive", _pkey, _val[_pkey]);\n\n    if (isAll && _cleaned_array.length == 0) {\n      //last item added was All, return that and essential end\n      hasExclusiveAll = true;\n      key_list = ["All"];\n      return [default_data];\n    } else if (isAll) {\n      //otherwise, not last item, ignore All weakness\n      return _cleaned_array;\n    }\n\n    if (_val[_pkey] === undefined) {\n      //if weakness with pkey doesn\'t exist in data table, ignore\n      alerts.push("Mek_Shield-Weakness: " + JSON.stringify(_val));\n      alerts.push("**** Missing primary key. Ignoring. ****");\n      return _cleaned_array;\n    }\n\n    var clean_weakness = _val;\n\n    if (!weakness_validate(_val)) {\n      //invalid data\n      alerts.push("Mek_Shield-Weakness: " + JSON.stringify(_val));\n      alerts.push("**** Invalid data, attempting to reset. ****");\n      clean_weakness = get_weakness(_pkey, _val[_pkey]);\n      _val = clean_weakness; //replace current value with correct value\n\n      update = true; //attempt to set to corrected weakness\n    }\n\n    if (clean_weakness === null) {\n      //no matching weakness\n      alerts.push("**** Unable to reset. No matching data. ****");\n      update = true;\n      return _cleaned_array; //ignore element\n    }\n\n    var isOnly = is_exclusive_weakness("only_exclusive", _pkey, _val[_pkey]);\n\n    if (isOnly && !hasExclusiveOnly) {\n      _cleaned_array.push(_val);\n\n      hasExclusiveOnly = true;\n      key_list.push(_val[_pkey]);\n      return _cleaned_array;\n    } else if (isOnly && hasExclusiveOnly) {\n      alerts.push("Mek_Shield-Weakness: " + _val);\n      alerts.push("**** Duplicate exclusive Shield data. Ignoring. ****");\n      update = true;\n      return _cleaned_array;\n    }\n\n    if (!key_list.includes(_val[_pkey])) {\n      _cleaned_array.push(_val);\n\n      key_list.push(_val[_pkey]);\n    }\n\n    return _cleaned_array;\n  }, []);\n\n  temp_selected_weakness_array.reverse();\n\n  if (temp_selected_weakness_array.length == 0) {\n    //empty, reset to default\n    temp_selected_weakness_array = [JSON.parse(JSON.stringify(default_data))];\n    update = true;\n    key_list = ["All"];\n    alerts.push("Mek_Shield-Weakness: ");\n    alerts.push("**** Reseting to default ****");\n  }\n\n  return {\n    cleaned_array: temp_selected_weakness_array,\n    update: update,\n    key_list: key_list,\n    alerts: alerts\n  }; //returns an object with the pruned weakness array, whether it was updated, and the key_list\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZGF0YV90YWJsZV9tb2R1bGVzL21la19zaGllbGQvbWVrX3NoaWVsZC13ZWFrbmVzcy1kYXRhLW1vZHVsZS5qcz9jZjAzIl0sIm5hbWVzIjpbIndlYWtuZXNzX2RhdGFfdGFibGUiLCJ3ZWFrbmVzcyIsIm1vbmlja2VyIiwiY29zdCIsIm9ubHlfZXhjbHVzaXZlIiwiZmlsdGVyIiwiX2VsIiwiZGF0YV90YWJsZV9rZXlzIiwiZGVmYXVsdF9kYXRhIiwiYWxsX2V4Y2x1c2l2ZSIsIndlYWtuZXNzX3ZhbGlkYXRlIiwicGFydGlhbF92YWxpZGF0ZSIsImhhc193ZWFrbmVzcyIsInBhcnRpYWxfaGFzX2ZlYXR1cmUiLCJnZXRfd2Vha25lc3MiLCJwYXJ0aWFsX2dldF9mZWF0dXJlIiwiaXNfZXhjbHVzaXZlX3dlYWtuZXNzIiwiX2V4Y2x1c2l2ZV90YXJnZXQiLCJfcGtleSIsIl9wa2V5X3ZhbHVlIiwiZXhjbHVzaXZlX3RhcmdldF9hcnJheSIsInRvTG93ZXJDYXNlIiwic29tZSIsIl92YWwiLCJjbGVhbmVkX3dlYWtuZXNzIiwiX3dlYWtuZXNzX2FycmF5IiwiaGFzRXhjbHVzaXZlT25seSIsImhhc0V4Y2x1c2l2ZUFsbCIsInVwZGF0ZSIsImtleV9saXN0IiwiYWxlcnRzIiwidW5kZWZpbmVkIiwicHVzaCIsImVycm9yIiwiY2xlYW5lZF9hcnJheSIsInRlbXBfc2VsZWN0ZWRfd2Vha25lc3NfYXJyYXkiLCJyZWR1Y2VSaWdodCIsIl9jbGVhbmVkX2FycmF5IiwiaXNBbGwiLCJsZW5ndGgiLCJKU09OIiwic3RyaW5naWZ5IiwiY2xlYW5fd2Vha25lc3MiLCJpc09ubHkiLCJpbmNsdWRlcyIsInJldmVyc2UiLCJwYXJzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0NBSUE7O0FBQ0EsSUFBSUEsbUJBQW1CLEdBQ3ZCLENBQ0k7QUFBQ0MsVUFBUSxFQUFDLEtBQVY7QUFBZ0JDLFVBQVEsRUFBQyxRQUF6QjtBQUFr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LENBQXRCLENBQUosRUFDQTtBQUNJbUIsb0JBQWMsQ0FBQ0wsSUFBZixDQUFvQlQsSUFBcEI7O0FBQ0FNLGNBQVEsQ0FBQ0csSUFBVCxDQUFjVCxJQUFJLENBQUNMLEtBQUQsQ0FBbEI7QUFDSDs7QUFDRCxXQUFPbUIsY0FBUDtBQUNILEdBakVnQyxFQWlFL0IsRUFqRStCLENBQWpDOztBQWtFQUYsOEJBQTRCLENBQUNVLE9BQTdCOztBQUNBLE1BQUdWLDRCQUE0QixDQUFDSSxNQUE3QixJQUFxQyxDQUF4QyxFQUNBO0FBQUM7QUFDR0osZ0NBQTRCLEdBQUMsQ0FBQ0ssSUFBSSxDQUFDTSxLQUFMLENBQVdOLElBQUksQ0FBQ0MsU0FBTCxDQUFlakMsWUFBZixDQUFYLENBQUQsQ0FBN0I7QUFDQW9CLFVBQU0sR0FBQyxJQUFQO0FBQ0FDLFlBQVEsR0FBQyxDQUFDLEtBQUQsQ0FBVDtBQUNBQyxVQUFNLENBQUNFLElBQVAsQ0FBWSx1QkFBWjtBQUNBRixVQUFNLENBQUNFLElBQVAsQ0FBWSwrQkFBWjtBQUNIOztBQUNELFNBQU87QUFBQ0UsaUJBQWEsRUFBQ0MsNEJBQWY7QUFBNENQLFVBQU0sRUFBQ0EsTUFBbkQ7QUFBMERDLFlBQVEsRUFBQ0EsUUFBbkU7QUFBNEVDLFVBQU0sRUFBQ0E7QUFBbkYsR0FBUCxDQTVGSixDQTZGSTtBQUNILENBL0ZEIiwiZmlsZSI6ImNmMDMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvL2RhdGEgdGFibGUgbW9kdWxlLCByYXcgZGF0YSBvdXRwdXQgZm9yIHJlLXVzZSBpbiBub24tdnVlLWNvbXBvbmVudCBmb3JtYXRzXHJcbmltcG9ydCB7cGFydGlhbF92YWxpZGF0ZSwgcGFydGlhbF9oYXNfZmVhdHVyZSwgcGFydGlhbF9nZXRfZmVhdHVyZX0gXHJcbiAgICBmcm9tIFwiQC9kYXRhX3RhYmxlX21vZHVsZXMvdW5pdmVyc2FsL21la19wYXJ0aWFsLWZ1bmN0aW9uLWRhdGEtbW9kdWxlXCI7XHJcblxyXG4vL2NyZWF0ZSBuZXcgd2Vha25lc3NfZGF0YV90YWJsZVxyXG5sZXQgd2Vha25lc3NfZGF0YV90YWJsZT1cclxuW1xyXG4gICAge3dlYWtuZXNzOlwiQWxsXCIsbW9uaWNrZXI6XCJTaGllbGRcIixjb3N0OjEuMH0sXHJcbiAgICB7d2Vha25lc3M6XCJBYmxhdGl2ZVwiLG1vbmlja2VyOlwiU2NyZWVuXCIsY29zdDoxLjB9LFxyXG4gICAge3dlYWtuZXNzOlwiRW5lcmd5IE9ubHlcIixtb25pY2tlcjpcIkludGVyZmVyZW5jZVwiLGNvc3Q6MC43NSxvbmx5X2V4Y2x1c2l2ZTp0cnVlfSxcclxuICAgIHt3ZWFrbmVzczpcIk1hdHRlciBPbmx5XCIsbW9uaWNrZXI6XCJLaW5ldGljXCIsY29zdDowLjc1LG9ubHlfZXhjbHVzaXZlOnRydWV9LFxyXG4gICAge3dlYWtuZXNzOlwiUmFuZ2VkIE9ubHlcIixtb25pY2tlcjpcIlN3YXNoYnVja2xpbmdcIixjb3N0OjAuNzUsb25seV9leGNsdXNpdmU6dHJ1ZX0sXHJcbiAgICB7d2Vha25lc3M6XCJFbmNsb3NpbmdcIixtb25pY2tlcjpcIk1pcnJvclwiLGNvc3Q6MC41fSxcclxuICAgIHt3ZWFrbmVzczpcIlN1cmdlXCIsbW9uaWNrZXI6XCJTdXJnZVwiLGNvc3Q6Mi41fVxyXG5dO1xyXG5sZXQgb25seV9leGNsdXNpdmU9d2Vha25lc3NfZGF0YV90YWJsZS5maWx0ZXIoKF9lbCk9PntyZXR1cm4gdHlwZW9mIF9lbC5vbmx5X2V4Y2x1c2l2ZSE9PVwidW5kZWZpbmVkXCI7fSk7XHJcbmxldCBkYXRhX3RhYmxlX2tleXM9W1wid2Vha25lc3NcIixcIm1vbmlja2VyXCIsXCJvbmx5X2V4Y2x1c2l2ZVwiLFwiY29zdFwiXTtcclxubGV0IGRlZmF1bHRfZGF0YT17d2Vha25lc3M6XCJBbGxcIixtb25pY2tlcjpcIlNoaWVsZFwiLGNvc3Q6MS4wfTtcclxubGV0IGFsbF9leGNsdXNpdmU9W2RlZmF1bHRfZGF0YV07XHJcblxyXG4vL2RhdGEgdmFsaWRhdG9yIGZvciBkYW1hZ2VfZGF0YV90YWJsZVxyXG4vL2NhbGwgcGFydGlhbF92YWxpZGF0ZSB3aXRoIGFwcHJvcHJpYXRlIGRhdGEgZm9yIGZ1bGwgdmFsaWRhdGVcclxubGV0IHdlYWtuZXNzX3ZhbGlkYXRlPXBhcnRpYWxfdmFsaWRhdGUod2Vha25lc3NfZGF0YV90YWJsZSwgZGF0YV90YWJsZV9rZXlzKTtcclxuXHJcbi8vY29tcGxldGVkIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBkYXRhIGhhcyBkYXRhXHJcbmxldCBoYXNfd2Vha25lc3M9cGFydGlhbF9oYXNfZmVhdHVyZSh3ZWFrbmVzc19kYXRhX3RhYmxlKTtcclxuXHJcbi8vY29tcGxldGVkIGZ1bmN0aW9uIGZvciByZXR1cm5pbmcgbWF0Y2hpbmcgZGF0YVxyXG5sZXQgZ2V0X3dlYWtuZXNzPXBhcnRpYWxfZ2V0X2ZlYXR1cmUod2Vha25lc3NfZGF0YV90YWJsZSwgaGFzX3dlYWtuZXNzKTtcclxuXHJcbmxldCBpc19leGNsdXNpdmVfd2Vha25lc3M9ZnVuY3Rpb24oX2V4Y2x1c2l2ZV90YXJnZXQsIF9wa2V5LCBfcGtleV92YWx1ZSlcclxue1xyXG4gICAgbGV0IGV4Y2x1c2l2ZV90YXJnZXRfYXJyYXk9bnVsbDtcclxuICAgIHN3aXRjaChfZXhjbHVzaXZlX3RhcmdldC50b0xvd2VyQ2FzZSgpKVxyXG4gICAge1xyXG4gICAgICAgIGNhc2UgXCJvbmx5X2V4Y2x1c2l2ZVwiOlxyXG4gICAgICAgICAgICBleGNsdXNpdmVfdGFyZ2V0X2FycmF5PW9ubHlfZXhjbHVzaXZlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwiYWxsX2V4Y2x1c2l2ZVwiOlxyXG4gICAgICAgICAgICBleGNsdXNpdmVfdGFyZ2V0X2FycmF5PWFsbF9leGNsdXNpdmU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgaWYoZXhjbHVzaXZlX3RhcmdldF9hcnJheT09PW51bGwpXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGV4Y2x1c2l2ZV90YXJnZXRfYXJyYXkuc29tZSgoX3ZhbCk9PlxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBfdmFsW19wa2V5XT09X3BrZXlfdmFsdWU7XHJcbiAgICB9KTtcclxufTtcclxuXHJcbmxldCBjbGVhbmVkX3dlYWtuZXNzPWZ1bmN0aW9uKF93ZWFrbmVzc19hcnJheSwgX3BrZXkpXHJcbnsvL3Rha2VzIHdlYWtuZXNzX2FycmF5LCByZXR1cm5zIGNsZWFuZWQgYXJyYXkgcmVtb3ZpbmcgbXVsdGlwbGUgZXhjbHVzaXZlIHZhbHVlc1xyXG4gICAgbGV0IGhhc0V4Y2x1c2l2ZU9ubHk9ZmFsc2U7XHJcbiAgICBsZXQgaGFzRXhjbHVzaXZlQWxsPWZhbHNlO1xyXG4gICAgbGV0IHVwZGF0ZT1mYWxzZTtcclxuICAgIGxldCBrZXlfbGlzdD1bXTtcclxuICAgIGxldCBhbGVydHM9W107XHJcblxyXG4gICAgaWYoX3dlYWtuZXNzX2FycmF5PT09dW5kZWZpbmVkIHx8IF9wa2V5PT09dW5kZWZpbmVkKVxyXG4gICAge1xyXG4gICAgICAgIGFsZXJ0cy5wdXNoKFwiTWVrX1NoaWVsZC1XZWFrbmVzczogXCIpO1xyXG4gICAgICAgIGxldCBlcnJvcj1fd2Vha25lc3NfYXJyYXk9PT11bmRlZmluZWRcclxuICAgICAgICAgICAgPyBcIioqKiogTWlzc2luZyB3ZWFrbmVzcyBhcnJheS4gUmV0dXJuaW5nIGJsYW5rLiAqKioqXCJcclxuICAgICAgICAgICAgOiBcIioqKiogTm8gcHJpbWFyeSBrZXkgcHJvdmlkZWQuIFJldHVybmluZyBibGFuay4gKioqKlwiO1xyXG4gICAgICAgIGFsZXJ0cy5wdXNoKGVycm9yKTtcclxuICAgICAgICByZXR1cm4ge2NsZWFuZWRfYXJyYXk6W2RlZmF1bHRfZGF0YV0sdXBkYXRlOnRydWUsa2V5X2xpc3Q6W1wiQWxsXCJdLGFsZXJ0czphbGVydHN9O1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB0ZW1wX3NlbGVjdGVkX3dlYWtuZXNzX2FycmF5PV93ZWFrbmVzc19hcnJheS5yZWR1Y2VSaWdodCgoX2NsZWFuZWRfYXJyYXksIF92YWwpPT5cclxuICAgIHtcclxuICAgICAgICBpZihoYXNFeGNsdXNpdmVBbGwpXHJcbiAgICAgICAgey8vZm91bmQgZXhjbHVzaXZlIGFsbCB3ZWFrbmVzcywgcmV0dXJuIGp1c3QgdGhhdFxyXG4gICAgICAgICAgICBrZXlfbGlzdD1bXCJBbGxcIl07XHJcbiAgICAgICAgICAgIHJldHVybiBbZGVmYXVsdF9kYXRhXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGlzQWxsPWlzX2V4Y2x1c2l2ZV93ZWFrbmVzcyhcImFsbF9leGNsdXNpdmVcIixfcGtleSxfdmFsW19wa2V5XSk7XHJcbiAgICAgICAgaWYoaXNBbGwgJiYgX2NsZWFuZWRfYXJyYXkubGVuZ3RoPT0wKVxyXG4gICAgICAgIHsvL2xhc3QgaXRlbSBhZGRlZCB3YXMgQWxsLCByZXR1cm4gdGhhdCBhbmQgZXNzZW50aWFsIGVuZFxyXG4gICAgICAgICAgICBoYXNFeGNsdXNpdmVBbGw9dHJ1ZTtcclxuICAgICAgICAgICAga2V5X2xpc3Q9W1wiQWxsXCJdO1xyXG4gICAgICAgICAgICByZXR1cm4gW2RlZmF1bHRfZGF0YV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoaXNBbGwpXHJcbiAgICAgICAgey8vb3RoZXJ3aXNlLCBub3QgbGFzdCBpdGVtLCBpZ25vcmUgQWxsIHdlYWtuZXNzXHJcbiAgICAgICAgICAgIHJldHVybiBfY2xlYW5lZF9hcnJheTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoX3ZhbFtfcGtleV09PT11bmRlZmluZWQpXHJcbiAgICAgICAgey8vaWYgd2Vha25lc3Mgd2l0aCBwa2V5IGRvZXNuJ3QgZXhpc3QgaW4gZGF0YSB0YWJsZSwgaWdub3JlXHJcbiAgICAgICAgICAgIGFsZXJ0cy5wdXNoKFwiTWVrX1NoaWVsZC1XZWFrbmVzczogXCIrSlNPTi5zdHJpbmdpZnkoX3ZhbCkpO1xyXG4gICAgICAgICAgICBhbGVydHMucHVzaChcIioqKiogTWlzc2luZyBwcmltYXJ5IGtleS4gSWdub3JpbmcuICoqKipcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBfY2xlYW5lZF9hcnJheTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGNsZWFuX3dlYWtuZXNzPV92YWw7XHJcbiAgICAgICAgaWYoIXdlYWtuZXNzX3ZhbGlkYXRlKF92YWwpKVxyXG4gICAgICAgIHsvL2ludmFsaWQgZGF0YVxyXG4gICAgICAgICAgICBhbGVydHMucHVzaChcIk1la19TaGllbGQtV2Vha25lc3M6IFwiK0pTT04uc3RyaW5naWZ5KF92YWwpKVxyXG4gICAgICAgICAgICBhbGVydHMucHVzaChcIioqKiogSW52YWxpZCBkYXRhLCBhdHRlbXB0aW5nIHRvIHJlc2V0LiAqKioqXCIpXHJcbiAgICAgICAgICAgIGNsZWFuX3dlYWtuZXNzPWdldF93ZWFrbmVzcyhfcGtleSxfdmFsW19wa2V5XSk7XHJcbiAgICAgICAgICAgIF92YWw9Y2xlYW5fd2Vha25lc3M7Ly9yZXBsYWNlIGN1cnJlbnQgdmFsdWUgd2l0aCBjb3JyZWN0IHZhbHVlXHJcbiAgICAgICAgICAgIHVwZGF0ZT10cnVlO1xyXG4gICAgICAgICAgICAvL2F0dGVtcHQgdG8gc2V0IHRvIGNvcnJlY3RlZCB3ZWFrbmVzc1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihjbGVhbl93ZWFrbmVzcz09PW51bGwpXHJcbiAgICAgICAgey8vbm8gbWF0Y2hpbmcgd2Vha25lc3NcclxuICAgICAgICAgICAgYWxlcnRzLnB1c2goXCIqKioqIFVuYWJsZSB0byByZXNldC4gTm8gbWF0Y2hpbmcgZGF0YS4gKioqKlwiKVxyXG4gICAgICAgICAgICB1cGRhdGU9dHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIF9jbGVhbmVkX2FycmF5O1xyXG4gICAgICAgICAgICAvL2lnbm9yZSBlbGVtZW50XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaXNPbmx5PWlzX2V4Y2x1c2l2ZV93ZWFrbmVzcyhcIm9ubHlfZXhjbHVzaXZlXCIsX3BrZXksX3ZhbFtfcGtleV0pO1xyXG5cclxuICAgICAgICBpZihpc09ubHkgJiYgIWhhc0V4Y2x1c2l2ZU9ubHkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBfY2xlYW5lZF9hcnJheS5wdXNoKF92YWwpO1xyXG4gICAgICAgICAgICBoYXNFeGNsdXNpdmVPbmx5PXRydWU7XHJcbiAgICAgICAgICAgIGtleV9saXN0LnB1c2goX3ZhbFtfcGtleV0pO1xyXG4gICAgICAgICAgICByZXR1cm4gX2NsZWFuZWRfYXJyYXk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoaXNPbmx5ICYmIGhhc0V4Y2x1c2l2ZU9ubHkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBhbGVydHMucHVzaChcIk1la19TaGllbGQtV2Vha25lc3M6IFwiK192YWwpO1xyXG4gICAgICAgICAgICBhbGVydHMucHVzaChcIioqKiogRHVwbGljYXRlIGV4Y2x1c2l2ZSBTaGllbGQgZGF0YS4gSWdub3JpbmcuICoqKipcIik7XHJcbiAgICAgICAgICAgIHVwZGF0ZT10cnVlO1xyXG4gICAgICAgICAgICByZXR1cm4gX2NsZWFuZWRfYXJyYXk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZigha2V5X2xpc3QuaW5jbHVkZXMoX3ZhbFtfcGtleV0pKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgX2NsZWFuZWRfYXJyYXkucHVzaChfdmFsKTtcclxuICAgICAgICAgICAga2V5X2xpc3QucHVzaChfdmFsW19wa2V5XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBfY2xlYW5lZF9hcnJheTtcclxuICAgIH0sW10pO1xyXG4gICAgdGVtcF9zZWxlY3RlZF93ZWFrbmVzc19hcnJheS5yZXZlcnNlKCk7XHJcbiAgICBpZih0ZW1wX3NlbGVjdGVkX3dlYWtuZXNzX2FycmF5Lmxlbmd0aD09MClcclxuICAgIHsvL2VtcHR5LCByZXNldCB0byBkZWZhdWx0XHJcbiAgICAgICAgdGVtcF9zZWxlY3RlZF93ZWFrbmVzc19hcnJheT1bSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkZWZhdWx0X2RhdGEpKV07XHJcbiAgICAgICAgdXBkYXRlPXRydWU7XHJcbiAgICAgICAga2V5X2xpc3Q9W1wiQWxsXCJdO1xyXG4gICAgICAgIGFsZXJ0cy5wdXNoKFwiTWVrX1NoaWVsZC1XZWFrbmVzczogXCIpO1xyXG4gICAgICAgIGFsZXJ0cy5wdXNoKFwiKioqKiBSZXNldGluZyB0byBkZWZhdWx0ICoqKipcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge2NsZWFuZWRfYXJyYXk6dGVtcF9zZWxlY3RlZF93ZWFrbmVzc19hcnJheSx1cGRhdGU6dXBkYXRlLGtleV9saXN0OmtleV9saXN0LGFsZXJ0czphbGVydHN9O1xyXG4gICAgLy9yZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSBwcnVuZWQgd2Vha25lc3MgYXJyYXksIHdoZXRoZXIgaXQgd2FzIHVwZGF0ZWQsIGFuZCB0aGUga2V5X2xpc3RcclxufVxyXG5cclxuZXhwb3J0IHt3ZWFrbmVzc19kYXRhX3RhYmxlLCB3ZWFrbmVzc192YWxpZGF0ZSwgaGFzX3dlYWtuZXNzLCBnZXRfd2Vha25lc3MsIGNsZWFuZWRfd2Vha25lc3N9O1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///cf03\n')}}]);