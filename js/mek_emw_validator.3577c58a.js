(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["mek_emw_validator"],{ffd5:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateComponent", function() { return validateComponent; });\n/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ac6a");\n/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0__);\n\nlet validators = {};\n__webpack_require__.e(/* import() | mek_emw-accuracy-data-module */ "mek_emw-accuracy-data-module").then(__webpack_require__.bind(null, "643f")).then(_module => {\n  validators.accuracy = _module.cleaned_feature;\n});\n__webpack_require__.e(/* import() | mek_emw-attack-factor-data-module */ "mek_emw-attack-factor-data-module").then(__webpack_require__.bind(null, "2170")).then(_module => {\n  validators.attack_factor = _module.cleaned_feature;\n});\n__webpack_require__.e(/* import() | mek_emw-damage-data-module */ "mek_emw-damage-data-module").then(__webpack_require__.bind(null, "77b7")).then(_module => {\n  validators.damage = _module.cleaned_feature;\n  validators.update_damage = _module.create_damage_data_table;\n});\n__webpack_require__.e(/* import() | mek_emw-feature-data-module */ "mek_emw-feature-data-module").then(__webpack_require__.bind(null, "e125")).then(_module => {\n  validators.filter_feature = _module.filter_data_table; //filter based on burst_value\n\n  validators.feature = _module.cleaned_feature;\n});\n__webpack_require__.e(/* import() | mek_emw-turns-in-use-data-module */ "mek_emw-turns-in-use-data-module").then(__webpack_require__.bind(null, "9e76")).then(_module => {\n  validators.turns_in_use = _module.cleaned_feature;\n});\n__webpack_require__.e(/* import() | mek_space-efficiency-data-module */ "mek_space-efficiency-data-module").then(__webpack_require__.bind(null, "16e1")).then(_module => {\n  validators.space_efficiency = _module.validate_efficiency;\n});\nlet loopValidators, updateMultipliers, round;\n__webpack_require__.e(/* import() | validator_functions */ "validator_functions").then(__webpack_require__.bind(null, "07de")).then(_module => {\n  loopValidators = _module.loopValidators;\n  updateMultipliers = _module.updateMultipliers;\n  round = _module.round;\n});\n\nvalidators.derived = (_component, _isVarBeamShield, _isBeamShield) => {\n  let cleanedComponent = _component;\n  let alerts = [];\n  let validatedData;\n  let updateList = ["selected_turns_in_use", "selected_accuracy", "selected_attack_factor", "feature_array"]; //update cost_multipliers for components needing update\n\n  validatedData = updateMultipliers(updateList, cleanedComponent, "Mek-EMW");\n  cleanedComponent.cost_multipliers = validatedData.data;\n  alerts = alerts.concat(validatedData.alerts); //update cost_multiplier\n\n  let cost_multiplier = Object.entries(cleanedComponent.cost_multipliers).reduce((_multi, _val) => {\n    //calc new cost_multiplier\n    return _multi * _val[1];\n  }, 1);\n  cost_multiplier = round(cost_multiplier, 2);\n\n  if (cleanedComponent.cost_multiplier != cost_multiplier) {\n    alerts.push("Mek-EMW: cost_multiplier");\n    alerts.push("**** Invalid Cost Multiplier. Correcting. ****");\n    cleanedComponent.cost_multiplier = round(cost_multiplier, 2);\n  }\n\n  let newDamageCapacity = round(cleanedComponent.selected_damage.cost / 4, 2);\n\n  if (cleanedComponent.damage_capacity != newDamageCapacity) {\n    alerts.push("Mek-EMW: damage_capacity");\n    alerts.push("**** Invalid Damage Capacity. Correcting. ****");\n    cleanedComponent.damage_capacity = newDamageCapacity;\n  }\n\n  let newWeight = round(newDamageCapacity / 2, 2);\n\n  if (cleanedComponent.weight != newWeight) {\n    alerts.push("Mek-EMW: weight");\n    alerts.push("**** Invalid Weight. Correcting. ****");\n    cleanedComponent.weight = newWeight;\n  }\n\n  let newCost = cleanedComponent.selected_damage.cost * cost_multiplier + cleanedComponent.efficiencies.space.cost;\n  newCost = round(newCost, 2);\n\n  if (cleanedComponent.cost != newCost) {\n    alerts.push("Mek-EMW: cost");\n    alerts.push("**** Invalid cost. Correcting. ****");\n    cleanedComponent.cost = newCost;\n  }\n\n  let newBeamShield = {\n    stopping_power: cleanedComponent.selected_damage.cost,\n    defense_accuracy: cleanedComponent.selected_accuracy.accuracy - 2,\n    damage: cleanedComponent.selected_damage.damage\n  };\n\n  if (cleanedComponent.beam_shield === undefined && _isBeamShield) {\n    alerts.push("Mek-EMW: beam_shield");\n    alerts.push("**** Beam Shield data missing. Correcting. ****");\n    cleanedComponent.beam_shield = newBeamShield;\n  }\n\n  if (cleanedComponent.beam_shield.stopping_power != newBeamShield.stopping_power) {\n    alerts.push("Mek-EMW: beam_shield.stopping_power");\n    alerts.push("**** Invalid Beam Shield Stopping Power: Correcting. ****");\n    cleanedComponent.beam_shield.stopping_power = newBeamShield.stopping_power;\n  }\n\n  if (cleanedComponent.beam_shield.defense_accuracy != newBeamShield.defense_accuracy) {\n    alerts.push("Mek-EMW: beam_shield.defense_accuracy");\n    alerts.push("**** Invalid Beam Shield Defense Accuracy: Correcting. ****");\n    cleanedComponent.beam_shield.defense_accuracy = newBeamShield.defense_accuracy;\n  }\n\n  if (cleanedComponent.beam_shield.damage != newBeamShield.damage) {\n    alerts.push("Mek-EMW: beam_shield.damage");\n    alerts.push("**** Invalid Beam Shield Damage: Correcting. ****");\n    cleanedComponent.beam_shield.damage = newBeamShield.damage;\n  }\n\n  return {\n    data: cleanedComponent,\n    alerts: alerts\n  };\n};\n\nlet validateComponent = _component => {\n  let cleanedComponent = _component;\n  let validatedData;\n  let loopAlerts;\n  let alerts = []; //validate turns in use as feature array is dependent\n\n  validatedData = validators.turns_in_use("turns", cleanedComponent.selected_turns_in_use);\n  cleanedComponent.selected_turns_in_use = validatedData.data;\n  alerts = alerts.concat(validatedData.alerts); //update feature table\n\n  validators.filter_feature(cleanedComponent.selected_turns_in_use.turns == "__INFINITY__"); //validate feature_array, as selected_damage is dependent\n\n  validatedData = validators.feature(cleanedComponent.feature_array, "feature");\n  cleanedComponent.feature_array = validatedData.cleaned_array;\n  alerts = alerts.concat(validatedData.alerts); //update isBeamShield and isVariableBeamShield\n\n  let isVariableBeamShield = false;\n  let isBeamShield = cleanedComponent.feature_array.some(_feat => {\n    if (/.*variable.*beam.*shield.*/gi.test(_feat.feature)) {\n      isVariableBeamShield = true;\n    }\n\n    return /.*beam.*shield.*/gi.test(_feat.feature);\n  }); //update damage validator\n\n  validators.update_damage(isBeamShield && !isVariableBeamShield); //loop thru other validations\n\n  let componentsToValidate = [{\n    validator: validators.damage,\n    pkey: "cost",\n    component_prop: "selected_damage"\n  }, {\n    validator: validators.accuracy,\n    pkey: "accuracy",\n    component_prop: \'selected_accuracy\'\n  }, {\n    validator: validators.attack_factor,\n    pkey: "attack_factor",\n    component_prop: \'selected_attack_factor\'\n  }];\n\n  var _loopValidators = loopValidators(componentsToValidate, cleanedComponent);\n\n  cleanedComponent = _loopValidators.cleanedComponent;\n  loopAlerts = _loopValidators.loopAlerts;\n  alerts = alerts.concat(loopAlerts); //call validators.derived() here\n\n  validatedData = validators.derived(cleanedComponent, isVariableBeamShield, isBeamShield);\n  cleanedComponent = validatedData.data;\n  alerts = alerts.concat(validatedData.alerts);\n  let total_cost = cleanedComponent.selected_damage.cost * cleanedComponent.cost_multiplier; //update space efficiency\n\n  validatedData = validators.space_efficiency(cleanedComponent.efficiencies.space, total_cost, "Mek-EMW");\n  alerts = alerts.concat(validatedData.alerts);\n  cleanedComponent.efficiencies.space = validatedData.data;\n  return {\n    data: cleanedComponent,\n    alerts: alerts\n  };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///ffd5\n')}}]);