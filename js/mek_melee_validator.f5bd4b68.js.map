{"version":3,"sources":["webpack:///./src/store/modules/validators/mek_melee_validator.js"],"names":["loopValidators","updateMultipliers","round","validators","__webpack_require__","e","then","bind","_module","accuracy","cleaned_feature","damage","feature","entangle","space_efficiency","validate_efficiency","derived","_component","validatedData","cleanedComponent","alerts","updateList","cost_multipliers","data","concat","cost_multiplier","Object","entries","reduce","_multi","_val","push","newDamageCapacity","selected_damage","damage_capacity","newWeight","weight","newCost","cost","efficiencies","space","isEntangle","feature_array","some","base_damage","range_mod","range_modifier","damage_mod","damage_modifier","cleanedEntangle","final_damage","undefined","validateComponent","loopAlerts","componentsToValidate","validator","pkey","component_prop","_loopValidators","base_cost"],"mappings":"wLAAA,IAgCIA,EAAgBC,EAAmBC,EAhCnCC,EAAW,GAEfC,EAAAC,EAAA,kCAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IAEHL,EAAWM,SAASD,EAAQE,kBAGhCN,EAAAC,EAAA,gCAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IAEHL,EAAWQ,OAAOH,EAAQE,kBAG9BN,EAAAC,EAAA,iCAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IAEHL,EAAWS,QAAQJ,EAAQE,kBAG/BN,EAAAC,EAAA,wCAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IAEHL,EAAWU,SAASL,EAAQE,kBAGhCN,EAAAC,EAAA,oCAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IAEHL,EAAWW,iBAAiBN,EAAQO,sBAIxCX,EAAAC,EAAA,uBAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IAEDR,EAA4CQ,EAA5CR,eAAgBC,EAA4BO,EAA5BP,kBAAmBC,EAASM,EAATN,QAGzCC,EAAWa,QAASC,KAEhB,IAEIC,EAFAC,EAAiBF,EACjBG,EAAO,GAEPC,EAAW,CAAC,oBAAoB,iBAEpCH,EAAcjB,EAAkBoB,EAAWF,EAAiB,aAC5DA,EAAiBG,iBAAiBJ,EAAcK,KAChDH,EAAOA,EAAOI,OAAON,EAAcE,QAEnC,IAAIK,EAAgBC,OAAOC,QAAQR,EAAiBG,kBAAkBM,OAAO,CAACC,EAAQC,KAElF,OAAOD,EAAOC,EAAK,IACrB,GACFL,EAAgBvB,EAAMuB,EAAgB,GACnCN,EAAiBM,iBAAiBA,IAEjCL,EAAOW,KAAK,8BACZX,EAAOW,KAAK,kDACZZ,EAAiBM,gBAAgBvB,EAAMuB,EAAgB,IAE3D,IAAIO,EAAkBb,EAAiBc,gBAAgBtB,OACpDQ,EAAiBe,iBAAiBF,IAEjCZ,EAAOW,KAAK,8BACZX,EAAOW,KAAK,kDACZZ,EAAiBe,gBAAgBF,GAErC,IAAIG,EAAUH,EAAkB,EAC7Bb,EAAiBiB,QAAQD,IAExBf,EAAOW,KAAK,qBACZX,EAAOW,KAAK,yCACZZ,EAAiBiB,OAAOD,GAE5B,IAAIE,EAASlB,EAAiBc,gBAAgBK,KAAOb,EAAmBN,EAAiBoB,aAAaC,MAAMF,KAC5GD,EAAQnC,EAAMmC,EAAQ,GACnBlB,EAAiBmB,MAAMD,IAEtBjB,EAAOW,KAAK,mBACZX,EAAOW,KAAK,uCACZZ,EAAiBmB,KAAKD,GAI1B,IAAII,EAAWtB,EAAiBuB,cAAcC,KAAMb,IAEhD,MAAqB,YAAdA,EAAKlB,UAEhB,GAAG6B,EACH,CACI,IAAIG,EAAYzB,EAAiBc,gBAAgBtB,OAC7CkC,EAAU1B,EAAiBN,SAASiC,eACpCC,EAAW5B,EAAiBN,SAASmC,gBACrCC,EAAgB9C,EAAWU,SAAS+B,EAAaC,EAAWE,GAChE5B,EAAiBN,SAAS,CAACiC,eAAeG,EAAgBJ,UAAWG,gBAAgBC,EAAgBF,YACrG3B,EAAOA,EAAOI,OAAOyB,EAAgB7B,QAClCD,EAAiB+B,cAAcD,EAAgBtC,SAE9CS,EAAOW,KAAK,2BACZX,EAAOW,KAAK,+CACZZ,EAAiB+B,aAAaD,EAAgBtC,kBAGlBwC,IAA5BhC,EAAiBN,WAErBO,EAAOW,KAAK,uBACZX,EAAOW,KAAK,2CACZZ,EAAiBN,SAAS,CAACgC,UAAU,EAAEE,WAAW,GAC/C5B,EAAiB+B,cAAc/B,EAAiBc,gBAAgBtB,SAE/DS,EAAOW,KAAK,2BACZX,EAAOW,KAAK,iDAGpB,MAAO,CAACR,KAAKJ,EAAkBC,OAAOA,KAG1C,IAAIgC,EAAmBnC,IAEnB,IACIC,EACAmC,EAFAlC,EAAiBF,EAGjBG,EAAO,GAEPkC,EACJ,CACI,CAACC,UAAUpD,EAAWQ,OAAO6C,KAAK,SAASC,eAAe,mBAC1D,CAACF,UAAUpD,EAAWM,SAAS+C,KAAK,WAAWC,eAAe,qBAC9D,CAACF,UAAUpD,EAAWS,QAAQ4C,KAAK,UAAUC,eAAe,kBAVpE,IAAAC,EAYsC1D,EAAesD,EAAsBnC,GAArEA,EAZNuC,EAYMvC,iBAAkBkC,EAZxBK,EAYwBL,WACpBjC,EAAOA,EAAOI,OAAO6B,GAGrBnC,EAAcf,EAAWa,QAAQG,GACjCA,EAAiBD,EAAcK,KAC/BH,EAAOA,EAAOI,OAAON,EAAcE,QAEnC,IAAIuC,EAAUxC,EAAiBc,gBAAgBK,KAAOnB,EAAiBM,gBAKvE,OAJAP,EAAcf,EAAWW,iBAAiBK,EAAiBoB,aAAaC,MAAOmB,EAAW,aAC1FvC,EAAOA,EAAOI,OAAON,EAAcE,QACnCD,EAAiBoB,aAAaC,MAAMtB,EAAcK,KAE3C,CAACA,KAAKJ,EAAkBC,OAAOA","file":"js/mek_melee_validator.f5bd4b68.js","sourcesContent":["let validators={};\r\n\r\nimport(/* webpackChunkName: \"mek_melee-accuracy-data-module\" */\"@/data_table_modules/mek_melee/mek_melee-accuracy-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.accuracy=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_melee-damage-data-module\" */\"@/data_table_modules/mek_melee/mek_melee-damage-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.damage=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_melee-feature-data-module\" */\"@/data_table_modules/mek_melee/mek_melee-feature-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.feature=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_melee-entangle-range-data-module\" */\"@/data_table_modules/mek_melee/mek_melee-entangle-range-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.entangle=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_space-efficiency-data-module\" */\"@/data_table_modules/universal/mek_space-efficiency-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.space_efficiency=_module.validate_efficiency;\r\n});\r\n\r\nlet loopValidators, updateMultipliers, round;\r\nimport(/* webpackChunkName: \"validator_functions\" */\"./validator_functions\")\r\n.then((_module)=>\r\n{\r\n    ({loopValidators, updateMultipliers, round} = _module);\r\n});\r\n\r\nvalidators.derived=(_component)=>\r\n{\r\n    let cleanedComponent=_component;\r\n    let alerts=[];\r\n    let validatedData;\r\n    let updateList=[\"selected_accuracy\",\"feature_array\"];\r\n    //update cost_multipliers for components needing update\r\n    validatedData=updateMultipliers(updateList,cleanedComponent,\"Mek-Melee\");\r\n    cleanedComponent.cost_multipliers=validatedData.data;\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    //update cost_multiplier\r\n    let cost_multiplier=Object.entries(cleanedComponent.cost_multipliers).reduce((_multi, _val)=>\r\n    {//calc new cost_multiplier\r\n        return _multi*_val[1];\r\n    },1);\r\n    cost_multiplier=round(cost_multiplier,2);\r\n    if(cleanedComponent.cost_multiplier!=cost_multiplier)\r\n    {\r\n        alerts.push(\"Mek-Melee: cost_multiplier\");\r\n        alerts.push(\"**** Invalid Cost Multiplier. Correcting. ****\");\r\n        cleanedComponent.cost_multiplier=round(cost_multiplier,2);\r\n    }\r\n    let newDamageCapacity=cleanedComponent.selected_damage.damage;\r\n    if(cleanedComponent.damage_capacity!=newDamageCapacity)\r\n    {\r\n        alerts.push(\"Mek-Melee: damage_capacity\");\r\n        alerts.push(\"**** Invalid Damage Capacity. Correcting. ****\");\r\n        cleanedComponent.damage_capacity=newDamageCapacity;\r\n    }\r\n    let newWeight=newDamageCapacity/2;\r\n    if(cleanedComponent.weight!=newWeight)\r\n    {\r\n        alerts.push(\"Mek-Melee: weight\");\r\n        alerts.push(\"**** Invalid Weight. Correcting. ****\");\r\n        cleanedComponent.weight=newWeight;\r\n    }\r\n    let newCost=(cleanedComponent.selected_damage.cost * cost_multiplier) + cleanedComponent.efficiencies.space.cost;\r\n    newCost=round(newCost,2);\r\n    if(cleanedComponent.cost!=newCost)\r\n    {\r\n        alerts.push(\"Mek-Melee: cost\");\r\n        alerts.push(\"**** Invalid Cost. Correcting. ****\");\r\n        cleanedComponent.cost=newCost;\r\n    }\r\n\r\n    //check and update entangle-range trade values\r\n    let isEntangle=cleanedComponent.feature_array.some((_val)=>\r\n    {\r\n        return _val.feature==\"Entangle\";\r\n    });\r\n    if(isEntangle)\r\n    {\r\n        let base_damage=cleanedComponent.selected_damage.damage;\r\n        let range_mod=cleanedComponent.entangle.range_modifier;\r\n        let damage_mod=cleanedComponent.entangle.damage_modifier;\r\n        let cleanedEntangle=validators.entangle(base_damage, range_mod, damage_mod);\r\n        cleanedComponent.entangle={range_modifier:cleanedEntangle.range_mod, damage_modifier:cleanedEntangle.damage_mod};\r\n        alerts=alerts.concat(cleanedEntangle.alerts);\r\n        if(cleanedComponent.final_damage!=cleanedEntangle.damage)\r\n        {\r\n            alerts.push(\"Mek-Melee: final_damage\");\r\n            alerts.push(\"**** Invalid Final Damage. Correcting. ****\");\r\n            cleanedComponent.final_damage=cleanedEntangle.damage;\r\n        }\r\n    }\r\n    else if(cleanedComponent.entangle!==undefined)\r\n    {\r\n        alerts.push(\"Mek-Melee: entangle\");\r\n        alerts.push(\"**** Invalid Entangle. Correcting. ****\");\r\n        cleanedComponent.entangle={range_mod:0,damage_mod:0};\r\n        if(cleanedComponent.final_damage!=cleanedComponent.selected_damage.damage)\r\n        {\r\n            alerts.push(\"Mek-Melee: final_damage\");\r\n            alerts.push(\"**** Invalid Final Damage. Correcting. ****\");\r\n        }\r\n    }\r\n    return {data:cleanedComponent, alerts:alerts};\r\n};\r\n\r\nlet validateComponent=(_component)=>\r\n{\r\n    let cleanedComponent=_component;\r\n    let validatedData;\r\n    let loopAlerts;\r\n    let alerts=[];\r\n    //loop thru independent validations\r\n    let componentsToValidate=\r\n    [\r\n        {validator:validators.damage,pkey:\"damage\",component_prop:\"selected_damage\"},\r\n        {validator:validators.accuracy,pkey:\"accuracy\",component_prop:'selected_accuracy'},\r\n        {validator:validators.feature,pkey:\"feature\",component_prop:'feature_array'},\r\n    ];\r\n    ({cleanedComponent, loopAlerts} = loopValidators(componentsToValidate, cleanedComponent));\r\n    alerts=alerts.concat(loopAlerts)\r\n\r\n    //update cost_multipliers for components needing update\r\n    validatedData=validators.derived(cleanedComponent);\r\n    cleanedComponent=validatedData.data;\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    //validate space efficienc\r\n    let base_cost=cleanedComponent.selected_damage.cost * cleanedComponent.cost_multiplier;\r\n    validatedData=validators.space_efficiency(cleanedComponent.efficiencies.space, base_cost, \"Mek-Melee\");\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    cleanedComponent.efficiencies.space=validatedData.data;\r\n\r\n    return {data:cleanedComponent, alerts:alerts};\r\n};\r\n\r\nexport {validateComponent};"],"sourceRoot":""}