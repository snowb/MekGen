{"version":3,"sources":["webpack:///./src/data_table_modules/universal/mek_partial-function-data-module.js","webpack:///./src/data_table_modules/mek_shield/mek_shield-weakness-data-module.js"],"names":["__webpack_require__","d","__webpack_exports__","partial_validate","partial_has_feature","partial_get_feature","partial_cleaned_feature","_data_table","_validation_keys","_data","Array","isArray","length","valid","some","_val","every","_keys","_key","undefined","_has_feature","found_feature","_table_val","_validator","_get_feature","_default_data","_name","_pkey","_feature","data","key_list","update","alerts","json_data","JSON","stringify","parse","push","r","weakness_data_table","weakness_validate","has_weakness","get_weakness","cleaned_weakness","_data_table_modules_universal_mek_partial_function_data_module__WEBPACK_IMPORTED_MODULE_0__","weakness","monicker","cost","only_exclusive","filter","_el","data_table_keys","default_data","all_exclusive","is_exclusive_weakness","_exclusive_target","_pkey_value","exclusive_target_array","toLowerCase","_weakness_array","hasExclusiveOnly","hasExclusiveAll","error","cleaned_array","temp_selected_weakness_array","reduceRight","_cleaned_array","isAll","clean_weakness","isOnly","includes","reverse"],"mappings":"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","file":"js/mek_shield-weakness-data-module.ba74038b.js","sourcesContent":["//data table module, raw data output for re-use in non-vue-component formats\r\n\r\n//ATTEMPT: make validators and has_feat and get_feat and cleaned_feat functions \r\n//          neutral and reusable across all data modules\r\n\r\n//partial data validator\r\n//called with data_table and validation_keys in data-module\r\nlet partial_validate=(_data_table,_validation_keys)=>(_data)=>\r\n{//_data_table: Array, array of data to validate against\r\n    //_validation_keys: Array, keys to be compared between passed in data and data_table\r\n    //_data: Object, data to be compared to data table \r\n    if(typeof _data===\"undefined\" || !Array.isArray(_validation_keys) || _validation_keys.length==0)\r\n    {\r\n        return false;\r\n    }\r\n    let valid=_data_table.some((_val)=>\r\n    {\r\n        return _validation_keys.every((_keys)=>\r\n        {//return true if all validation_keys in _data match an element in _data_table\r\n            return _data[_keys]==_val[_keys];\r\n        });\r\n    });\r\n    return valid;\r\n}\r\n\r\n//partial_has_feature, determine if provided data table has matching element with provided key and val\r\n//called in data module to generate full function with local data\r\nlet partial_has_feature=(_data_table)=>(_key, _val)=>\r\n{\r\n    return _data_table.some((_data)=>\r\n    {\r\n        return _data[_key]!==undefined && _data[_key]==_val;\r\n    });\r\n};\r\n\r\n//partial get_feature, returns full function for data module\r\n//requires data_table (array) and module's has_feature function\r\n//returns full matching element in provided data table\r\n//has_feature must exist in data table module\r\nlet partial_get_feature=(_data_table, _has_feature)=>(_key, _val)=>\r\n{\r\n    let found_feature=null;\r\n    if(_has_feature(_key,_val))\r\n    {\r\n        _data_table.some((_table_val)=>\r\n        {\r\n            if(_table_val[_key]==_val)\r\n            {\r\n                found_feature=_table_val;\r\n                return true;\r\n            }\r\n        },this);\r\n    }\r\n    return found_feature;\r\n}\r\n\r\nlet partial_cleaned_feature=(_validator, _has_feature, _get_feature, _default_data, _name)=>(_pkey, _feature)=>\r\n{//input: primary key, selected feature, filtered data table\r\n    let data=undefined;\r\n    let key_list=[];\r\n    let update=false;\r\n    let alerts=[];\r\n    let json_data=JSON.stringify(_feature);\r\n\r\n    if(_feature===undefined || !_has_feature(_pkey,_feature[_pkey]))\r\n    {\r\n        data=_default_data;\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting to default. ****\");\r\n    }\r\n    else if(!_validator(_feature))\r\n    {\r\n        data=JSON.parse(JSON.stringify(_get_feature(_pkey,_feature[_pkey])));\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting. ****\");\r\n    }\r\n    else\r\n    {\r\n        data=JSON.parse(JSON.stringify(_feature));\r\n        key_list=[data[_pkey]];\r\n        update=false;\r\n    }\r\n    return {data:data, key_list:key_list, update:update, alerts:alerts};\r\n}\r\n\r\nexport {partial_validate, partial_has_feature, partial_get_feature, partial_cleaned_feature};\r\n","//data table module, raw data output for re-use in non-vue-component formats\r\nimport {partial_validate, partial_has_feature, partial_get_feature} \r\n    from \"@/data_table_modules/universal/mek_partial-function-data-module\";\r\n\r\n//create new weakness_data_table\r\nlet weakness_data_table=\r\n[\r\n    {weakness:\"All\",monicker:\"Shield\",cost:1.0},\r\n    {weakness:\"Ablative\",monicker:\"Screen\",cost:1.0},\r\n    {weakness:\"Energy Only\",monicker:\"Interference\",cost:0.75,only_exclusive:true},\r\n    {weakness:\"Matter Only\",monicker:\"Kinetic\",cost:0.75,only_exclusive:true},\r\n    {weakness:\"Ranged Only\",monicker:\"Swashbuckling\",cost:0.75,only_exclusive:true},\r\n    {weakness:\"Enclosing\",monicker:\"Mirror\",cost:0.5},\r\n    {weakness:\"Surge\",monicker:\"Surge\",cost:2.5}\r\n];\r\nlet only_exclusive=weakness_data_table.filter((_el)=>{return typeof _el.only_exclusive!==\"undefined\";});\r\nlet data_table_keys=[\"weakness\",\"monicker\",\"only_exclusive\",\"cost\"];\r\nlet default_data={weakness:\"All\",monicker:\"Shield\",cost:1.0};\r\nlet all_exclusive=[default_data];\r\n\r\n//data validator for damage_data_table\r\n//call partial_validate with appropriate data for full validate\r\nlet weakness_validate=partial_validate(weakness_data_table, data_table_keys);\r\n\r\n//completed function for checking if data has data\r\nlet has_weakness=partial_has_feature(weakness_data_table);\r\n\r\n//completed function for returning matching data\r\nlet get_weakness=partial_get_feature(weakness_data_table, has_weakness);\r\n\r\nlet is_exclusive_weakness=function(_exclusive_target, _pkey, _pkey_value)\r\n{\r\n    let exclusive_target_array=null;\r\n    switch(_exclusive_target.toLowerCase())\r\n    {\r\n        case \"only_exclusive\":\r\n            exclusive_target_array=only_exclusive;\r\n            break;\r\n        case \"all_exclusive\":\r\n            exclusive_target_array=all_exclusive;\r\n            break;\r\n    }\r\n    if(exclusive_target_array===null)\r\n    {\r\n        return false;\r\n    }\r\n    return exclusive_target_array.some((_val)=>\r\n    {\r\n        return _val[_pkey]==_pkey_value;\r\n    });\r\n};\r\n\r\nlet cleaned_weakness=function(_weakness_array, _pkey)\r\n{//takes weakness_array, returns cleaned array removing multiple exclusive values\r\n    let hasExclusiveOnly=false;\r\n    let hasExclusiveAll=false;\r\n    let update=false;\r\n    let key_list=[];\r\n    let alerts=[];\r\n\r\n    if(_weakness_array===undefined || _pkey===undefined)\r\n    {\r\n        alerts.push(\"Mek_Shield-Weakness: \");\r\n        let error=_weakness_array===undefined\r\n            ? \"**** Missing weakness array. Returning blank. ****\"\r\n            : \"**** No primary key provided. Returning blank. ****\";\r\n        alerts.push(error);\r\n        return {cleaned_array:[default_data],update:true,key_list:[\"All\"],alerts:alerts};\r\n    }\r\n\r\n    let temp_selected_weakness_array=_weakness_array.reduceRight((_cleaned_array, _val)=>\r\n    {\r\n        if(hasExclusiveAll)\r\n        {//found exclusive all weakness, return just that\r\n            key_list=[\"All\"];\r\n            return [default_data];\r\n        }\r\n        let isAll=is_exclusive_weakness(\"all_exclusive\",_pkey,_val[_pkey]);\r\n        if(isAll && _cleaned_array.length==0)\r\n        {//last item added was All, return that and essential end\r\n            hasExclusiveAll=true;\r\n            key_list=[\"All\"];\r\n            return [default_data];\r\n        }\r\n        else if(isAll)\r\n        {//otherwise, not last item, ignore All weakness\r\n            return _cleaned_array;\r\n        }\r\n        if(_val[_pkey]===undefined)\r\n        {//if weakness with pkey doesn't exist in data table, ignore\r\n            alerts.push(\"Mek_Shield-Weakness: \"+JSON.stringify(_val));\r\n            alerts.push(\"**** Missing primary key. Ignoring. ****\");\r\n            return _cleaned_array;\r\n        }\r\n        let clean_weakness=_val;\r\n        if(!weakness_validate(_val))\r\n        {//invalid data\r\n            alerts.push(\"Mek_Shield-Weakness: \"+JSON.stringify(_val))\r\n            alerts.push(\"**** Invalid data, attempting to reset. ****\")\r\n            clean_weakness=get_weakness(_pkey,_val[_pkey]);\r\n            update=true;\r\n            //attempt to set to corrected weakness\r\n        }\r\n        if(clean_weakness===null)\r\n        {//no matching weakness\r\n            alerts.push(\"**** Unable to reset. No matching data. ****\")\r\n            update=true;\r\n            return _cleaned_array;\r\n            //ignore element\r\n        }\r\n\r\n        let isOnly=is_exclusive_weakness(\"only_exclusive\",_pkey,_val[_pkey]);\r\n\r\n        if(isOnly && !hasExclusiveOnly)\r\n        {\r\n            _cleaned_array.push(_val);\r\n            hasExclusiveOnly=true;\r\n            key_list.push(_val[_pkey]);\r\n            return _cleaned_array;\r\n        }\r\n        else if(isOnly && hasExclusiveOnly)\r\n        {\r\n            alerts.push(\"Mek_Shield-Weakness: \"+_val);\r\n            alerts.push(\"**** Duplicate exclusive Shield data. Ignoring. ****\");\r\n            update=true;\r\n            return _cleaned_array;\r\n        }\r\n\r\n        if(!key_list.includes(_val[_pkey]))\r\n        {\r\n            _cleaned_array.push(_val);\r\n            key_list.push(_val[_pkey]);\r\n        }\r\n        return _cleaned_array;\r\n    },[]);\r\n    temp_selected_weakness_array.reverse();\r\n    if(temp_selected_weakness_array.length==0)\r\n    {//empty, reset to default\r\n        temp_selected_weakness_array=[JSON.parse(JSON.stringify(default_data))];\r\n        update=true;\r\n        key_list=[\"All\"];\r\n        alerts.push(\"Mek_Shield-Weakness: \");\r\n        alerts.push(\"**** Reseting to default ****\");\r\n    }\r\n    return {cleaned_array:temp_selected_weakness_array,update:update,key_list:key_list,alerts:alerts};\r\n    //returns an object with the pruned weakness array, whether it was updated, and the key_list\r\n}\r\n\r\nexport {weakness_data_table, weakness_validate, has_weakness, get_weakness, cleaned_weakness};\r\n"],"sourceRoot":""}