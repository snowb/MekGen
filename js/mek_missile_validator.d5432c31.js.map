{"version":3,"sources":["webpack:///./src/store/modules/validators/mek_missile_validator.js"],"names":["loopValidators","updateMultipliers","round","validators","__webpack_require__","e","then","bind","_module","accuracy","cleaned_feature","damage","feature","feature_filter","filter_data_table","blast_radius","skill","smart","range_mod","udpate_range_mod","create_range_mod_data_table","space_efficiency","validate_efficiency","derived","_component","validatedData","cleanedComponent","alerts","updateList","newPackSize","parseInt","selected_pack_size","size","push","isNaN","cost","cost_multipliers","data","concat","cost_multiplier","Object","entries","reduce","_multi","_val","newDamageCapacity","selected_damage","damage_capacity","newWeight","weight","newCost","efficiencies","space","validateComponent","loopAlerts","componentsToValidate","validator","pkey","component_prop","_loopValidators","selected_blast_radius","selected_smart","range","_loopValidators2"],"mappings":"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","file":"js/mek_missile_validator.d5432c31.js","sourcesContent":["let validators = {};\r\n\r\nimport(/* webpackChunkName: \"mek_missile-accuracy-data-module\" */\"@/data_table_modules/mek_missile/mek_missile-accuracy-data-module\")\r\n  .then((_module) => {\r\n    validators.accuracy = _module.cleaned_feature;\r\n  });\r\n\r\nimport(/* webpackChunkName: \"mek_missile-damage-data-module\" */\"@/data_table_modules/mek_missile/mek_missile-damage-data-module\")\r\n  .then((_module) => {\r\n    validators.damage = _module.cleaned_feature;\r\n  });\r\n\r\nimport(/* webpackChunkName: \"mek_missile-feature-data-module\" */\"@/data_table_modules/mek_missile/mek_missile-feature-data-module\")\r\n  .then((_module) => {\r\n    validators.feature = _module.cleaned_feature;\r\n    validators.feature_filter = _module.filter_data_table;\r\n  });\r\n\r\nimport(/* webpackChunkName: \"mek_missile-blast-radius-data-module\" */\"@/data_table_modules/mek_missile/mek_missile-blast-radius-data-module\")\r\n  .then((_module) => {\r\n    validators.blast_radius = _module.cleaned_feature;\r\n  });\r\n\r\nimport(/* webpackChunkName: \"mek_missile-skill-data-module\" */\"@/data_table_modules/mek_missile/mek_missile-skill-data-module\")\r\n  .then((_module) => {\r\n    validators.skill = _module.cleaned_feature;\r\n  });\r\n\r\nimport(/* webpackChunkName: \"mek_missile-smart-data-module\" */\"@/data_table_modules/mek_missile/mek_missile-smart-data-module\")\r\n  .then((_module) => {\r\n    validators.smart = _module.cleaned_feature;\r\n  });\r\n\r\nimport(/* webpackChunkName: \"mek_missile-range-mod-data-module\" */\"@/data_table_modules/mek_missile/mek_missile-range-mod-data-module\")\r\n  .then((_module) => {\r\n    validators.range_mod = _module.cleaned_feature;\r\n    validators.udpate_range_mod = _module.create_range_mod_data_table;\r\n  });\r\n\r\nimport(/* webpackChunkName: \"mek_space-efficiency-data-module\" */\"@/data_table_modules/universal/mek_space-efficiency-data-module\")\r\n  .then((_module) => {\r\n    validators.space_efficiency = _module.validate_efficiency;\r\n  });\r\n\r\nlet loopValidators, updateMultipliers, round;\r\nimport(/* webpackChunkName: \"validator_functions\" */\"./validator_functions\")\r\n  .then((_module) => {\r\n    ({ loopValidators, updateMultipliers, round } = _module);\r\n  });\r\n\r\nvalidators.derived = (_component) => {\r\n  let cleanedComponent = _component;\r\n  let alerts = [];\r\n  let validatedData;\r\n  let updateList = \r\n    [\r\n      \"selected_accuracy\", \r\n      \"feature_array\",\r\n      \"selected_range_mod\",\r\n      \"selected_blast_radius\",\r\n      \"selected_skill\",\r\n      \"selected_smart\",\r\n      \"selected_pack_size\"\r\n    ];\r\n  //validate pack size\r\n  let newPackSize=parseInt(cleanedComponent.selected_pack_size.size);\r\n  if(cleanedComponent.selected_pack_size.size!=newPackSize)\r\n  {//validate shots\r\n      alerts.push(\"Mek-Missile: selected_pack_size\");\r\n      alerts.push(\"**** Invalid Selected Pack Size. Correcting. ****\");\r\n      cleanedComponent.selected_pack_size=isNaN(newPackSize) ? {size:1,cost:1} : {size:newPackSize,cost:newPackSize};\r\n  }\r\n  //update cost_multipliers for components needing update\r\n  validatedData = updateMultipliers(updateList, cleanedComponent, \"Mek-Missile\");\r\n  cleanedComponent.cost_multipliers = validatedData.data;\r\n  alerts = alerts.concat(validatedData.alerts);\r\n  //update cost_multiplier\r\n  let cost_multiplier = Object.entries(cleanedComponent.cost_multipliers).reduce((_multi, _val) => {//calc new cost_multiplier\r\n    return _multi * _val[1];\r\n  }, 1);\r\n  cost_multiplier = round(cost_multiplier, 2);\r\n  if (cleanedComponent.cost_multiplier != cost_multiplier) {\r\n    alerts.push(\"Mek-Missile: cost_multiplier\");\r\n    alerts.push(\"**** Invalid Cost Multiplier. Correcting. ****\");\r\n    cleanedComponent.cost_multiplier = round(cost_multiplier, 2);\r\n  }\r\n  let newDamageCapacity = round(newPackSize * cleanedComponent.selected_damage.damage/15,2);\r\n  if (cleanedComponent.damage_capacity != newDamageCapacity) {\r\n    alerts.push(\"Mek-Missile: damage_capacity\");\r\n    alerts.push(\"**** Invalid Damage Capacity. Correcting. ****\");\r\n    cleanedComponent.damage_capacity = newDamageCapacity;\r\n  }\r\n  let newWeight = round(newDamageCapacity / 2,2);\r\n  if (cleanedComponent.weight != newWeight) {\r\n    alerts.push(\"Mek-Missile: weight\");\r\n    alerts.push(\"**** Invalid Weight. Correcting. ****\");\r\n    cleanedComponent.weight = newWeight;\r\n  }\r\n  let newCost = (newPackSize * (cleanedComponent.selected_damage.cost * cost_multiplier)) + cleanedComponent.efficiencies.space.cost;\r\n  newCost = round(newCost, 2);\r\n  if (cleanedComponent.cost != newCost) {\r\n    alerts.push(\"Mek-Missile: cost\");\r\n    alerts.push(\"**** Invalid Cost. Correcting. ****\");\r\n    cleanedComponent.cost = newCost;\r\n  }\r\n\r\n\r\n  return { data: cleanedComponent, alerts: alerts };\r\n};\r\n\r\nlet validateComponent = (_component) => {\r\n  let cleanedComponent = _component;\r\n  let validatedData;\r\n  let loopAlerts;\r\n  let alerts = [];\r\n  //loop thru independent validations\r\n  let componentsToValidate =\r\n    [\r\n      { validator: validators.damage, pkey: \"damage\", component_prop: \"selected_damage\" },\r\n      { validator: validators.accuracy, pkey: \"accuracy\", component_prop: 'selected_accuracy' },\r\n      { validator: validators.blast_radius, pkey: \"blast_radius\", component_prop: 'selected_blast_radius' },\r\n      { validator: validators.skill, pkey: \"skill\", component_prop: 'selected_skill' },\r\n      { validator: validators.smart, pkey: \"smart\", component_prop: 'selected_smart' },\r\n    ];\r\n  ({ cleanedComponent, loopAlerts } = loopValidators(componentsToValidate, cleanedComponent));\r\n  alerts = alerts.concat(loopAlerts)\r\n\r\n  //update feature filter, dependent on smart and blast_radius\r\n  validators.feature_filter(cleanedComponent.selected_blast_radius.blast_radius, cleanedComponent.selected_smart.smart);\r\n  //update range_mod, dependent on base_range from damage\r\n  validators.udpate_range_mod(cleanedComponent.selected_damage.range);\r\n  //loop thru dependent validators\r\n  componentsToValidate =\r\n    [\r\n      { validator: validators.feature, pkey: \"feature\", component_prop: \"feature_array\" },\r\n      { validator: validators.range_mod, pkey: \"range_mod\", component_prop: 'selected_range_mod' },\r\n    ];\r\n  ({ cleanedComponent, loopAlerts } = loopValidators(componentsToValidate, cleanedComponent));\r\n  alerts = alerts.concat(loopAlerts)\r\n\r\n  //update cost_multipliers for components needing update\r\n  validatedData = validators.derived(cleanedComponent);\r\n  cleanedComponent = validatedData.data;\r\n  alerts = alerts.concat(validatedData.alerts);\r\n  //validate space efficienc\r\n  validatedData = validators.space_efficiency(cleanedComponent.efficiencies.space, cleanedComponent.cost, \"Mek-Missile\");\r\n  alerts = alerts.concat(validatedData.alerts);\r\n  cleanedComponent.efficiencies.space = validatedData.data;\r\n\r\n  return { data: cleanedComponent, alerts: alerts };\r\n};\r\n\r\nexport { validateComponent };"],"sourceRoot":""}