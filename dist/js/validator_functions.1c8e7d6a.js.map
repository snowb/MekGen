{"version":3,"sources":["webpack:///./src/store/modules/validators/validator_functions.js"],"names":["loopValidators","_validators","_component","cleanedComponent","alerts","forEach","_val","validatedData","runValidator","component_prop","cleaned_array","data","concat","loopAlerts","_validator_data","validatorInstance","validator","pkeyInstance","pkey","propInstance","updateMultipliers","_updateList","_name","component","length","_component_prop","feature_array_cost_multiplier","feature_array","reduce","_cm","_feat","cost","cost_multipliers","push","round","_number","_decimals","Math","multiplier"],"mappings":"yQAAA,IAAIA,EAAe,CAACC,EAAaC,KAE7B,IAAIC,EAAiBD,EACjBE,EAAO,GAUX,OATAH,EAAYI,QAASC,IAEjB,IAAIC,EAAcC,EAAaF,EAAMH,GACrCA,EAAiBG,EAAKG,gBAAqC,iBAArBH,EAAKG,eAC7BF,EAAcG,cACdH,EAAcI,KAC5BP,EAAOA,EAAOQ,OAAOL,EAAcH,UAGhC,CAACD,iBAAiBA,EAAkBU,WAAWT,IAGtDI,EAAa,CAACM,EAAiBZ,KAG/B,IAAIa,EAAkBD,EAAgBE,UAClCC,EAAaH,EAAgBI,KAC7BC,EAAajB,EAAWY,EAAgBL,gBAE5C,MAAmC,iBAAhCK,EAAgBL,eAERM,EAAkBI,EAAcF,GAEpCF,EAAkBE,EAAcE,IAGvCC,EAAkB,CAACC,EAAanB,EAAYoB,KAE5C,IAAIC,EAAUrB,EACVE,EAAO,GACPO,EAAK,GACT,OAAuB,GAApBU,EAAYG,OAEJ,CAACb,KAAKY,EAAWnB,OAAOA,IAEnCiB,EAAYhB,QAASoB,IAEjB,GAAoB,iBAAjBA,EACH,CACI,IAAIC,EAA8BxB,EAAWyB,cAAcC,OAAO,CAACC,EAAKC,KAEpE,OAAOD,EAAMC,EAAMC,MACrB,GACCR,EAAUS,iBAAiBL,eAAeD,IAEzCtB,EAAO6B,KAAKX,EAAM,sBAAsBG,GACxCrB,EAAO6B,KAAK,kDACZtB,EAAKgB,cAAcD,QAKpBH,EAAUS,iBAAiBP,IAAkBvB,EAAWuB,GAAiBM,OAExE3B,EAAO6B,KAAKX,EAAM,sBAAsBG,GACxCrB,EAAO6B,KAAK,kDACZtB,EAAKc,GAAiBvB,EAAWuB,GAAiBM,QAIvD,CAACpB,KAAKA,EAAMP,OAAOA,KAG1B8B,EAAM,CAACC,EAASC,KAEhB,GAAsB,qBAAZA,GAAuC,IAAXA,EAElC,OAAOC,KAAKH,OAAOC,GAEvB,IAAIG,EAAW,KAAOF,EACtB,OAAOC,KAAKH,OAAOC,EAAUG,GAAYA","file":"js/validator_functions.1c8e7d6a.js","sourcesContent":["let loopValidators=(_validators, _component)=>\r\n{\r\n    let cleanedComponent=_component;\r\n    let alerts=[];\r\n    _validators.forEach((_val)=>\r\n    {\r\n        let validatedData=runValidator(_val, cleanedComponent);\r\n        cleanedComponent[_val.component_prop]=_val.component_prop==\"feature_array\"\r\n                    ? validatedData.cleaned_array\r\n                    : validatedData.data;\r\n        alerts=alerts.concat(validatedData.alerts);\r\n    });\r\n\r\n    return {cleanedComponent:cleanedComponent, loopAlerts:alerts};\r\n};\r\n\r\nlet runValidator=(_validator_data, _component)=>\r\n{\r\n    //let validatorInstance=validators[_validator_data.validator];\r\n    let validatorInstance=_validator_data.validator;\r\n    let pkeyInstance=_validator_data.pkey;\r\n    let propInstance=_component[_validator_data.component_prop];\r\n\r\n    if(_validator_data.component_prop==\"feature_array\")\r\n    {\r\n        return validatorInstance(propInstance, pkeyInstance); \r\n    }\r\n    return validatorInstance(pkeyInstance, propInstance);\r\n};\r\n\r\nlet updateMultipliers=(_updateList, _component, _name)=>\r\n{\r\n    let component=_component;\r\n    let alerts=[];\r\n    let data={};\r\n    if(_updateList.length==0)\r\n    {\r\n        return {data:component, alerts:alerts};\r\n    }\r\n    _updateList.forEach((_component_prop)=>\r\n    {\r\n        if(_component_prop==\"feature_array\")\r\n        {\r\n            let feature_array_cost_multiplier=_component.feature_array.reduce((_cm, _feat)=>\r\n            {\r\n                return _cm * _feat.cost;\r\n            },1);\r\n            if(component.cost_multipliers.feature_array!=feature_array_cost_multiplier)\r\n            {\r\n                alerts.push(_name+\": cost_multipliers.\"+_component_prop);\r\n                alerts.push(\"**** Invalid Cost Multiplier. Correcting. ****\");\r\n                data.feature_array=feature_array_cost_multiplier;\r\n            }   \r\n        }\r\n        else\r\n        {\r\n            if(component.cost_multipliers[_component_prop]!=_component[_component_prop].cost)\r\n            {\r\n                alerts.push(_name+\": cost_multipliers.\"+_component_prop);\r\n                alerts.push(\"**** Invalid Cost Multiplier. Correcting. ****\");\r\n                data[_component_prop]=_component[_component_prop].cost;\r\n            }   \r\n        }\r\n    });\r\n    return {data:data, alerts:alerts};\r\n};\r\n\r\nlet round=(_number, _decimals)=>\r\n{\r\n    if(typeof _decimals===\"undefined\" || +_decimals==0)\r\n    {\r\n        return Math.round(+_number)\r\n    }\r\n    let multiplier=10 ** +_decimals;\r\n    return Math.round(+_number * multiplier)/multiplier;\r\n};\r\n\r\nexport {loopValidators, updateMultipliers, round};"],"sourceRoot":""}