{"version":3,"sources":["webpack:///./src/store/modules/validators/mek_servo_validator.js"],"names":["loopValidators","updateMultipliers","round","validators","__webpack_require__","e","then","bind","_module","servo_class","cleaned_feature","create_class_table","create_class_data_table","servo_trade","servo_type","armor","armor_filter","filter_data_table","armor_type","armor_RAM","derived","_component","cleanedComponent","alerts","updateList","validatedData","cost_multipliers","data","concat","cost_multiplier","Object","entries","reduce","_multi","_val","armor_cost_multiplier","push","newCost","selected_servo_class","cost","selected_armor","kills_space_trade","newWeight","total_kills","stopping_power","weight","newTotalKills","kills","kills_modifier","newAvailSpace","space","space_modifier","available_space","validateComponent","loopAlerts","componentsToValidate","validator","pkey","component_prop","skipUpdateList","_loopValidators","selected_servo_type","type","trade_formatted","code"],"mappings":"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","file":"js/mek_servo_validator.4678b8b8.js","sourcesContent":["let validators={};\r\n\r\nimport(/* webpackChunkName: \"mek_servo-class-data-module\" */\"@/data_table_modules/mek_servo/mek_servo-class-data-module.js\")\r\n.then((_module)=>\r\n{\r\n    validators.servo_class=_module.cleaned_feature;\r\n    validators.create_class_table=_module.create_class_data_table;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_servo-kills-space-trade-data-module\" */\"@/data_table_modules/mek_servo/mek_servo-kills-space-trade-data-module.js\")\r\n.then((_module)=>\r\n{\r\n    validators.servo_trade=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_servo-type-data-module\" */\"@/data_table_modules/mek_servo/mek_servo-type-data-module.js\")\r\n.then((_module)=>\r\n{\r\n    validators.servo_type=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_armor-data-module\" */\"@/data_table_modules/mek_armor/mek_armor-data-module.js\")\r\n.then((_module)=>\r\n{\r\n    validators.armor=_module.cleaned_feature;\r\n    validators.armor_filter=_module.filter_data_table;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_armor-type-data-module\" */\"@/data_table_modules/mek_armor/mek_armor-type-data-module.js\")\r\n.then((_module)=>\r\n{\r\n    validators.armor_type=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_armor-RAM-data-module\" */\"@/data_table_modules/mek_armor/mek_armor-RAM-data-module.js\")\r\n.then((_module)=>\r\n{\r\n    validators.armor_RAM=_module.cleaned_feature;\r\n});\r\n\r\nlet loopValidators, updateMultipliers, round;\r\nimport(/* webpackChunkName: \"validator_functions\" */\"./validator_functions\")\r\n.then((_module)=>\r\n{\r\n    ({loopValidators, updateMultipliers, round} = _module);\r\n});\r\n\r\nvalidators.derived=(_component)=>\r\n{//component unique derived value validation\r\n    let cleanedComponent=_component;\r\n    let alerts=[];\r\n    let updateList=[\"selected_armor_type\",\"selected_absorption\"];\r\n    //update multipliers\r\n    let validatedData=updateMultipliers(updateList,cleanedComponent);\r\n    cleanedComponent.cost_multipliers.armor=validatedData.data;\r\n    alerts.concat(validatedData.alerts);\r\n    let cost_multiplier=Object.entries(cleanedComponent.cost_multipliers.armor).reduce((_multi, _val)=>\r\n    {//calc new cost_multiplier\r\n        return _multi*_val[1];\r\n    },1);\r\n    cost_multiplier=round(cost_multiplier,2);\r\n    if(cleanedComponent.armor_cost_multiplier!=cost_multiplier)\r\n    {//correct cost_multiplier if mismatch\r\n        alerts.push(\"Mek-Servo: cost_multiplier.armor\");\r\n        alerts.push(\"**** Invalid Armor Cost Multiplier. Correcting. ****\");\r\n        cleanedComponent.armor_cost_multiplier=cost_multiplier;\r\n    }\r\n    let newCost=cleanedComponent.selected_servo_class.cost\r\n                + (cleanedComponent.selected_armor.cost * cleanedComponent.armor_cost_multiplier)\r\n                + cleanedComponent.kills_space_trade.cost;\r\n    if(cleanedComponent.cost!=newCost)\r\n    {//correct cost if mismatch\r\n        alerts.push(\"Mek-Servo: cost\");\r\n        alerts.push(\"**** Invalid Cost. Correcting. ****\");\r\n        cleanedComponent.cost=newCost;\r\n    }\r\n    let newWeight=(cleanedComponent.total_kills + cleanedComponent.selected_armor.stopping_power)/2;\r\n    if(cleanedComponent.weight!=newWeight)\r\n    {//correct weight if mismatch\r\n        alerts.push(\"Mek-Servo: weight\");\r\n        alerts.push(\"**** Invalid Weight. Correcting. ****\");\r\n        cleanedComponent.weight=newWeight;\r\n    }\r\n    // update total kills\r\n    let newTotalKills=cleanedComponent.selected_servo_class.kills \r\n                        + cleanedComponent.kills_space_trade.kills_modifier;\r\n    if(cleanedComponent.total_kills!=newTotalKills)\r\n    {\r\n        alerts.push(\"Mek-Servo: total_kills\");\r\n        alerts.push(\"**** Invalid Total Kills. Correcting. ****\");\r\n        cleanedComponent.total_kills=newTotalKills\r\n    }\r\n    // update available_space\r\n    let newAvailSpace=cleanedComponent.selected_servo_class.space \r\n                        + cleanedComponent.kills_space_trade.space_modifier;\r\n    if(cleanedComponent.available_space!=newAvailSpace)\r\n    {\r\n        alerts.push(\"Mek-Servo: available_space\");\r\n        alerts.push(\"**** Invalid Available Space. Correcting. ****\");\r\n        cleanedComponent.available_space=newAvailSpace\r\n    }\r\n        \r\n    return {data:cleanedComponent,alerts:alerts}\r\n};\r\n\r\nlet validateComponent=(_component)=>\r\n{\r\n    let cleanedComponent=_component;\r\n    let validatedData;\r\n    //let updateList=[\"selected_armor_type\",\"selected_absorption\"];\r\n    let loopAlerts;\r\n    let alerts=[];\r\n    let componentsToValidate=\r\n    [\r\n        {validator:validators.servo_type,pkey:\"type\",component_prop:\"selected_servo_type\",skipUpdateList:true},\r\n        {validator:validators.armor_type,pkey:\"damage_coefficient\",component_prop:\"selected_armor_type\",},\r\n        {validator:validators.armor_RAM,pkey:\"absorption\",component_prop:'selected_absorption'},\r\n    ];\r\n    ({cleanedComponent, loopAlerts} = loopValidators(componentsToValidate, cleanedComponent));\r\n    alerts=alerts.concat(loopAlerts)\r\n    //update mek_servo class table based on mek servo type\r\n    validators.create_class_table(_component.selected_servo_type.type);\r\n    //validate servo-class\r\n    validatedData=validators.servo_class(\"code\",_component.selected_servo_class);\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    cleanedComponent.selected_servo_class=validatedData.data;\r\n    //generate properly formatted kill-space-trade data\r\n    let trade_formatted=\r\n        {\r\n            kills:_component.kills_space_trade.kills_modifier,\r\n            space:_component.kills_space_trade.space_modifier,\r\n            cost:_component.kills_space_trade.cost\r\n        };\r\n    //validate servo-kills-space-trade\r\n    validatedData=validators.servo_trade(\r\n        trade_formatted,\r\n        _component.selected_servo_class.kills,\r\n        _component.selected_servo_class.space);\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    cleanedComponent.kills_space_trade=validatedData.data;\r\n    //update armor based on servo class\r\n    validators.armor_filter(_component.selected_servo_class.code+2);\r\n    //validate armor\r\n    validatedData=validators.armor(\"code\",_component.selected_armor);\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    cleanedComponent.selected_armor=validatedData.data;\r\n    //validate derived data\r\n    validatedData=validators.derived(cleanedComponent);\r\n    cleanedComponent=validatedData.data;\r\n    alerts=alerts.concat(validatedData.alerts);\r\n\r\n    return {data:cleanedComponent, alerts:alerts};\r\n};\r\n\r\nexport {validateComponent};"],"sourceRoot":""}