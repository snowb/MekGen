{"version":3,"sources":["webpack:///./src/store/modules/validators/mek_energy_pool_validator.js"],"names":["loopValidators","updateMultipliers","round","validators","__webpack_require__","e","then","bind","_module","size","cleaned_feature","pool","feature","space_efficiency","validate_efficiency","derived","_component","cleanedComponent","alerts","isFragile","feature_array","some","_val","newDamageCapacity","selected_energy_pool","damage_capacity","push","newWeight","weight","newCost","cost","cost_multiplier","efficiencies","space","isMorphable","undefined","selected_morphable","data","validateComponent","validatedData","loopAlerts","updateList","componentsToValidate","validator","pkey","component_prop","_loopValidators","concat","cost_multipliers","Object","entries","reduce","_multi","total_cost"],"mappings":"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","file":"js/mek_energy_pool_validator.880ec784.js","sourcesContent":["let validators={};\r\n\r\nimport(/* webpackChunkName: \"mek_energy_pool-size-data-module\" */\r\n    \"@/data_table_modules/mek_energy_pool/mek_energy_pool-size-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.size=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_energy_pool-pool-data-module\" */\r\n    \"@/data_table_modules/mek_energy_pool/mek_energy_pool-pool-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.pool=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_energy_pool-feature-data-module\" */\r\n    \"@/data_table_modules/mek_energy_pool/mek_energy_pool-feature-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.feature=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_space-efficiency-data-module\" */\"@/data_table_modules/universal/mek_space-efficiency-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.space_efficiency=_module.validate_efficiency;\r\n});\r\n\r\nlet loopValidators, updateMultipliers, round;\r\nimport(/* webpackChunkName: \"validator_functions\" */\"./validator_functions\")\r\n.then((_module)=>\r\n{\r\n    ({loopValidators, updateMultipliers, round} = _module);\r\n});\r\n\r\nvalidators.derived=(_component)=>\r\n{\r\n    let cleanedComponent=_component;\r\n    let alerts=[];\r\n    //update static values\r\n    let isFragile=cleanedComponent.feature_array.some((_val)=>\r\n    {\r\n        return _val.feature==\"Fragile\";\r\n    });\r\n    let newDamageCapacity=isFragile?1:cleanedComponent.selected_energy_pool.damage_capacity;\r\n    if(cleanedComponent.damage_capacity!=newDamageCapacity)\r\n    {//validate damage capacity\r\n        alerts.push(\"Mek-Energy_Pool: damage_capacity\");\r\n        alerts.push(\"**** Invalid Damage Capacity. Correcting. ****\");\r\n        cleanedComponent.damage_capacity=newDamageCapacity;\r\n    }\r\n    let newWeight=cleanedComponent.selected_energy_pool.damage_capacity/2;\r\n    if(cleanedComponent.weight!=newWeight)\r\n    {//validate weight\r\n        alerts.push(\"Mek-Energy_Pool: weight\");\r\n        alerts.push(\"**** Invalid Weight. Correcting. ****\");\r\n        cleanedComponent.weight=newWeight;\r\n    }\r\n    let newCost=(cleanedComponent.selected_energy_pool.cost * cleanedComponent.cost_multiplier)\r\n            + cleanedComponent.efficiencies.space.cost;\r\n    newCost=round(newCost,2);\r\n    if(cleanedComponent.cost!=newCost)\r\n    {//validate weight\r\n        alerts.push(\"Mek-Energy_Pool: cost\");\r\n        alerts.push(\"**** Invalid Cost. Correcting. ****\");\r\n        cleanedComponent.cost=newCost;\r\n    }\r\n    let isMorphable=cleanedComponent.feature_array.some((_val)=>\r\n    {\r\n        return _val.feature==\"Morphable\";\r\n    });\r\n    switch(true)\r\n    {\r\n        case isMorphable && (cleanedComponent.selected_morphable===undefined || !cleanedComponent.selected_morphable):\r\n        case !isMorphable && cleanedComponent.selected_morphable:\r\n            alerts.push(\"Mek-Energy_Pool: Morphable\");\r\n            alerts.push(\"**** Invalid Morphable data. Correcting. ****\");\r\n            cleanedComponent.selected_morphable=isMorphable;\r\n    }\r\n\r\n    return {data:cleanedComponent,alerts:alerts};\r\n};\r\n\r\nlet validateComponent=(_component)=>\r\n{\r\n    let cleanedComponent=_component;\r\n    let validatedData;\r\n    let updateList=[\"selected_portfolio_size\",\"feature_array\"];\r\n    let loopAlerts;\r\n    let alerts=[];\r\n    //loop thru independent validations\r\n    let componentsToValidate=\r\n    [\r\n        {validator:validators.pool,pkey:\"power_available\",component_prop:\"selected_energy_pool\"},\r\n        {validator:validators.size,pkey:\"size\",component_prop:\"selected_portfolio_size\"},\r\n        {validator:validators.feature,pkey:\"feature\",component_prop:'feature_array'},\r\n    ];\r\n    ({cleanedComponent, loopAlerts} = loopValidators(componentsToValidate, cleanedComponent));\r\n    alerts=alerts.concat(loopAlerts)\r\n    //update cost_multipliers for components needing update\r\n    validatedData=updateMultipliers(updateList,cleanedComponent,\"Mek-Energy_Pool\");\r\n    cleanedComponent.cost_multipliers=validatedData.data;\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    //validate space efficiency\r\n    let cost_multiplier=Object.entries(cleanedComponent.cost_multipliers).reduce((_multi, _val)=>\r\n    {//calc new cost_multiplier\r\n        return _multi*_val[1];\r\n    },1);\r\n    cleanedComponent.cost_multiplier=round(cost_multiplier,2);\r\n    let total_cost=cleanedComponent.selected_energy_pool.cost * cleanedComponent.cost_multiplier;\r\n    validatedData=validators.space_efficiency(cleanedComponent.efficiencies.space, total_cost, \"Mek-Energy_Pool\");\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    cleanedComponent.efficiencies.space=validatedData.data;\r\n    //update derived values\r\n    validatedData=validators.derived(cleanedComponent);\r\n    cleanedComponent=validatedData.data;\r\n    alerts=alerts.concat(validatedData.alerts);\r\n\r\n    return {data:cleanedComponent,alerts:alerts};\r\n};\r\n\r\nexport {validateComponent};"],"sourceRoot":""}