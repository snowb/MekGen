{"version":3,"sources":["webpack:///./src/store/modules/validators/mek_reflector_validator.js"],"names":["__webpack_require__","r","__webpack_exports__","d","validateComponent","round","validators","e","then","bind","_module","reflector","cleaned_feature","space_efficiency","validate_efficiency","derived","_component","cleanedComponent","alerts","damage_capacity","selected_reflector","quality_value","push","weight","newCost","cost","efficiencies","space","data","validatedData","concat","base_cost"],"mappings":"yHAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,sCAAAE,IAAA,IAcIC,EAdAC,EAAW,GAEfN,EAAAO,EAAA,6BAAAC,KAAAR,EAAAS,KAAA,cACCD,KAAK,SAACE,GAEHJ,EAAWK,UAAUD,EAAQE,kBAGjCZ,EAAAO,EAAA,oCAAAC,KAAAR,EAAAS,KAAA,cACCD,KAAK,SAACE,GAEHJ,EAAWO,iBAAiBH,EAAQI,sBAIxCd,EAAAO,EAAA,uBAAAC,KAAAR,EAAAS,KAAA,cACCD,KAAK,SAACE,GAEDL,EAASK,EAATL,QAGNC,EAAWS,QAAQ,SAACC,GAEhB,IAAIC,EAAiBD,EACjBE,EAAO,GAERD,EAAiBE,iBAAiBF,EAAiBG,mBAAmBC,gBAErEH,EAAOI,KAAK,kCACZJ,EAAOI,KAAK,kDACZL,EAAiBE,gBAAgBF,EAAiBG,mBAAmBC,eAEtEJ,EAAiBM,QAAQN,EAAiBE,gBAAgB,IAEzDD,EAAOI,KAAK,yBACZJ,EAAOI,KAAK,yCACZL,EAAiBM,OAAON,EAAiBE,gBAAgB,GAE7D,IAAIK,EAAQP,EAAiBG,mBAAmBK,KAAOR,EAAiBS,aAAaC,MAAMF,KAS3F,OARAD,EAAQnB,EAAMmB,EAAQ,GACnBP,EAAiBQ,MAAMD,IAEtBN,EAAOI,KAAK,uBACZJ,EAAOI,KAAK,uCACZL,EAAiBQ,KAAKD,GAGnB,CAACI,KAAKX,EAAiBC,OAAOA,IAGzC,IAAId,EAAkB,SAACY,GAEnB,IACIa,EADAZ,EAAiBD,EAEjBE,EAAO,GAEXW,EAAcvB,EAAWK,UAAU,gBAAgBM,EAAiBG,oBACpEF,EAAOA,EAAOY,OAAOD,EAAcX,QACnCD,EAAiBG,mBAAmBS,EAAcD,KAElD,IAAIG,EAAUd,EAAiBG,mBAAmBK,KAQlD,OAPAI,EAAcvB,EAAWO,iBAAiBI,EAAiBS,aAAaC,MAAOI,EAAW,iBAC1Fb,EAAOA,EAAOY,OAAOD,EAAcX,QACnCD,EAAiBS,aAAaC,MAAME,EAAcD,KAClDC,EAAcvB,EAAWS,QAAQE,GACjCA,EAAiBY,EAAcD,KAC/BV,EAAOA,EAAOY,OAAOD,EAAcX,QAE5B,CAACU,KAAKX,EAAkBC,OAAOA","file":"js/mek_reflector_validator-legacy.9909c8f5.js","sourcesContent":["let validators={};\r\n\r\nimport(/* webpackChunkName: \"mek_reflector-data-module\" */\"@/data_table_modules/mek_reflector/mek_reflector-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.reflector=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_space-efficiency-data-module\" */\"@/data_table_modules/universal/mek_space-efficiency-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.space_efficiency=_module.validate_efficiency;\r\n});\r\n\r\nlet round;\r\nimport(/* webpackChunkName: \"validator_functions\" */\"./validator_functions\")\r\n.then((_module)=>\r\n{\r\n    ({round} = _module);\r\n});\r\n\r\nvalidators.derived=(_component)=>\r\n{\r\n    let cleanedComponent=_component;\r\n    let alerts=[];\r\n    //update static values\r\n    if(cleanedComponent.damage_capacity!=cleanedComponent.selected_reflector.quality_value)\r\n    {//validate damage capacity\r\n        alerts.push(\"Mek-Reflector: damage_capacity\");\r\n        alerts.push(\"**** Invalid Damage Capacity. Correcting. ****\");\r\n        cleanedComponent.damage_capacity=cleanedComponent.selected_reflector.quality_value;\r\n    }\r\n    if(cleanedComponent.weight!=cleanedComponent.damage_capacity/2)\r\n    {//validate weight\r\n        alerts.push(\"Mek-Reflector: weight\");\r\n        alerts.push(\"**** Invalid Weight. Correcting. ****\");\r\n        cleanedComponent.weight=cleanedComponent.damage_capacity/2;\r\n    }\r\n    let newCost=cleanedComponent.selected_reflector.cost + cleanedComponent.efficiencies.space.cost;\r\n    newCost=round(newCost,2);\r\n    if(cleanedComponent.cost!=newCost)\r\n    {//validate weight\r\n        alerts.push(\"Mek-Reflector: cost\");\r\n        alerts.push(\"**** Invalid Cost. Correcting. ****\");\r\n        cleanedComponent.cost=newCost;\r\n    }\r\n\r\n    return {data:cleanedComponent,alerts:alerts};\r\n};\r\n\r\nlet validateComponent=(_component)=>\r\n{\r\n    let cleanedComponent=_component;\r\n    let validatedData;\r\n    let alerts=[];\r\n    //loop thru independent validations\r\n    validatedData=validators.reflector(\"quality_value\",cleanedComponent.selected_reflector);\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    cleanedComponent.selected_reflector=validatedData.data;\r\n\r\n    let base_cost=cleanedComponent.selected_reflector.cost;\r\n    validatedData=validators.space_efficiency(cleanedComponent.efficiencies.space, base_cost, \"Mek-Reflector\");\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    cleanedComponent.efficiencies.space=validatedData.data;\r\n    validatedData=validators.derived(cleanedComponent);\r\n    cleanedComponent=validatedData.data;\r\n    alerts=alerts.concat(validatedData.alerts);\r\n\r\n    return {data:cleanedComponent, alerts:alerts};\r\n};\r\n\r\nexport {validateComponent};"],"sourceRoot":""}