{"version":3,"sources":["webpack:///./src/store/modules/validators/mek_magazine_validator.js"],"names":["updateMultipliers","round","validators","__webpack_require__","e","then","bind","_module","filter_data_table","ammo","cleaned_feature","derive","_component","cleanedComponent","alerts","newShots","parseInt","selected_shots","push","isNaN","newBaseCost","selected_gun","cost","base_cost","damage_capacity","newCost","cost_multiplier","newWeight","weight","data","validateComponent","updateList","hasBlastRadius","feature_array","some","_feat","test","feature","hasBlast","validatedData","cleaned_array","concat","cost_multipliers","Object","entries","reduce","_multi","_val"],"mappings":"2LAAA,IAUIA,EAAmBC,EAVnBC,EAAW,GAEfC,EAAAC,EAAA,6BAAAC,KAAAF,EAAAG,KAAA,cAECD,KAAME,IAEHL,EAAWM,kBAAkBD,EAAQC,kBACrCN,EAAWO,KAAKF,EAAQG,kBAI5BP,EAAAC,EAAA,uBAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IAEDP,EAA4BO,EAA5BP,kBAAmBC,EAASM,EAATN,QAGzBC,EAAWS,OAAQC,KAEf,IAAIC,EAAiBD,EACjBE,EAAO,GAEPC,EAASC,SAASH,EAAiBI,gBACpCJ,EAAiBI,gBAAgBF,IAEhCD,EAAOI,KAAK,gCACZJ,EAAOI,KAAK,iDACZL,EAAiBI,eAAeE,MAAMJ,GAAY,EAAIA,GAE1D,IAAIK,EAAYnB,EAAyC,IAAnCY,EAAiBQ,aAAaC,KAAUT,EAAiBI,gBAC5EJ,EAAiBU,WAAWH,IAE3BN,EAAOI,KAAK,2BACZJ,EAAOI,KAAK,4CACZL,EAAiBU,UAAUH,GAE5BP,EAAiBW,iBAAiBJ,IAEjCN,EAAOI,KAAK,iCACZJ,EAAOI,KAAK,uDACZL,EAAiBW,gBAAgBJ,GAErC,IAAIK,EAAQL,EAAcP,EAAiBa,gBAC3CD,EAAQxB,EAAMwB,EAAQ,GACnBZ,EAAiBS,MAAMG,IAEtBX,EAAOI,KAAK,sBACZJ,EAAOI,KAAK,uCACZL,EAAiBS,KAAKG,GAE1B,IAAIE,EAAU1B,EAAMmB,EAAY,EAAE,GAOlC,OANGP,EAAiBe,QAAQD,IAExBb,EAAOI,KAAK,wBACZJ,EAAOI,KAAK,yCACZL,EAAiBe,OAAOD,GAErB,CAACE,KAAKhB,EAAiBC,OAAOA,KAGzC,IAAIgB,EAAmBlB,IAEnB,IAAIC,EAAiBD,EACjBmB,EAAW,CAAC,iBACZjB,EAAO,GACPkB,EAAenB,EAAiBoB,cAAcC,KAAMC,IAEpD,MAAO,UAAUC,KAAKD,EAAME,WAEhCnC,EAAWM,kBAAkBwB,GAC1BnB,EAAiByB,UAAUN,IAE1BlB,EAAOI,KAAK,0BACZJ,EAAOI,KAAK,2CACZL,EAAiByB,SAASN,GAG9B,IAAIO,EAAcrC,EAAWO,KAAKI,EAAiBoB,cAAc,QAgBjE,OAfApB,EAAiBoB,cAAcM,EAAcC,cAC7C1B,EAAOA,EAAO2B,OAAOF,EAAczB,QAGnCyB,EAAcvC,EAAkB+B,EAAWlB,EAAiB,gBAC5DA,EAAiB6B,iBAAiBH,EAAcV,KAChDf,EAAOA,EAAO2B,OAAOF,EAAczB,QAEnCD,EAAiBa,gBAAgBiB,OAAOC,QAAQ/B,EAAiB6B,kBAAkBG,OAAO,CAACC,EAAQC,KAE/F,OAAOD,EAAOC,EAAK,IACrB,GACFlC,EAAiBa,gBAAgBzB,EAAMY,EAAiBa,gBAAgB,GACxEb,EAAiBS,KAAKT,EAAiBQ,aAAaC,KAAOT,EAAiBa,gBAErE,CAACG,KAAKhB,EAAiBC,OAAOA","file":"js/mek_magazine_validator.08c0f4d8.js","sourcesContent":["let validators={};\r\n\r\nimport(/* webpackChunkName: \"mek_ammo-list-data-module\" */\r\n    \"@/data_table_modules/mek_magazine/mek_ammo-list-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.filter_data_table=_module.filter_data_table;\r\n    validators.ammo=_module.cleaned_feature;\r\n});\r\n\r\nlet updateMultipliers, round;\r\nimport(/* webpackChunkName: \"validator_functions\" */\"./validator_functions\")\r\n.then((_module)=>\r\n{\r\n    ({updateMultipliers, round} = _module);\r\n});\r\n\r\nvalidators.derive=(_component)=>\r\n{\r\n    let cleanedComponent=_component;\r\n    let alerts=[];\r\n\r\n    let newShots=parseInt(cleanedComponent.selected_shots);\r\n    if(cleanedComponent.selected_shots!=newShots)\r\n    {//validate shots\r\n        alerts.push(\"Mek-Magazine: selected_shots\");\r\n        alerts.push(\"**** Invalid Selected Shots. Correcting. ****\");\r\n        cleanedComponent.selected_shots=isNaN(newShots) ? 1 : newShots;\r\n    }\r\n    let newBaseCost=round(cleanedComponent.selected_gun.cost*0.01*cleanedComponent.selected_shots);\r\n    if(cleanedComponent.base_cost!=newBaseCost)\r\n    {//validate base_cost\r\n        alerts.push(\"Mek-Magazine: base_cost\");\r\n        alerts.push(\"**** Invalid Base Cost. Correcting. ****\");\r\n        cleanedComponent.base_cost=newBaseCost;\r\n    }\r\n    if(cleanedComponent.damage_capacity!=newBaseCost)\r\n    {//validate damage_capacity\r\n        alerts.push(\"Mek-Magazine: damage_capacity\");\r\n        alerts.push(\"**** Invalid Base Damage Capacity. Correcting. ****\");\r\n        cleanedComponent.damage_capacity=newBaseCost;\r\n    }\r\n    let newCost=newBaseCost * cleanedComponent.cost_multiplier;\r\n    newCost=round(newCost,2);\r\n    if(cleanedComponent.cost!=newCost)\r\n    {//validate cost\r\n        alerts.push(\"Mek-Magazine: cost\");\r\n        alerts.push(\"**** Invalid Cost. Correcting. ****\");\r\n        cleanedComponent.cost=newCost;\r\n    }\r\n    let newWeight=round(newBaseCost/2,2);\r\n    if(cleanedComponent.weight!=newWeight)\r\n    {//validate weight\r\n        alerts.push(\"Mek-Magazine: weight\");\r\n        alerts.push(\"**** Invalid Weight. Correcting. ****\");\r\n        cleanedComponent.weight=newWeight;\r\n    }\r\n    return {data:cleanedComponent,alerts:alerts};\r\n};\r\n\r\nlet validateComponent=(_component)=>\r\n{\r\n    let cleanedComponent=_component;\r\n    let updateList=[\"feature_array\"];\r\n    let alerts=[];\r\n    let hasBlastRadius=cleanedComponent.feature_array.some((_feat)=>\r\n    {\r\n        return /blast/gi.test(_feat.feature);\r\n    });\r\n    validators.filter_data_table(hasBlastRadius);\r\n    if(cleanedComponent.hasBlast!=hasBlastRadius)\r\n    {//validate blast radius prop\r\n        alerts.push(\"Mek-Magazine: hasBlast\");\r\n        alerts.push(\"**** Invalid hasBlast. Correcting. ****\");\r\n        cleanedComponent.hasBlast=hasBlastRadius;\r\n    }\r\n    //validate ammo array\r\n    let validatedData=validators.ammo(cleanedComponent.feature_array,\"type\");\r\n    cleanedComponent.feature_array=validatedData.cleaned_array;\r\n    alerts=alerts.concat(validatedData.alerts);\r\n\r\n    //update cost_multipliers for components needing update\r\n    validatedData=updateMultipliers(updateList,cleanedComponent,\"Mek-Magazine\");\r\n    cleanedComponent.cost_multipliers=validatedData.data;\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    //validate space efficiency\r\n    cleanedComponent.cost_multiplier=Object.entries(cleanedComponent.cost_multipliers).reduce((_multi, _val)=>\r\n    {//calc new cost_mulitplier\r\n        return _multi*_val[1];\r\n    },1);\r\n    cleanedComponent.cost_multiplier=round(cleanedComponent.cost_multiplier,2);\r\n    cleanedComponent.cost=cleanedComponent.selected_gun.cost * cleanedComponent.cost_multiplier;\r\n    \r\n    return {data:cleanedComponent,alerts:alerts};\r\n};\r\n\r\nexport {validateComponent};"],"sourceRoot":""}