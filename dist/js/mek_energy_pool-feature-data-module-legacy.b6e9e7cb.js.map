{"version":3,"sources":["webpack:///./src/data_table_modules/mek_energy_pool/mek_energy_pool-feature-data-module.js","webpack:///./node_modules/core-js/modules/es7.array.includes.js","webpack:///./src/data_table_modules/universal/mek_partial-function-data-module.js"],"names":["feature_data_table","feature","cost","data_table_keys","feature_validate","partial_validate","has_feature","partial_has_feature","get_feature","partial_get_feature","cleaned_feature","_feature_array","_pkey","update","key_list","alerts","json_data","JSON","stringify","undefined","push","error","cleaned_array","length","temp_selected_feature_array","reduceRight","_cleaned_array","_val","clean_feature","includes","reverse","$export","__webpack_require__","$includes","P","el","this","arguments","_data_table","_validation_keys","_data","Array","isArray","valid","some","every","_keys","_key","_has_feature","found_feature","_table_val","_this","partial_cleaned_feature","_validator","_get_feature","_default_data","_name","_feature","data","parse"],"mappings":"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","file":"js/mek_energy_pool-feature-data-module-legacy.b6e9e7cb.js","sourcesContent":["//data table module, raw data output for re-use in non-vue-component formats\r\nimport {partial_validate, partial_has_feature, partial_get_feature}\r\n    from \"@/data_table_modules/universal/mek_partial-function-data-module\";\r\n\r\n//create new feature_data_table\r\nlet feature_data_table=\r\n[\r\n    {feature:\"Morphable\",cost:1.25},\r\n    {feature:\"Fragile\",cost:1},\r\n];\r\nlet data_table_keys=[\"feature\",\"cost\"];\r\n\r\n//data validator for feature_data_table\r\n//call partial_validate with appropriate data for full validate\r\nlet feature_validate=partial_validate(feature_data_table, data_table_keys);\r\n\r\n//completed function for checking if data has data\r\nlet has_feature=partial_has_feature(feature_data_table);\r\n\r\n//completed function for returning matching data\r\nlet get_feature=partial_get_feature(feature_data_table, has_feature);\r\n\r\n/*** \r\n * \r\n * find way to switch to partial function\r\n * \r\n * ***/\r\nlet cleaned_feature=function(_feature_array, _pkey)\r\n{\r\n    let update=false;\r\n    let key_list=[];\r\n    let alerts=[];\r\n    let json_data=JSON.stringify(_feature_array);\r\n    if(_feature_array===undefined || _pkey===undefined)\r\n    {\r\n        alerts.push(\"Mek_Energy_Pool-Feature: \");\r\n        let error=_feature_array===undefined\r\n            ? \"**** Missing feature array. Returning blank. ****\"\r\n            : \"**** No primary key provided. Returning blank. ****\";\r\n        alerts.push(error);\r\n        return {cleaned_array:[],update:true,key_list:key_list,alerts:alerts};\r\n    }\r\n\r\n    if(_feature_array.length==0)\r\n    {//no feature selected, return empty\r\n        return {cleaned_array:[],update:update,key_list:key_list,alerts:alerts};\r\n    }    \r\n\r\n    let temp_selected_feature_array=_feature_array.reduceRight((_cleaned_array, _val)=>\r\n    {\r\n        if(_val[_pkey]===undefined)\r\n        {//if feature with pkey doesn't exist in data table, ignore\r\n            alerts.push(\"Mek_Energy_Pool-Feature: \"+json_data);\r\n            alerts.push(\"**** Missing primary key. Ignoring. ****\");\r\n            return _cleaned_array;\r\n        }\r\n        let clean_feature=_val;\r\n        if(!feature_validate(_val))\r\n        {//invalid data\r\n            alerts.push(\"Mek_Energy_Pool-Feature: \"+json_data);\r\n            alerts.push(\"**** Invalid data, attempting to reset. ****\")\r\n            clean_feature=get_feature(_pkey,_val[_pkey]);\r\n            _val=clean_feature;//replace current value with correct value\r\n            update=true;\r\n            //attempt to set to corrected feature\r\n        }\r\n        if(clean_feature===null)\r\n        {//no matching feature\r\n            alerts.push(\"**** Unable to reset. No matching data. ****\")\r\n            update=true;\r\n            return _cleaned_array;\r\n            //ignore element\r\n        }\r\n        if(!key_list.includes(_val[_pkey]))\r\n        {\r\n            _cleaned_array.push(_val);\r\n            key_list.push(_val[_pkey]);\r\n        }\r\n        return _cleaned_array;\r\n    },[]);\r\n    temp_selected_feature_array=temp_selected_feature_array.reverse();\r\n    return {cleaned_array:temp_selected_feature_array,update:update,key_list:key_list,alerts:alerts};\r\n    //returns an object with the pruned feature array, whether it was updated, and the key_list\r\n};\r\n\r\nexport {feature_data_table, feature_validate, has_feature, get_feature, cleaned_feature};\r\n","'use strict';\n// https://github.com/tc39/Array.prototype.includes\nvar $export = require('./_export');\nvar $includes = require('./_array-includes')(true);\n\n$export($export.P, 'Array', {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nrequire('./_add-to-unscopables')('includes');\n","//data table module, raw data output for re-use in non-vue-component formats\r\n\r\n//ATTEMPT: make validators and has_feat and get_feat and cleaned_feat functions \r\n//          neutral and reusable across all data modules\r\n\r\n//partial data validator\r\n//called with data_table and validation_keys in data-module\r\nlet partial_validate=(_data_table,_validation_keys)=>(_data)=>\r\n{//_data_table: Array, array of data to validate against\r\n    //_validation_keys: Array, keys to be compared between passed in data and data_table\r\n    //_data: Object, data to be compared to data table \r\n    if(typeof _data===\"undefined\" || !Array.isArray(_validation_keys) || _validation_keys.length==0)\r\n    {\r\n        return false;\r\n    }\r\n    let valid=_data_table.some((_val)=>\r\n    {\r\n        return _validation_keys.every((_keys)=>\r\n        {//return true if all validation_keys in _data match an element in _data_table\r\n            return _data[_keys]==_val[_keys];\r\n        });\r\n    });\r\n    return valid;\r\n}\r\n\r\n//partial_has_feature, determine if provided data table has matching element with provided key and val\r\n//called in data module to generate full function with local data\r\nlet partial_has_feature=(_data_table)=>(_key, _val)=>\r\n{\r\n    return _data_table.some((_data)=>\r\n    {\r\n        return _data[_key]!==undefined && _data[_key]==_val;\r\n    });\r\n};\r\n\r\n//partial get_feature, returns full function for data module\r\n//requires data_table (array) and module's has_feature function\r\n//returns full matching element in provided data table\r\n//has_feature must exist in data table module\r\nlet partial_get_feature=(_data_table, _has_feature)=>(_key, _val)=>\r\n{\r\n    let found_feature=null;\r\n    if(_has_feature(_key,_val))\r\n    {\r\n        _data_table.some((_table_val)=>\r\n        {\r\n            if(_table_val[_key]==_val)\r\n            {\r\n                found_feature=_table_val;\r\n                return true;\r\n            }\r\n        },this);\r\n    }\r\n    return found_feature;\r\n}\r\n\r\nlet partial_cleaned_feature=(_validator, _has_feature, _get_feature, _default_data, _name)=>(_pkey, _feature)=>\r\n{//input: primary key, selected feature, filtered data table\r\n    let data=undefined;\r\n    let key_list=[];\r\n    let update=false;\r\n    let alerts=[];\r\n    let json_data=JSON.stringify(_feature);\r\n\r\n    if(_feature===undefined || !_has_feature(_pkey,_feature[_pkey]))\r\n    {\r\n        data=_default_data;\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting to default. ****\");\r\n    }\r\n    else if(!_validator(_feature))\r\n    {\r\n        data=JSON.parse(JSON.stringify(_get_feature(_pkey,_feature[_pkey])));\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting. ****\");\r\n    }\r\n    else\r\n    {\r\n        data=JSON.parse(JSON.stringify(_feature));\r\n        key_list=[data[_pkey]];\r\n        update=false;\r\n    }\r\n    return {data:data, key_list:key_list, update:update, alerts:alerts};\r\n}\r\n\r\nexport {partial_validate, partial_has_feature, partial_get_feature, partial_cleaned_feature};\r\n"],"sourceRoot":""}