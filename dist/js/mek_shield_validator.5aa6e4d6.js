(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["mek_shield_validator"],{"574e":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateComponent", function() { return validateComponent; });\n/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ac6a");\n/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0__);\n\nlet validators = {};\n__webpack_require__.e(/* import() | mek_shield-type-data-module */ "mek_shield-type-data-module").then(__webpack_require__.bind(null, "f56b")).then(_module => {\n  validators.type = _module.cleaned_feature;\n});\n__webpack_require__.e(/* import() | mek_shield-binder-data-module */ "mek_shield-binder-data-module").then(__webpack_require__.bind(null, "c30e")).then(_module => {\n  validators.binder = _module.cleaned_feature;\n  validators.create_binder = _module.create_binder_data_table;\n});\n__webpack_require__.e(/* import() | mek_shield-class-data-module */ "mek_shield-class-data-module").then(__webpack_require__.bind(null, "1dc1")).then(_module => {\n  validators.class = _module.cleaned_feature;\n  validators.create_class = _module.create_class_data_table;\n});\n__webpack_require__.e(/* import() | mek_shield-weakness-data-module */ "mek_shield-weakness-data-module").then(__webpack_require__.bind(null, "cf03")).then(_module => {\n  validators.weakness = _module.cleaned_weakness;\n});\n__webpack_require__.e(/* import() | mek_shield-defense-ability-data-module */ "mek_shield-defense-ability-data-module").then(__webpack_require__.bind(null, "a7da")).then(_module => {\n  validators.defense_ability = _module.cleaned_feature;\n});\n__webpack_require__.e(/* import() | mek_shield-reset-time-data-module */ "mek_shield-reset-time-data-module").then(__webpack_require__.bind(null, "abc8")).then(_module => {\n  validators.reset_time = _module.cleaned_feature;\n});\n__webpack_require__.e(/* import() | mek_shield-turns-in-use-data-module */ "mek_shield-turns-in-use-data-module").then(__webpack_require__.bind(null, "11fe")).then(_module => {\n  validators.turns = _module.cleaned_feature;\n});\n__webpack_require__.e(/* import() | mek_armor-type-data-module */ "mek_armor-type-data-module").then(__webpack_require__.bind(null, "e492")).then(_module => {\n  validators.armor_type = _module.cleaned_feature;\n});\n__webpack_require__.e(/* import() | mek_armor-RAM-data-module */ "mek_armor-RAM-data-module").then(__webpack_require__.bind(null, "4277")).then(_module => {\n  validators.armor_RAM = _module.cleaned_feature;\n});\n__webpack_require__.e(/* import() | mek_space-efficiency-data-module */ "mek_space-efficiency-data-module").then(__webpack_require__.bind(null, "16e1")).then(_module => {\n  validators.space_efficiency = _module.validate_efficiency;\n});\nlet loopValidators, updateMultipliers, round;\n__webpack_require__.e(/* import() | validator_functions */ "validator_functions").then(__webpack_require__.bind(null, "07de")).then(_module => {\n  loopValidators = _module.loopValidators;\n  updateMultipliers = _module.updateMultipliers;\n  round = _module.round;\n});\n\nvalidators.derived = _component => {\n  let cleanedComponent = _component;\n  let alerts = [];\n  let validatedData;\n  let updateList;\n\n  switch (cleanedComponent.type.name) {\n    case "Standard":\n      updateList = ["binder", "defense_ability", "armor_type", "absorption"];\n      break;\n\n    case "Active":\n      updateList = ["binder", "armor_type", "absorption"];\n      break;\n\n    case "Reactive":\n      updateList = ["reset_time", "turns_in_use", "weakness_array"];\n  } //update cost_multipliers for components needing update\n\n\n  validatedData = updateMultipliers(updateList, cleanedComponent, "Mek-Shield");\n  cleanedComponent.cost_multipliers = validatedData.data;\n  alerts = alerts.concat(validatedData.alerts); //update cost_multiplier\n\n  let cost_multiplier = Object.entries(cleanedComponent.cost_multipliers).reduce((_multi, _val) => {\n    //calc new cost_multiplier\n    if (["armor_type", "absorption"].includes(_val[0])) {\n      return _multi;\n    }\n\n    return _multi * _val[1];\n  }, 1);\n  cost_multiplier = round(cost_multiplier, 2);\n\n  if (cleanedComponent.cost_multiplier != cost_multiplier) {\n    alerts.push("Mek-Shield: cost_multiplier");\n    alerts.push("**** Invalid Cost Multiplier. Correcting. ****");\n    cleanedComponent.cost_multiplier = round(cost_multiplier, 2);\n  }\n\n  let armor_multiplier = cleanedComponent.cost_multipliers.armor_type * cleanedComponent.cost_multipliers.absorption;\n\n  if (cleanedComponent.armor_multiplier != armor_multiplier) {\n    alerts.push("Mek-Shield: armor_multiplier");\n    alerts.push("**** Invalid Armor Multiplier. Correcting. ****");\n    cleanedComponent.armor_multiplier = round(armor_multiplier, 2);\n  }\n\n  let newWeight = cleanedComponent.shield_class.stopping_power / 2;\n\n  if (cleanedComponent.weight != newWeight) {\n    alerts.push("Mek-Shield: weight");\n    alerts.push("**** Invalid Weight. Correcting. ****");\n    cleanedComponent.weight = newWeight;\n  }\n\n  let newCost = cleanedComponent.shield_class.cost * cost_multiplier * armor_multiplier + cleanedComponent.efficiencies.space.cost;\n  newCost = round(newCost, 2);\n\n  if (cleanedComponent.cost != newCost) {\n    alerts.push("Mek-Shield: cost");\n    alerts.push("**** Invalid Cost. Correcting. ****");\n    cleanedComponent.cost = newCost;\n  }\n\n  let newIsAblative = cleanedComponent.weakness_array === undefined ? false : cleanedComponent.weakness_array.some(_weakness => {\n    return _weakness.weakness == "Ablative";\n  });\n\n  if (cleanedComponent.is_ablative != newIsAblative) {\n    alerts.push("Mek-Shield: is_ablative");\n    alerts.push("**** Invalid Is_Ablative. Correcting. ****");\n    cleanedComponent.is_ablative = newIsAblative;\n  }\n\n  return {\n    data: cleanedComponent,\n    alerts: alerts\n  };\n};\n\nlet validateComponent = _component => {\n  let cleanedComponent = _component;\n  let validatedData;\n  let loopAlerts;\n  let alerts = []; //valid super-master type data\n\n  validatedData = validators.type("name", cleanedComponent.type);\n  alerts = alerts.concat(validatedData.alerts);\n  cleanedComponent.type = validatedData.data; //update shield class data\n\n  validators.create_class(cleanedComponent.type.name.toLowerCase()); //validate shield class data\n\n  validatedData = validators.class("code", cleanedComponent.shield_class);\n  alerts = alerts.concat(validatedData.alerts);\n  cleanedComponent.shield_class = validatedData.data; //update binder data for Standard and Active shields\n\n  if (["Standard", "Active"].includes(cleanedComponent.type.name)) {\n    validators.create_binder(cleanedComponent.shield_class.stopping_power);\n  } //setup validation loopers for shield type\n\n\n  let componentsToValidate = [];\n\n  switch (cleanedComponent.type.name) {\n    case "Standard":\n      componentsToValidate = [{\n        validator: validators.defense_ability,\n        pkey: "da",\n        component_prop: "defense_ability"\n      }];\n    // eslint-disable-next-line\n\n    case "Active":\n      componentsToValidate = [...componentsToValidate, {\n        validator: validators.binder,\n        pkey: "stopping_power_modifier",\n        component_prop: "binder"\n      }, {\n        validator: validators.armor_type,\n        pkey: "type",\n        component_prop: "armor_type"\n      }, {\n        validator: validators.armor_RAM,\n        pkey: "absorption",\n        component_prop: "absorption"\n      }];\n      break;\n\n    case "Reactive":\n      componentsToValidate = [{\n        validator: validators.reset_time,\n        pkey: "time",\n        component_prop: "reset_time"\n      }, {\n        validator: validators.turns,\n        pkey: "time",\n        component_prop: "turns_in_use"\n      }, {\n        validator: validators.weakness,\n        pkey: "weakness",\n        component_prop: "weakness_array"\n      }];\n      break;\n  } //loop thru validations\n\n\n  var _loopValidators = loopValidators(componentsToValidate, cleanedComponent);\n\n  cleanedComponent = _loopValidators.cleanedComponent;\n  loopAlerts = _loopValidators.loopAlerts;\n  alerts = alerts.concat(loopAlerts); //update cost_multipliers for components needing update\n\n  validatedData = validators.derived(cleanedComponent);\n  cleanedComponent = validatedData.data;\n  alerts = alerts.concat(validatedData.alerts); //validate space efficienc\n\n  validatedData = validators.space_efficiency(cleanedComponent.efficiencies.space, cleanedComponent.cost, "Mek-Shield");\n  alerts = alerts.concat(validatedData.alerts);\n  cleanedComponent.efficiencies.space = validatedData.data;\n  return {\n    data: cleanedComponent,\n    alerts: alerts\n  };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///574e\n')}}]);