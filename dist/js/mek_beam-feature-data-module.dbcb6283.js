(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["mek_beam-feature-data-module"],{"706d":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return partial_validate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return partial_has_feature; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return partial_get_feature; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return partial_cleaned_feature; });\n//data table module, raw data output for re-use in non-vue-component formats\n//ATTEMPT: make validators and has_feat and get_feat and cleaned_feat functions \n//          neutral and reusable across all data modules\n//partial data validator\n//called with data_table and validation_keys in data-module\nlet partial_validate = (_data_table, _validation_keys) => _data => {\n  //_data_table: Array, array of data to validate against\n  //_validation_keys: Array, keys to be compared between passed in data and data_table\n  //_data: Object, data to be compared to data table \n  if (typeof _data === "undefined" || !Array.isArray(_validation_keys) || _validation_keys.length == 0) {\n    return false;\n  }\n\n  let valid = _data_table.some(_val => {\n    return _validation_keys.every(_keys => {\n      //return true if all validation_keys in _data match an element in _data_table\n      return _data[_keys] == _val[_keys];\n    });\n  });\n\n  return valid;\n}; //partial_has_feature, determine if provided data table has matching element with provided key and val\n//called in data module to generate full function with local data\n\n\nlet partial_has_feature = _data_table => (_key, _val) => {\n  return _data_table.some(_data => {\n    return _data[_key] !== undefined && _data[_key] == _val;\n  });\n}; //partial get_feature, returns full function for data module\n//requires data_table (array) and module\'s has_feature function\n//returns full matching element in provided data table\n//has_feature must exist in data table module\n\n\nlet partial_get_feature = (_data_table, _has_feature) => (_key, _val) => {\n  let found_feature = null;\n\n  if (_has_feature(_key, _val)) {\n    _data_table.some(_table_val => {\n      if (_table_val[_key] == _val) {\n        found_feature = _table_val;\n        return true;\n      }\n    }, undefined);\n  }\n\n  return found_feature;\n};\n\nlet partial_cleaned_feature = (_validator, _has_feature, _get_feature, _default_data, _name) => (_pkey, _feature) => {\n  //input: primary key, selected feature, filtered data table\n  let data = undefined;\n  let key_list = [];\n  let update = false;\n  let alerts = [];\n  let json_data = JSON.stringify(_feature);\n\n  if (_feature === undefined || !_has_feature(_pkey, _feature[_pkey])) {\n    data = _default_data;\n    key_list = [data[_pkey]];\n    update = true;\n    alerts.push(_name + ": " + json_data);\n    alerts.push("**** Invalid data. Reseting to default. ****");\n  } else if (!_validator(_feature)) {\n    data = JSON.parse(JSON.stringify(_get_feature(_pkey, _feature[_pkey])));\n    key_list = [data[_pkey]];\n    update = true;\n    alerts.push(_name + ": " + json_data);\n    alerts.push("**** Invalid data. Reseting. ****");\n  } else {\n    data = JSON.parse(JSON.stringify(_feature));\n    key_list = [data[_pkey]];\n    update = false;\n  }\n\n  return {\n    data: data,\n    key_list: key_list,\n    update: update,\n    alerts: alerts\n  };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///706d\n')},b8e7:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "feature_data_table", function() { return feature_data_table; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "feature_validate", function() { return feature_validate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "has_feature", function() { return has_feature; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "get_feature", function() { return get_feature; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cleaned_feature", function() { return cleaned_feature; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filter_data_table", function() { return filter_data_table; });\n/* harmony import */ var _data_table_modules_universal_mek_partial_function_data_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("706d");\n//data table module, raw data output for re-use in non-vue-component formats\n //create new feature_data_table\n\nlet raw_feature_data_table = [{\n  feature: "Mag-Fed",\n  cost: 0.9\n}, {\n  feature: "Anti-Missile",\n  cost: 1,\n  exclusive_anti_missile: true\n}, {\n  feature: "Variable Anti-Missile",\n  cost: 1.8,\n  exclusive_anti_missile: true\n}, {\n  feature: "Anti-Personnel",\n  cost: 1.0,\n  exclusive_personnel: true\n}, {\n  feature: "Variable Anti-Personnel",\n  cost: 1.8,\n  exclusive_personnel: true\n}, {\n  feature: "Anti-Missile Anti-Personnel",\n  cost: 1.6,\n  exclusive_personnel: true,\n  exclusive_anti_missile: true\n}, {\n  feature: "All Purpose",\n  cost: 2.6,\n  exclusive_personnel: true,\n  exclusive_anti_missile: true\n}, {\n  feature: "Fragile",\n  cost: 1\n}, {\n  feature: "Long Range",\n  cost: 1.33\n}, {\n  feature: "Hydro",\n  cost: 0.2\n}, {\n  feature: "Mega-Beam",\n  cost: 10\n}, {\n  feature: "Disruptor",\n  cost: 2\n}];\nlet exclusive_anti_missile = raw_feature_data_table.filter(_el => {\n  return _el.exclusive_anti_missile !== undefined;\n});\nlet exclusive_personnel = raw_feature_data_table.filter(_el => {\n  return _el.exclusive_personnel !== undefined;\n});\nlet exclusive_personnel_missile = raw_feature_data_table.filter(_el => {\n  return _el.exclusive_personnel !== undefined && _el.exclusive_anti_missile !== undefined;\n});\nlet data_table_keys = ["feature", "cost", "exclusive_anti_missile", "exclusive_personnel"];\nlet feature_data_table = raw_feature_data_table;\nlet data_cached = false;\n\nlet filter_data_table = _burst_value => {\n  data_cached = false;\n\n  if (_burst_value > 1 || _burst_value == "__INFINITY__") {\n    feature_data_table = raw_feature_data_table;\n    return;\n  }\n\n  feature_data_table = raw_feature_data_table.filter(_val => {\n    return !_val.exclusive_anti_missile;\n  });\n};\n\nlet cached_validate = Object(_data_table_modules_universal_mek_partial_function_data_module__WEBPACK_IMPORTED_MODULE_0__[/* partial_validate */ "d"])(raw_feature_data_table, data_table_keys); //data validator for feature_data_table\n//call partial_validate with appropriate data for full validate\n\nlet feature_validate = _data => {\n  if (data_cached) {\n    return cached_validate(_data);\n  }\n\n  data_cached = true;\n  cached_validate = Object(_data_table_modules_universal_mek_partial_function_data_module__WEBPACK_IMPORTED_MODULE_0__[/* partial_validate */ "d"])(feature_data_table, data_table_keys);\n  return cached_validate(_data);\n}; //completed function for checking if data has data\n\n\nlet has_feature = (_pkey, _data) => {\n  return Object(_data_table_modules_universal_mek_partial_function_data_module__WEBPACK_IMPORTED_MODULE_0__[/* partial_has_feature */ "c"])(feature_data_table)(_pkey, _data);\n}; //completed function for returning matching data\n\n\nlet get_feature = (_pkey, _data) => {\n  return Object(_data_table_modules_universal_mek_partial_function_data_module__WEBPACK_IMPORTED_MODULE_0__[/* partial_get_feature */ "b"])(feature_data_table, has_feature)(_pkey, _data);\n};\n\nlet is_exclusive_feature = function is_exclusive_feature(_exclusive_target, _pkey, _pkey_value) {\n  let exclusive_target_array = null;\n\n  switch (_exclusive_target.toLowerCase()) {\n    case "exclusive_anti_missile":\n      exclusive_target_array = JSON.parse(JSON.stringify(exclusive_anti_missile));\n      break;\n\n    case "exclusive_personnel":\n      exclusive_target_array = JSON.parse(JSON.stringify(exclusive_personnel));\n      break;\n\n    case "exclusive_personnel_missile":\n      exclusive_target_array = JSON.parse(JSON.stringify(exclusive_personnel_missile));\n      break;\n  }\n\n  if (exclusive_target_array === null) {\n    return false;\n  }\n\n  return exclusive_target_array.some(_val => {\n    return _val[_pkey] == _pkey_value;\n  });\n};\n/*****\r\n * *\r\n * *    likely need to setup create_feature_data_table taking Blast_Radius and Smart as input\r\n * *    so claned_feature will remove invalid features\r\n * *\r\n *****/\n\n/*** \r\n * \r\n * find way to switch to partial function\r\n * \r\n * ***/\n\n\nlet cleaned_feature = function cleaned_feature(_feature_array, _pkey) {\n  //takes feature_array, returns cleaned array removing multiple exclusive values\n  let hasExclusivemissile = false;\n  let hasExclusivePersonnel = false;\n  let hasExclusivePersonnelmissile = false;\n  let update = false;\n  let key_list = [];\n  let alerts = [];\n\n  if (_feature_array.length === 0) {\n    return {\n      cleaned_array: [],\n      update: false,\n      key_list: [],\n      alerts: alerts\n    };\n  }\n\n  if (_feature_array === undefined || _pkey === undefined) {\n    alerts.push("Mek_Beam-Feature: ");\n    let error = _feature_array === undefined ? "**** Missing feature array. Returning default. ****" : "**** No primary key provided. Returning default. ****";\n    alerts.push(error);\n    return {\n      cleaned_array: [],\n      update: true,\n      key_list: [],\n      alerts: alerts\n    };\n  }\n\n  let temp_selected_feature_array = _feature_array.reduceRight((_cleaned_array, _val) => {\n    if (_val[_pkey] === undefined) {\n      //if feature with pkey doesn\'t exist in data table, ignore\n      alerts.push("Mek_Beam-Feature: " + JSON.stringify(_val));\n      alerts.push("**** Missing primary key. Ignoring. ****");\n      return _cleaned_array;\n    }\n\n    let clean_feature = _val;\n\n    if (!feature_validate(_val)) {\n      //invalid data\n      alerts.push("Mek_Beam-Feature: " + JSON.stringify(_val));\n      alerts.push("**** Invalid data, attempting to reset. ****");\n      clean_feature = get_feature(_pkey, _val[_pkey]);\n      _val = clean_feature; //replace current value with correct value\n\n      update = true; //attempt to set to corrected feature\n    }\n\n    if (clean_feature === null) {\n      //no matching feature\n      alerts.push("**** Unable to reset. No matching data. ****");\n      update = true;\n      return _cleaned_array; //ignore element\n    }\n\n    let ismissile = is_exclusive_feature("exclusive_anti_missile", _pkey, _val[_pkey]);\n    let isPersonnel = is_exclusive_feature("exclusive_personnel", _pkey, _val[_pkey]);\n    let isPersonnelmissile = is_exclusive_feature("exclusive_personnel_missile", _pkey, _val[_pkey]);\n\n    if (isPersonnelmissile && !hasExclusivePersonnelmissile) {\n      _cleaned_array.push(_val);\n\n      hasExclusivePersonnelmissile = true;\n      hasExclusivePersonnel = true;\n      hasExclusivemissile = true;\n      key_list.push(_val[_pkey]);\n      return _cleaned_array;\n    } else if (isPersonnelmissile && hasExclusivePersonnelmissile) {\n      alerts.push("Mek_Beam-Feature: " + _val);\n      alerts.push("**** Duplicate Exclusive Personnel-Beam data. Ignoring. ****");\n      update = true;\n      return _cleaned_array;\n    }\n\n    if (ismissile && !hasExclusivemissile) {\n      _cleaned_array.push(_val);\n\n      hasExclusivemissile = true;\n      hasExclusivePersonnelmissile = true;\n      key_list.push(_val[_pkey]);\n      return _cleaned_array;\n    } else if (ismissile && hasExclusivemissile) {\n      alerts.push("Mek_Beam-Feature: " + _val);\n      alerts.push("**** Duplicate Exclusive missile data. Ignoring. ****");\n      update = true;\n      return _cleaned_array;\n    }\n\n    if (isPersonnel && !hasExclusivePersonnel) {\n      _cleaned_array.push(_val);\n\n      hasExclusivePersonnel = true;\n      hasExclusivePersonnelmissile = true;\n      key_list.push(_val[_pkey]);\n      return _cleaned_array;\n    } else if (isPersonnel && hasExclusivePersonnel) {\n      alerts.push("Mek_Beam-Feature: " + _val);\n      alerts.push("**** Duplicate Exclusive Anti-Personnel data. Ignoring. ****");\n      update = true;\n      return _cleaned_array;\n    }\n\n    if (!key_list.includes(_val[_pkey])) {\n      _cleaned_array.push(_val);\n\n      key_list.push(_val[_pkey]);\n    }\n\n    return _cleaned_array;\n  }, []);\n\n  temp_selected_feature_array = temp_selected_feature_array.reverse();\n\n  if (temp_selected_feature_array.length == 0) {\n    //empty, reset to default\n    temp_selected_feature_array = [];\n    update = true;\n    key_list = [];\n    alerts.push("Mek_Beam-Feature: ");\n    alerts.push("**** Reseting to default ****");\n  }\n\n  return {\n    cleaned_array: temp_selected_feature_array,\n    update: update,\n    key_list: key_list,\n    alerts: alerts\n  }; //returns an object with the pruned feature array, whether it was updated, and the key_list\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///b8e7\n')}}]);