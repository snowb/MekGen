{"version":3,"sources":["webpack:///./src/store/modules/validators/mek_emw_validator.js"],"names":["loopValidators","updateMultipliers","round","validators","__webpack_require__","e","then","bind","_module","accuracy","cleaned_feature","attack_factor","damage","update_damage","create_damage_data_table","filter_feature","filter_data_table","feature","turns_in_use","space_efficiency","validate_efficiency","derived","_component","_isVarBeamShield","_isBeamShield","validatedData","cleanedComponent","alerts","updateList","cost_multipliers","data","concat","cost_multiplier","Object","entries","reduce","_multi","_val","push","newDamageCapacity","selected_damage","cost","damage_capacity","newWeight","weight","newCost","newBeamShield","stopping_power","defense_accuracy","selected_accuracy","undefined","beam_shield","validateComponent","loopAlerts","selected_turns_in_use","turns","feature_array","cleaned_array","isVariableBeamShield","isBeamShield","some","_feat","test","componentsToValidate","validator","pkey","component_prop","_loopValidators","total_cost","efficiencies","space"],"mappings":"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","file":"js/mek_emw_validator.600ea7db.js","sourcesContent":["let validators={};\r\n\r\nimport(/* webpackChunkName: \"mek_emw-accuracy-data-module\" */\"@/data_table_modules/mek_emw/mek_emw-accuracy-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.accuracy=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_emw-attack-factor-data-module\" */\"@/data_table_modules/mek_emw/mek_emw-attack-factor-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.attack_factor=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_emw-damage-data-module\" */\"@/data_table_modules/mek_emw/mek_emw-damage-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.damage=_module.cleaned_feature;\r\n    validators.update_damage=_module.create_damage_data_table;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_emw-feature-data-module\" */\"@/data_table_modules/mek_emw/mek_emw-feature-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.filter_feature=_module.filter_data_table;//filter based on burst_value\r\n    validators.feature=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_emw-turns-in-use-data-module\" */\"@/data_table_modules/mek_emw/mek_emw-turns-in-use-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.turns_in_use=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_space-efficiency-data-module\" */\"@/data_table_modules/universal/mek_space-efficiency-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.space_efficiency=_module.validate_efficiency;\r\n});\r\n\r\nlet loopValidators, updateMultipliers, round;\r\nimport(/* webpackChunkName: \"validator_functions\" */\"./validator_functions\")\r\n.then((_module)=>\r\n{\r\n    ({loopValidators, updateMultipliers, round} = _module);\r\n});\r\n\r\nvalidators.derived=(_component, _isVarBeamShield, _isBeamShield)=>\r\n{\r\n    let cleanedComponent=_component;\r\n    let alerts=[];\r\n    let validatedData;\r\n    let updateList=[\"selected_turns_in_use\",\"selected_accuracy\",\"selected_attack_factor\",\"feature_array\"];\r\n    //update cost_multipliers for components needing update\r\n    validatedData=updateMultipliers(updateList,cleanedComponent,\"Mek-EMW\");\r\n    cleanedComponent.cost_multipliers=validatedData.data;\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    //update cost_multiplier\r\n    let cost_multiplier=Object.entries(cleanedComponent.cost_multipliers).reduce((_multi, _val)=>\r\n    {//calc new cost_multiplier\r\n        return _multi*_val[1];\r\n    },1);\r\n    if(cleanedComponent.cost_multiplier!=cost_multiplier)\r\n    {\r\n        alerts.push(\"Mek-EMW: cost_multiplier\");\r\n        alerts.push(\"**** Invalid Cost Multiplier. Correcting. ****\");\r\n        cleanedComponent.cost_multiplier=round(cost_multiplier,2);\r\n    }\r\n    let newDamageCapacity=cleanedComponent.selected_damage.cost/4;\r\n    if(cleanedComponent.damage_capacity!=newDamageCapacity)\r\n    {\r\n        alerts.push(\"Mek-EMW: damage_capacity\");\r\n        alerts.push(\"**** Invalid Damage Capacity. Correcting. ****\");\r\n        cleanedComponent.damage_capacity=newDamageCapacity;\r\n    }\r\n    let newWeight=newDamageCapacity/2;\r\n    if(cleanedComponent.weight!=newWeight)\r\n    {\r\n        alerts.push(\"Mek-EMW: weight\");\r\n        alerts.push(\"**** Invalid Weight. Correcting. ****\");\r\n        cleanedComponent.weight=newWeight;\r\n    }\r\n    let newCost=cleanedComponent.selected_damage.cost * cost_multiplier;\r\n    if(cleanedComponent.cost!=newCost)\r\n    {\r\n        alerts.push(\"Mek-EMW: cost\");\r\n        alerts.push(\"**** Invalid cost. Correcting. ****\");\r\n        cleanedComponent.cost=newCost;\r\n    }\r\n    let newBeamShield={\r\n            stopping_power:cleanedComponent.selected_damage.cost, \r\n            defense_accuracy:cleanedComponent.selected_accuracy.accuracy-2,\r\n            damage: cleanedComponent.selected_damage.damage\r\n        };\r\n    if(cleanedComponent.beam_shield===undefined && _isBeamShield)\r\n    {\r\n        alerts.push(\"Mek-EMW: beam_shield\");\r\n        alerts.push(\"**** Beam Shield data missing. Correcting. ****\");\r\n        cleanedComponent.beam_shield=newBeamShield;\r\n    }\r\n    if(cleanedComponent.beam_shield.stopping_power!=newBeamShield.stopping_power)\r\n    {\r\n        alerts.push(\"Mek-EMW: beam_shield.stopping_power\");\r\n        alerts.push(\"**** Invalid Beam Shield Stopping Power: Correcting. ****\");\r\n        cleanedComponent.beam_shield.stopping_power=newBeamShield.stopping_power;\r\n    }\r\n    if(cleanedComponent.beam_shield.defense_accuracy!=newBeamShield.defense_accuracy)\r\n    {\r\n        alerts.push(\"Mek-EMW: beam_shield.defense_accuracy\");\r\n        alerts.push(\"**** Invalid Beam Shield Defense Accuracy: Correcting. ****\");\r\n        cleanedComponent.beam_shield.defense_accuracy=newBeamShield.defense_accuracy;\r\n    }\r\n    if(cleanedComponent.beam_shield.damage!=newBeamShield.damage)\r\n    {\r\n        alerts.push(\"Mek-EMW: beam_shield.damage\");\r\n        alerts.push(\"**** Invalid Beam Shield Damage: Correcting. ****\");\r\n        cleanedComponent.beam_shield.damage=newBeamShield.damage;\r\n    }\r\n\r\n    return {data:cleanedComponent, alerts:alerts};\r\n};\r\n\r\nlet validateComponent=(_component)=>\r\n{\r\n    let cleanedComponent=_component;\r\n    let validatedData;\r\n    let loopAlerts;\r\n    let alerts=[];\r\n    //validate turns in use as feature array is dependent\r\n    validatedData=validators.turns_in_use(\"turns\",cleanedComponent.selected_turns_in_use);\r\n    cleanedComponent.selected_turns_in_use=validatedData.data;\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    //update feature table\r\n    validators.filter_feature(cleanedComponent.selected_turns_in_use.turns==\"__INFINITY__\");\r\n    //validate feature_array, as selected_damage is dependent\r\n    validatedData=validators.feature(cleanedComponent.feature_array,\"feature\");\r\n    cleanedComponent.feature_array=validatedData.cleaned_array;\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    //update isBeamShield and isVariableBeamShield\r\n    let isVariableBeamShield=false;\r\n    let isBeamShield=cleanedComponent.feature_array.some((_feat)=>\r\n    {\r\n        if(/.*variable.*beam.*shield.*/gi.test(_feat.feature))\r\n        {\r\n            isVariableBeamShield=true;\r\n        }\r\n        return /.*beam.*shield.*/gi.test(_feat.feature);\r\n    });\r\n    //update damage validator\r\n    validators.update_damage(isBeamShield && !isVariableBeamShield);\r\n    //loop thru other validations\r\n    let componentsToValidate=\r\n    [\r\n        {validator:validators.damage,pkey:\"cost\",component_prop:\"selected_damage\"},\r\n        {validator:validators.accuracy,pkey:\"accuracy\",component_prop:'selected_accuracy'},\r\n        {validator:validators.attack_factor,pkey:\"attack_factor\",component_prop:'selected_attack_factor'},\r\n    ];\r\n    ({cleanedComponent, loopAlerts} = loopValidators(componentsToValidate, cleanedComponent));\r\n    alerts=alerts.concat(loopAlerts)\r\n    \r\n    //call validators.derived() here\r\n    validatedData=validators.derived(cleanedComponent, isVariableBeamShield, isBeamShield);\r\n    cleanedComponent=validatedData.data;\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    \r\n    let total_cost=cleanedComponent.selected_damage.cost * cleanedComponent.cost_multiplier;\r\n    //update space efficiency\r\n    validatedData=validators.space_efficiency(cleanedComponent.efficiencies.space, total_cost, \"Mek-EMW\");\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    cleanedComponent.efficiencies.space=validatedData.data;\r\n\r\n    return {data:cleanedComponent,alerts:alerts};\r\n};\r\n\r\nexport {validateComponent};"],"sourceRoot":""}