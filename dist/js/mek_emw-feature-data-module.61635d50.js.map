{"version":3,"sources":["webpack:///./src/data_table_modules/universal/mek_partial-function-data-module.js","webpack:///./src/data_table_modules/mek_emw/mek_emw-feature-data-module.js"],"names":["__webpack_require__","d","__webpack_exports__","partial_validate","partial_has_feature","partial_get_feature","partial_cleaned_feature","_data_table","_validation_keys","_data","Array","isArray","length","valid","some","_val","every","_keys","_key","undefined","_has_feature","found_feature","_table_val","_validator","_get_feature","_default_data","_name","_pkey","_feature","data","key_list","update","alerts","json_data","JSON","stringify","parse","push","r","feature_data_table","feature_validate","has_feature","get_feature","exclusive_beam","cleaned_feature","filter_data_table","_data_table_modules_universal_mek_partial_function_data_module__WEBPACK_IMPORTED_MODULE_0__","raw_feature_data_table","feature","cost","exclusive_beam_shield","filter","_el","data_table_keys","data_cached","_infinite_use","cached_validate","is_exclusive_feature","_exclusive_target","_pkey_value","exclusive_target_array","toLowerCase","_feature_array","hasExclusiveBeam","error","cleaned_array","temp_selected_feature_array","reduceRight","_cleaned_array","clean_feature","isBeam","includes","reverse"],"mappings":"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","file":"js/mek_emw-feature-data-module.61635d50.js","sourcesContent":["//data table module, raw data output for re-use in non-vue-component formats\r\n\r\n//ATTEMPT: make validators and has_feat and get_feat and cleaned_feat functions \r\n//          neutral and reusable across all data modules\r\n\r\n//partial data validator\r\n//called with data_table and validation_keys in data-module\r\nlet partial_validate=(_data_table,_validation_keys)=>(_data)=>\r\n{//_data_table: Array, array of data to validate against\r\n    //_validation_keys: Array, keys to be compared between passed in data and data_table\r\n    //_data: Object, data to be compared to data table \r\n    if(typeof _data===\"undefined\" || !Array.isArray(_validation_keys) || _validation_keys.length==0)\r\n    {\r\n        return false;\r\n    }\r\n    let valid=_data_table.some((_val)=>\r\n    {\r\n        return _validation_keys.every((_keys)=>\r\n        {//return true if all validation_keys in _data match an element in _data_table\r\n            return _data[_keys]==_val[_keys];\r\n        });\r\n    });\r\n    return valid;\r\n}\r\n\r\n//partial_has_feature, determine if provided data table has matching element with provided key and val\r\n//called in data module to generate full function with local data\r\nlet partial_has_feature=(_data_table)=>(_key, _val)=>\r\n{\r\n    return _data_table.some((_data)=>\r\n    {\r\n        return _data[_key]!==undefined && _data[_key]==_val;\r\n    });\r\n};\r\n\r\n//partial get_feature, returns full function for data module\r\n//requires data_table (array) and module's has_feature function\r\n//returns full matching element in provided data table\r\n//has_feature must exist in data table module\r\nlet partial_get_feature=(_data_table, _has_feature)=>(_key, _val)=>\r\n{\r\n    let found_feature=null;\r\n    if(_has_feature(_key,_val))\r\n    {\r\n        _data_table.some((_table_val)=>\r\n        {\r\n            if(_table_val[_key]==_val)\r\n            {\r\n                found_feature=_table_val;\r\n                return true;\r\n            }\r\n        },this);\r\n    }\r\n    return found_feature;\r\n}\r\n\r\nlet partial_cleaned_feature=(_validator, _has_feature, _get_feature, _default_data, _name)=>(_pkey, _feature)=>\r\n{//input: primary key, selected feature, filtered data table\r\n    let data=undefined;\r\n    let key_list=[];\r\n    let update=false;\r\n    let alerts=[];\r\n    let json_data=JSON.stringify(_feature);\r\n\r\n    if(_feature===undefined || !_has_feature(_pkey,_feature[_pkey]))\r\n    {\r\n        data=_default_data;\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting to default. ****\");\r\n    }\r\n    else if(!_validator(_feature))\r\n    {\r\n        data=JSON.parse(JSON.stringify(_get_feature(_pkey,_feature[_pkey])));\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting. ****\");\r\n    }\r\n    else\r\n    {\r\n        data=JSON.parse(JSON.stringify(_feature));\r\n        key_list=[data[_pkey]];\r\n        update=false;\r\n    }\r\n    return {data:data, key_list:key_list, update:update, alerts:alerts};\r\n}\r\n\r\nexport {partial_validate, partial_has_feature, partial_get_feature, partial_cleaned_feature};\r\n","//data table module, raw data output for re-use in non-vue-component formats\r\nimport {partial_validate, partial_has_feature, partial_get_feature} \r\n    from \"@/data_table_modules/universal/mek_partial-function-data-module\";\r\n\r\n//create new feature_data_table\r\nlet raw_feature_data_table=\r\n[\r\n    {feature:\"Rechargeable\",cost:1.1},\r\n    {feature:\"Thrown\",cost:1.2},\r\n    {feature:\"Quick\",cost:2},\r\n    {feature:\"Hyper\",cost:7.5},\r\n    {feature:\"Beam Shield\",cost:1.5,exclusive_beam_shield:true},\r\n    {feature:\"Variable Beam Shield\",cost:2,exclusive_beam_shield:true}\r\n];\r\nlet exclusive_beam=raw_feature_data_table.filter((_el)=>{return typeof _el.exclusive_beam_shield!==\"undefined\";});\r\nlet data_table_keys=[\"feature\",\"cost\",\"exclusive_beam_shield\"];\r\n\r\nlet feature_data_table=raw_feature_data_table;\r\nlet data_cached=false;\r\n\r\nlet filter_data_table=(_infinite_use)=>\r\n{\r\n    data_cached=false;\r\n    if(_infinite_use)\r\n    {\r\n        feature_data_table=raw_feature_data_table.filter((_val)=>\r\n        {\r\n            return _val.feature!=\"Rechargeable\";\r\n        });\r\n    }\r\n    else\r\n    {\r\n        feature_data_table=raw_feature_data_table;\r\n    }\r\n};\r\n\r\nlet cached_validate=partial_validate(raw_feature_data_table, data_table_keys);\r\n//data validator for feature_data_table\r\n//call partial_validate with appropriate data for full validate\r\nlet feature_validate=(_data)=>\r\n{\r\n    if(data_cached)\r\n    {\r\n        return cached_validate(_data);\r\n    }\r\n    data_cached=true;\r\n    cached_validate=partial_validate(feature_data_table, data_table_keys);\r\n    return cached_validate(_data);\r\n};\r\n\r\n//completed function for checking if data has data\r\nlet has_feature=(_pkey,_data)=>\r\n{\r\n    return partial_has_feature(feature_data_table)(_pkey,_data);\r\n};\r\n\r\n//completed function for returning matching data\r\nlet get_feature=(_pkey,_data)=>\r\n{\r\n    return partial_get_feature(feature_data_table, has_feature)(_pkey,_data);\r\n};\r\n\r\nlet is_exclusive_feature=function(_exclusive_target, _pkey, _pkey_value)\r\n{\r\n    let exclusive_target_array=null;\r\n    switch(_exclusive_target.toLowerCase())\r\n    {\r\n        case \"exclusive_beam\":\r\n            exclusive_target_array=exclusive_beam;\r\n            break;\r\n    }\r\n    if(exclusive_target_array===null)\r\n    {\r\n        return false;\r\n    }\r\n    return exclusive_target_array.some((_val)=>\r\n    {\r\n        return _val[_pkey]==_pkey_value;\r\n    });\r\n};\r\n\r\nlet cleaned_feature=function(_feature_array, _pkey)\r\n{//takes feature_array, returns cleaned array removing multiple exclusive values\r\n    let hasExclusiveBeam=false;\r\n    let update=false;\r\n    let key_list=[];\r\n    let alerts=[];\r\n\r\n    if(_feature_array===undefined || _pkey===undefined)\r\n    {\r\n        alerts.push(\"Mek_EMW-Feature: \");\r\n        let error=_feature_array===undefined\r\n            ? \"**** Missing feature array. Returning blank. ****\"\r\n            : \"**** No primary key provided. Returning blank. ****\";\r\n        alerts.push(error);\r\n        return {cleaned_array:[],update:true,key_list:[],alerts:alerts};\r\n    }\r\n\r\n    let temp_selected_feature_array=_feature_array.reduceRight((_cleaned_array, _val)=>\r\n    {\r\n        if(_val[_pkey]===undefined)\r\n        {//if feature with pkey doesn't exist in data table, ignore\r\n            alerts.push(\"Mek_EMW-Feature: \"+JSON.stringify(_val));\r\n            alerts.push(\"**** Missing primary key. Ignoring. ****\");\r\n            return _cleaned_array;\r\n        }\r\n        let clean_feature=_val;\r\n        if(!feature_validate(_val))\r\n        {//invalid data\r\n            alerts.push(\"Mek_EMW-Feature: \"+JSON.stringify(_val))\r\n            alerts.push(\"**** Invalid data, attempting to reset. ****\")\r\n            clean_feature=get_feature(_pkey,_val[_pkey]);\r\n            update=true;\r\n            //attempt to set to corrected feature\r\n        }\r\n        if(clean_feature===null)\r\n        {//no matching feature\r\n            alerts.push(\"**** Unable to reset. No matching data. ****\")\r\n            update=true;\r\n            return _cleaned_array;\r\n            //ignore element\r\n        }\r\n        let isBeam=is_exclusive_feature(\"exclusive_beam\",_pkey,_val[_pkey]);\r\n\r\n        if(isBeam && !hasExclusiveBeam)\r\n        {\r\n            _cleaned_array.push(_val);\r\n            hasExclusiveBeam=true;\r\n            key_list.push(_val[_pkey]);\r\n            return _cleaned_array;\r\n        }\r\n        else if(isBeam && hasExclusiveBeam)\r\n        {\r\n            alerts.push(\"Mek_EMW-Feature: \"+_val);\r\n            alerts.push(\"**** Duplicate exclusive EMW data. Ignoring. ****\");\r\n            update=true;\r\n            return _cleaned_array;\r\n        }\r\n\r\n        if(!key_list.includes(_val[_pkey]))\r\n        {\r\n            _cleaned_array.push(_val);\r\n            key_list.push(_val[_pkey]);\r\n        }\r\n        return _cleaned_array;\r\n    },[]);\r\n    temp_selected_feature_array.reverse();\r\n\r\n    return {cleaned_array:temp_selected_feature_array,update:update,key_list:key_list,alerts:alerts};\r\n    //returns an object with the pruned feature array, whether it was updated, and the key_list\r\n}\r\n\r\nexport {feature_data_table, feature_validate, has_feature, get_feature, exclusive_beam, cleaned_feature, filter_data_table};\r\n"],"sourceRoot":""}