{"version":3,"sources":["webpack:///./src/store/modules/validators/mek_projectile_validator.js"],"names":["loopValidators","updateMultipliers","round","validators","__webpack_require__","e","then","bind","_module","accuracy","cleaned_feature","damage","feature","feature_filter","filter_data_table","range_mod","udpate_range_mod","create_range_mod_data_table","multi_feed","burst_value","space_efficiency","validate_efficiency","derived","_component","validatedData","cleanedComponent","alerts","updateList","cost_multipliers","data","concat","cost_multiplier","Object","entries","reduce","_multi","_val","push","newDamageCapacity","selected_damage","damage_capacity","newWeight","weight","newCost","cost","efficiencies","space","validateComponent","loopAlerts","componentsToValidate","validator","pkey","component_prop","_loopValidators","selected_burst_value","range","_loopValidators2"],"mappings":"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","file":"js/mek_projectile_validator.26e41a0b.js","sourcesContent":["let validators = {};\r\n\r\nimport(/* webpackChunkName: \"mek_projectile-accuracy-data-module\" */\"@/data_table_modules/mek_projectile/mek_projectile-accuracy-data-module\")\r\n  .then((_module) => {\r\n    validators.accuracy = _module.cleaned_feature;\r\n  });\r\n\r\nimport(/* webpackChunkName: \"mek_projectile-damage-data-module\" */\"@/data_table_modules/mek_projectile/mek_projectile-damage-data-module\")\r\n  .then((_module) => {\r\n    validators.damage = _module.cleaned_feature;\r\n  });\r\n\r\nimport(/* webpackChunkName: \"mek_projectile-feature-data-module\" */\"@/data_table_modules/mek_projectile/mek_projectile-feature-data-module\")\r\n  .then((_module) => {\r\n    validators.feature = _module.cleaned_feature;\r\n    validators.feature_filter = _module.filter_data_table;\r\n  });\r\n\r\nimport(/* webpackChunkName: \"mek_projectile-range-mod-data-module\" */\"@/data_table_modules/mek_projectile/mek_projectile-range-mod-data-module\")\r\n  .then((_module) => {\r\n    validators.range_mod = _module.cleaned_feature;\r\n    validators.udpate_range_mod = _module.create_range_mod_data_table;\r\n  });\r\n\r\nimport(/* webpackChunkName: \"mek_projectile-multi-feed-data-module\" */\"@/data_table_modules/mek_projectile/mek_projectile-multi-feed-data-module\")\r\n  .then((_module) => {\r\n    validators.multi_feed = _module.cleaned_feature;\r\n  });\r\n\r\nimport(/* webpackChunkName: \"mek_projectile-burst-value-data-module\" */\"@/data_table_modules/mek_projectile/mek_projectile-burst-value-data-module\")\r\n  .then((_module) => {\r\n    validators.burst_value = _module.cleaned_feature;\r\n  });\r\n\r\nimport(/* webpackChunkName: \"mek_space-efficiency-data-module\" */\"@/data_table_modules/universal/mek_space-efficiency-data-module\")\r\n  .then((_module) => {\r\n    validators.space_efficiency = _module.validate_efficiency;\r\n  });\r\n\r\nlet loopValidators, updateMultipliers, round;\r\nimport(/* webpackChunkName: \"validator_functions\" */\"./validator_functions\")\r\n  .then((_module) => {\r\n    ({ loopValidators, updateMultipliers, round } = _module);\r\n  });\r\n\r\nvalidators.derived = (_component) => {\r\n  let cleanedComponent = _component;\r\n  let alerts = [];\r\n  let validatedData;\r\n  let updateList = \r\n    [\r\n      \"selected_accuracy\", \r\n      \"feature_array\",\r\n      \"selected_range_mod\",\r\n      \"selected_burst_value\",\r\n      \"selected_multi_feed\"\r\n    ];\r\n  //update cost_multipliers for components needing update\r\n  validatedData = updateMultipliers(updateList, cleanedComponent, \"Mek-Projectile\");\r\n  cleanedComponent.cost_multipliers = validatedData.data;\r\n  alerts = alerts.concat(validatedData.alerts);\r\n  //update cost_multiplier\r\n  let cost_multiplier = Object.entries(cleanedComponent.cost_multipliers).reduce((_multi, _val) => {//calc new cost_multiplier\r\n    return _multi * _val[1];\r\n  }, 1);\r\n  cost_multiplier = round(cost_multiplier, 2);\r\n  if (cleanedComponent.cost_multiplier != cost_multiplier) {\r\n    alerts.push(\"Mek-Projectile: cost_multiplier\");\r\n    alerts.push(\"**** Invalid Cost Multiplier. Correcting. ****\");\r\n    cleanedComponent.cost_multiplier = round(cost_multiplier, 2);\r\n  }\r\n  let newDamageCapacity = cleanedComponent.selected_damage.damage;\r\n  if (cleanedComponent.damage_capacity != newDamageCapacity) {\r\n    alerts.push(\"Mek-Projectile: damage_capacity\");\r\n    alerts.push(\"**** Invalid Damage Capacity. Correcting. ****\");\r\n    cleanedComponent.damage_capacity = newDamageCapacity;\r\n  }\r\n  let newWeight = round(newDamageCapacity / 2,2);\r\n  if (cleanedComponent.weight != newWeight) {\r\n    alerts.push(\"Mek-Projectile: weight\");\r\n    alerts.push(\"**** Invalid Weight. Correcting. ****\");\r\n    cleanedComponent.weight = newWeight;\r\n  }\r\n  let newCost = (cleanedComponent.selected_damage.cost * cost_multiplier) + cleanedComponent.efficiencies.space.cost;\r\n  newCost = round(newCost, 2);\r\n  if (cleanedComponent.cost != newCost) {\r\n    alerts.push(\"Mek-Projectile: cost\");\r\n    alerts.push(\"**** Invalid Cost. Correcting. ****\");\r\n    cleanedComponent.cost = newCost;\r\n  }\r\n\r\n\r\n  return { data: cleanedComponent, alerts: alerts };\r\n};\r\n\r\nlet validateComponent = (_component) => {\r\n  let cleanedComponent = _component;\r\n  let validatedData;\r\n  let loopAlerts;\r\n  let alerts = [];\r\n  //loop thru independent validations\r\n  let componentsToValidate =\r\n    [\r\n      { validator: validators.damage, pkey: \"damage\", component_prop: \"selected_damage\" },\r\n      { validator: validators.accuracy, pkey: \"accuracy\", component_prop: 'selected_accuracy' },\r\n      { validator: validators.burst_value, pkey: \"burst_value\", component_prop: 'selected_burst_value' },\r\n      { validator: validators.multi_feed, pkey: \"feeds\", component_prop: 'selected_multi_feed' },\r\n    ];\r\n  ({ cleanedComponent, loopAlerts } = loopValidators(componentsToValidate, cleanedComponent));\r\n  alerts = alerts.concat(loopAlerts)\r\n\r\n  //update feature filter, dependent on burst_value\r\n  validators.feature_filter(cleanedComponent.selected_burst_value.burst_value);\r\n  //update range_mod, dependent on base_range from damage\r\n  validators.udpate_range_mod(cleanedComponent.selected_damage.range);\r\n  //loop thru dependent validators\r\n  componentsToValidate =\r\n    [\r\n      { validator: validators.feature, pkey: \"feature\", component_prop: \"feature_array\" },\r\n      { validator: validators.range_mod, pkey: \"range_mod\", component_prop: 'selected_range_mod' },\r\n    ];\r\n  ({ cleanedComponent, loopAlerts } = loopValidators(componentsToValidate, cleanedComponent));\r\n  alerts = alerts.concat(loopAlerts)\r\n\r\n  //update cost_multipliers for components needing update\r\n  validatedData = validators.derived(cleanedComponent);\r\n  cleanedComponent = validatedData.data;\r\n  alerts = alerts.concat(validatedData.alerts);\r\n  //validate space efficienc\r\n  validatedData = validators.space_efficiency(cleanedComponent.efficiencies.space, cleanedComponent.cost, \"Mek-Projectile\");\r\n  alerts = alerts.concat(validatedData.alerts);\r\n  cleanedComponent.efficiencies.space = validatedData.data;\r\n\r\n  return { data: cleanedComponent, alerts: alerts };\r\n};\r\n\r\nexport { validateComponent };"],"sourceRoot":""}