{"version":3,"sources":["webpack:///./src/components/mek_energy_pool/subcomponents/mek_energy_pool-feature.vue?e2e3","webpack:///./src/components/data_table_modules/mek_energy_pool/mek_energy_pool-feature-data-module.js","webpack:///src/components/mek_energy_pool/subcomponents/mek_energy_pool-feature.vue","webpack:///./src/components/mek_energy_pool/subcomponents/mek_energy_pool-feature.vue?bd6e","webpack:///./src/components/mek_energy_pool/subcomponents/mek_energy_pool-feature.vue","webpack:///./src/mixins/alerts_mixin.js","webpack:///./src/components/data_table_modules/universal/mek_partial-function-data-module.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","items","feature_table","pkey","selected-keys","selected_keys","headers","feature","cost","show-headers","format","name","flow","on","update-selected-data","select_feature","staticRenderFns","feature_data_table","data_table_keys","feature_validate","partial_validate","has_feature","partial_has_feature","get_feature","partial_get_feature","cleaned_feature","_feature_array","_pkey","update","key_list","alerts","json_data","JSON","stringify","undefined","push","error","cleaned_array","length","temp_selected_feature_array","reduceRight","_cleaned_array","_val","clean_feature","includes","reverse","mek_energy_pool_featurevue_type_script_lang_js_","props","mixins","utility_mixin","alerts_mixin","components","mek-sub-component-table","__webpack_require__","e","then","bind","data","obj","selected_feature_array","suppressAlerts","methods","_selected_feature","new_selected_feature_array","toggleFeature","cleaned_data","forEach","_alert","addAlert","publishAlerts","$set","$emit","[object Object]","_feature","feature_array","parse","remove_feature","some","filter","computed","featureArray","subcomponents_mek_energy_pool_featurevue_type_script_lang_js_","component","Object","componentNormalizer","__webpack_exports__","_alert_string","$store","commit","d","partial_cleaned_feature","_data_table","_validation_keys","_data","Array","isArray","valid","_keys","_key","_has_feature","found_feature","_table_val","_validator","_get_feature","_default_data","_name"],"mappings":"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","file":"js/mek-energy-pool-feature.1021e3c7.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('mek-sub-component-table',{attrs:{\"items\":_vm.feature_table,\"pkey\":_vm.pkey,\"selected-keys\":_vm.selected_keys,\"headers\":{feature:'Feature',cost:'Cost'},\"show-headers\":true,\"format\":{cost:'multiplier'},\"name\":\"Features\",\"flow\":\"pkey-col\"},on:{\"update-selected-data\":_vm.select_feature}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","//data table module, raw data output for re-use in non-vue-component formats\r\nimport {partial_validate, partial_has_feature, partial_get_feature} from \"../universal/mek_partial-function-data-module\";\r\n\r\n//create new feature_data_table\r\nlet feature_data_table=\r\n[\r\n    {feature:\"Morphable\",cost:1.25},\r\n    {feature:\"Fragile\",cost:1},\r\n];\r\nlet data_table_keys=[\"feature\",\"cost\"];\r\n\r\n//data validator for feature_data_table\r\n//call partial_validate with appropriate data for full validate\r\nlet feature_validate=partial_validate(feature_data_table, data_table_keys);\r\n\r\n//completed function for checking if data has data\r\nlet has_feature=partial_has_feature(feature_data_table);\r\n\r\n//completed function for returning matching data\r\nlet get_feature=partial_get_feature(feature_data_table, has_feature);\r\n\r\n/*** \r\n * \r\n * find way to switch to partial function\r\n * \r\n * ***/\r\nlet cleaned_feature=function(_feature_array, _pkey)\r\n{\r\n    let update=false;\r\n    let key_list=[];\r\n    let alerts=[];\r\n    let json_data=JSON.stringify(_feature_array);\r\n    if(_feature_array===undefined || _pkey===undefined)\r\n    {\r\n        alerts.push(\"Mek_Energy_Pool-Feature: \");\r\n        let error=_feature_array===undefined\r\n            ? \"**** Missing feature array. Returning blank. ****\"\r\n            : \"**** No primary key provided. Returning blank. ****\";\r\n        alerts.push(error);\r\n        return {cleaned_array:[],update:true,key_list:key_list,alerts:alerts};\r\n    }\r\n\r\n    if(_feature_array.length==0)\r\n    {//no feature selected, return empty\r\n        return {cleaned_array:[],update:update,key_list:key_list,alerts:alerts};\r\n    }    \r\n\r\n    let temp_selected_feature_array=_feature_array.reduceRight((_cleaned_array, _val)=>\r\n    {\r\n        if(_val[_pkey]===undefined)\r\n        {//if feature with pkey doesn't exist in data table, ignore\r\n            alerts.push(\"Mek_Energy_Pool-Feature: \"+json_data);\r\n            alerts.push(\"**** Missing primary key. Ignoring. ****\");\r\n            return _cleaned_array;\r\n        }\r\n        let clean_feature=_val;\r\n        if(!feature_validate(_val))\r\n        {//invalid data\r\n            alerts.push(\"Mek_Energy_Pool-Feature: \"+json_data);\r\n            alerts.push(\"**** Invalid data, attempting to reset. ****\")\r\n            clean_feature=get_feature(_pkey,_val[_pkey]);\r\n            update=true;\r\n            //attempt to set to corrected feature\r\n        }\r\n        if(clean_feature===null)\r\n        {//no matching feature\r\n            alerts.push(\"**** Unable to reset. No matching data. ****\")\r\n            update=true;\r\n            return _cleaned_array;\r\n            //ignore element\r\n        }\r\n        if(!key_list.includes(_val[_pkey]))\r\n        {\r\n            _cleaned_array.push(_val);\r\n            key_list.push(_val[_pkey]);\r\n        }\r\n        return _cleaned_array;\r\n    },[]);\r\n    temp_selected_feature_array=temp_selected_feature_array.reverse();\r\n    return {cleaned_array:temp_selected_feature_array,update:update,key_list:key_list,alerts:alerts};\r\n    //returns an object with the pruned feature array, whether it was updated, and the key_list\r\n};\r\n\r\nexport {feature_data_table, feature_validate, has_feature, get_feature, cleaned_feature};\r\n","<template>\r\n    <mek-sub-component-table\r\n        :items=\"feature_table\" :pkey=\"pkey\" :selected-keys=\"selected_keys\"\r\n        :headers=\"{feature:'Feature',cost:'Cost'}\"\r\n        :show-headers=\"true\" :format=\"{cost:'multiplier'}\"\r\n        @update-selected-data=\"select_feature\"\r\n        name=\"Features\" flow=\"pkey-col\"\r\n    ></mek-sub-component-table>\r\n</template>\r\n<script>\r\nimport utility_mixin from \"../../../mixins/utility_mixin\";\r\nimport alerts_mixin from \"../../../mixins/alerts_mixin\";\r\n\r\nimport {feature_data_table, cleaned_feature}\r\n    from \"../../data_table_modules/mek_energy_pool/mek_energy_pool-feature-data-module\";\r\n\r\nexport default \r\n{\r\n    name:\"mek_energy_pool_feature\",\r\n    props:[\"featureArray\"],\r\n    mixins:[utility_mixin, alerts_mixin],\r\n    components:\r\n    {\r\n        \"mek-sub-component-table\":()=>import(\"../../universal/mek_sub-component-table.vue\")\r\n    },\r\n    data:function()\r\n    {\r\n        let obj={};\r\n        obj.selected_feature_array=[];\r\n        obj.pkey=\"feature\";\r\n        obj.alerts=[];\r\n        obj.suppressAlerts=false;\r\n        return obj;\r\n    },\r\n    methods:\r\n    {\r\n        select_feature:function(_selected_feature)\r\n        {\r\n            this.suppressAlerts=true;//suppress alerts, for exclusive switching\r\n            let new_selected_feature_array=this.toggleFeature(this.selected_feature_array,_selected_feature);\r\n            let cleaned_data=cleaned_feature(new_selected_feature_array, this.pkey);\r\n            new_selected_feature_array=cleaned_data.cleaned_array;\r\n            if(cleaned_data.alerts.length>0 && !this.suppressAlerts)\r\n            {\r\n                cleaned_data.alerts.forEach((_alert)=>\r\n                {\r\n                    this.addAlert(_alert);\r\n                });\r\n                this.publishAlerts();\r\n            }\r\n            this.$set(this,\"selected_feature_array\",new_selected_feature_array);\r\n            this.$emit(\"update-feature\",new_selected_feature_array);\r\n            this.suppressAlerts=false;\r\n        },\r\n        toggleFeature(_feature_array,_feature)\r\n        {\r\n            let feature_array=JSON.parse(JSON.stringify(_feature_array));\r\n            \r\n            let remove_feature=feature_array.some((_val)=>\r\n            {//if _feature matches already existing feature, flag for deletion\r\n                return _val[this.pkey]==_feature[this.pkey];\r\n            },this);\r\n            if(remove_feature)\r\n            {//if flagged for removal, filter out\r\n                return feature_array.filter((_val)=>\r\n                {\r\n                    return _val[this.pkey]!=_feature[this.pkey];\r\n                },this);\r\n            }\r\n            feature_array.push(_feature);\r\n            //otherwise add feature and return\r\n            return feature_array;\r\n        },\r\n    },\r\n    computed:\r\n    {\r\n        feature_table()\r\n        {\r\n            return feature_data_table;\r\n        },\r\n        selected_keys()\r\n        {\r\n            let cleaned_data=cleaned_feature(this.featureArray,this.pkey);\r\n            if(cleaned_data.alerts.length>0 && !this.suppressAlerts)\r\n            {\r\n                cleaned_data.alerts.forEach((_alert)=>\r\n                {\r\n                    this.addAlert(_alert);\r\n                });\r\n                this.publishAlerts();\r\n            }\r\n            if(cleaned_data.update)\r\n            {\r\n                this.$emit(\"update-feature\",cleaned_data.cleaned_array);\r\n            }\r\n            this.$set(this,\"selected_feature_array\",cleaned_data.cleaned_array);\r\n            return cleaned_data.key_list;\r\n        }\r\n    },\r\n}\r\n</script>","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./mek_energy_pool-feature.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./mek_energy_pool-feature.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./mek_energy_pool-feature.vue?vue&type=template&id=41e75092&\"\nimport script from \"./mek_energy_pool-feature.vue?vue&type=script&lang=js&\"\nexport * from \"./mek_energy_pool-feature.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export default\r\n{\r\n    methods:\r\n    {\r\n        addAlert(_alert_string)\r\n        {\r\n            this.alerts.push(_alert_string);\r\n        },\r\n        publishAlerts()\r\n        {\r\n            if(this.alerts.length>0)\r\n            {   \r\n                this.$store.commit(\"alertMessage\",this.alerts);\r\n            }\r\n            this.$set(this,\"alerts\",[]);\r\n        },\r\n    }\r\n}","//data table module, raw data output for re-use in non-vue-component formats\r\n\r\n//ATTEMPT: make validators and has_feat and get_feat and cleaned_feat functions \r\n//          neutral and reusable across all data modules\r\n\r\n//partial data validator\r\n//called with data_table and validation_keys in data-module\r\nlet partial_validate=(_data_table,_validation_keys)=>(_data)=>\r\n{//_data_table: Array, array of data to validate against\r\n    //_validation_keys: Array, keys to be compared between passed in data and data_table\r\n    //_data: Object, data to be compared to data table \r\n    if(typeof _data===\"undefined\" || !Array.isArray(_validation_keys) || _validation_keys.length==0)\r\n    {\r\n        return false;\r\n    }\r\n    let valid=_data_table.some((_val)=>\r\n    {\r\n        return !_validation_keys.some((_keys)=>\r\n        {//returns true on invalid data, Not the return to return True if matching valid value is found\r\n            return _data[_keys]!=_val[_keys];\r\n        });\r\n    });\r\n    return valid;\r\n}\r\n\r\n//partial_has_feature, determine if provided data table has matching element with provided key and val\r\n//called in data module to generate full function with local data\r\nlet partial_has_feature=(_data_table)=>(_key, _val)=>\r\n{\r\n    return _data_table.some((_data)=>\r\n    {\r\n        return _data[_key]!==undefined && _data[_key]==_val;\r\n    });\r\n};\r\n\r\n//partial get_feature, returns full function for data module\r\n//requires data_table (array) and module's has_feature function\r\n//returns full matching element in provided data table\r\n//has_feature must exist in data table module\r\nlet partial_get_feature=(_data_table, _has_feature)=>(_key, _val)=>\r\n{\r\n    if(_has_feature(_key,_val))\r\n    {\r\n        let found_feature=null;\r\n        _data_table.some((_table_val)=>\r\n        {\r\n            if(_table_val[_key]==_val)\r\n            {\r\n                found_feature=_table_val;\r\n                return true;\r\n            }\r\n        },this);\r\n        return found_feature;\r\n    }\r\n}\r\n\r\nlet partial_cleaned_feature=(_validator, _has_feature, _get_feature, _default_data, _name)=>(_pkey, _feature)=>\r\n{//input: primary key, selected feature, filtered data table\r\n    let data=undefined;\r\n    let key_list=[];\r\n    let update=false;\r\n    let alerts=[];\r\n    let json_data=JSON.stringify(_feature);\r\n\r\n    if(_feature===undefined || !_has_feature(_pkey,_feature[_pkey]))\r\n    {\r\n        data=_default_data;\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting to default. ****\");\r\n    }\r\n    else if(!_validator(_feature))\r\n    {\r\n        data=JSON.parse(JSON.stringify(_get_feature(_pkey,_feature[_pkey])));\r\n        key_list=[data[_pkey]];\r\n        update=true;\r\n        alerts.push(_name+\": \"+json_data);\r\n        alerts.push(\"**** Invalid data. Reseting. ****\");\r\n    }\r\n    else\r\n    {\r\n        data=JSON.parse(JSON.stringify(_feature));\r\n        key_list=[data[_pkey]];\r\n        update=false;\r\n    }\r\n    return {data:data, key_list:key_list, update:update, alerts:alerts};\r\n}\r\n\r\nexport {partial_validate, partial_has_feature, partial_get_feature, partial_cleaned_feature};\r\n"],"sourceRoot":""}