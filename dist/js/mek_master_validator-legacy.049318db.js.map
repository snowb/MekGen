{"version":3,"sources":["webpack:///./src/store/modules/mek_master_validator.js"],"names":["alerts","validators","__webpack_require__","e","then","bind","_module","mek_armor","validateServo","_component","validatedData","cleanedComponent","armor_filter","selected_servo_class","code","armor","selected_armor","update","concat","data","type","selected_armor_type","selected_aselected_armor_typermor","RAM","selected_absorption","validateComponent","component_category","component_type","getAlerts"],"mappings":"iQAAIA,EAAO,GAEPC,EAAW,GAEfC,EAAAC,EAAA,wBAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAK,SAACE,GAEHL,EAAWM,UAAUD,EAAQL,aAGjC,IAAIO,EAAc,SAACC,GAEf,IACIC,EADAC,EAAiB,GAkBrB,OAZAV,EAAWM,UAAUK,aAAaH,EAAWI,qBAAqBC,KAAK,GACvEJ,EAAcT,EAAWM,UAAUQ,MAAM,OAAON,EAAWO,gBACxDN,EAAcO,SAAQjB,EAAOA,EAAOkB,OAAOR,EAAcV,SAC5DW,EAAiBK,eAAeN,EAAcS,KAE9CT,EAAcT,EAAWM,UAAUa,KAAK,qBAAqBX,EAAWY,qBACrEX,EAAcO,SAAQjB,EAAOA,EAAOkB,OAAOR,EAAcV,SAC5DW,EAAiBW,kCAAkCZ,EAAcS,KAEjET,EAAcT,EAAWM,UAAUgB,IAAI,aAAad,EAAWe,qBAC5Dd,EAAcO,SAAQjB,EAAOA,EAAOkB,OAAOR,EAAcV,SAC5DW,EAAiBa,oBAAoBd,EAAcS,KAC5CR,GAGPc,EAAkB,SAAChB,GAGnB,IAAIE,EAeL,GAAkC,aAA/BF,EAAWiB,mBAET,OAAOjB,EAAWkB,gBAEd,IAAK,QACDhB,EAAiBH,EAAcC,GAC/B,MACJ,IAAK,OAUD,MACJ,IAAK,MAOD,MACJ,IAAK,QAMD,MACJ,IAAK,UAUD,MACJ,IAAK,aAQD,MACJ,IAAK,WAID,MACJ,IAAK,cAKD,MACJ,IAAK,SAUD,MACJ,IAAK,YAGD,MACJ,IAAK,aAGD,MAGb,OAAOE,GAGNiB,EAAU,kBAAI5B","file":"js/mek_master_validator-legacy.049318db.js","sourcesContent":["let alerts=[];\r\n\r\nlet validators={};\r\n//load mek_armor validators from module\r\nimport(/* webpackChunkName: \"mek_armor_validators\" */\"./mek_armor_validators\")\r\n.then((_module)=>\r\n{\r\n    validators.mek_armor=_module.validators;\r\n});\r\n\r\nlet validateServo=(_component)=>\r\n{\r\n    let cleanedComponent={};\r\n    let validatedData;\r\n    //validate servo-class\r\n    //validate servo-kills-space-trade\r\n    //valid servo-type\r\n    //validate armor\r\n    validators.mek_armor.armor_filter(_component.selected_servo_class.code+2);\r\n    validatedData=validators.mek_armor.armor(\"code\",_component.selected_armor);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.selected_armor=validatedData.data;\r\n    //validate armor-type\r\n    validatedData=validators.mek_armor.type(\"damage_coefficient\",_component.selected_armor_type);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.selected_aselected_armor_typermor=validatedData.data;\r\n    //validate RAM\r\n    validatedData=validators.mek_armor.RAM(\"absorption\",_component.selected_absorption);\r\n    if(validatedData.update){alerts=alerts.concat(validatedData.alerts);}\r\n    cleanedComponent.selected_absorption=validatedData.data;\r\n    return cleanedComponent;\r\n};\r\n\r\nlet validateComponent=(_component)=>\r\n{\r\n    //console.log(_component);\r\n    let cleanedComponent;\r\n\r\n    //console.log(cleanedComponent.selected_armor)\r\n    /* *\r\n    *\r\n    * need to find a good way to 'scan' a provided component, with focused validation\r\n    * likely need to have a decent switch for component_category\r\n    * then component_type\r\n    * then mass-validate known props\r\n    *   also need to check for undefined?  \r\n    * \r\n    * \r\n    * finally return the cleaned/validate component\r\n    * \r\n    * */\r\n   if(_component.component_category==\"equipment\")\r\n   {//validate equipment\r\n        switch(_component.component_type)\r\n        {\r\n            case \"servo\":\r\n                cleanedComponent=validateServo(_component);\r\n                break;\r\n            case \"beam\":\r\n                //damage\r\n                //accuracy\r\n                //brust val\r\n                //range mod\r\n                //warm up time\r\n                //shots (>0)\r\n                //wide angle\r\n                //features\r\n                //efficiency!?\r\n                break;\r\n            case \"emw\":\r\n                //damage\r\n                //accuracy\r\n                //atk factor\r\n                //turns in use\r\n                //features\r\n                //efficiency!?\r\n                break;\r\n            case \"melee\":\r\n                //damage\r\n                //accuracy\r\n                //entangle range trade\r\n                //features\r\n                //efficiency!?\r\n                break;\r\n            case \"missile\":\r\n                //damage\r\n                //accuracy\r\n                //range mod\r\n                //pack size (>0)\r\n                //smart\r\n                //skill (only with Smart >=1)\r\n                //blast radius\r\n                //features\r\n                //efficiency!?\r\n                break;\r\n            case \"projectile\":\r\n                //damage\r\n                //accuracy\r\n                //burst val\r\n                //multi-feed\r\n                //range mod\r\n                //features\r\n                //efficiency!?\r\n                break;\r\n            case \"magazine\":\r\n                //gun??\r\n                //ammo table/feature\r\n                //shots (>0)\r\n                break;\r\n            case \"energy_pool\":\r\n                //energy_pool\r\n                //portfolio size\r\n                //feature\r\n                //efficiency!?\r\n                break;\r\n            case \"shield\":\r\n                //class\r\n                //def ability, STANDARD ONLY\r\n                //binder, STD and ACTVE ONLY\r\n                //armor type, STD and ACTVE ONLY\r\n                //RAM, STD and ACTVE ONLY\r\n                //weakness, REACTIVE ONLY\r\n                //reset time, REACTIVE ONLY\r\n                //turns in use, REACTIVE ONLY\r\n                //efficiency!?\r\n                break;\r\n            case \"reflector\":\r\n                //quality\r\n                //efficiency!?\r\n                break;\r\n            case \"locomotion\":\r\n                //type\r\n                //class\r\n                break;\r\n        }\r\n   }\r\n   return cleanedComponent;\r\n};\r\n\r\nlet getAlerts=()=>alerts;\r\n\r\nexport {validateComponent, getAlerts};"],"sourceRoot":""}