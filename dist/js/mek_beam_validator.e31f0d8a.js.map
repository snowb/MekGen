{"version":3,"sources":["webpack:///./src/store/modules/validators/mek_beam_validator.js"],"names":["loopValidators","updateMultipliers","round","validators","__webpack_require__","e","then","bind","_module","accuracy","cleaned_feature","burst_value","damage","filter_feature","filter_data_table","feature","update_range_mod","create_range_mod_data_table","range_mod","update_shots","filter_shots_data_table","shots","warm_up","wide_angle","space_efficiency","validate_efficiency","derived","_component","validatedData","cleanedComponent","alerts","updateList","cost_multipliers","data","concat","cost_multiplier","Object","entries","reduce","_multi","_val","push","newDamageCapacity","selected_damage","damage_capacity","isFragile","feature_array","some","newWeight","weight","magFed","newCost","cost","efficiencies","space","validateComponent","loopAlerts","componentsToValidate","validator","pkey","component_prop","_loopValidators","range","selected_burst_value","_loopValidators2","base_cost"],"mappings":"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","file":"js/mek_beam_validator.e31f0d8a.js","sourcesContent":["let validators={};\r\n\r\nimport(/* webpackChunkName: \"mek_beam-accuracy-data-module\" */\"@/data_table_modules/mek_beam/mek_beam-accuracy-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.accuracy=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_beam-burst-value-data-module\" */\"@/data_table_modules/mek_beam/mek_beam-burst-value-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.burst_value=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_beam-damage-data-module\" */\"@/data_table_modules/mek_beam/mek_beam-damage-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.damage=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_beam-feature-data-module\" */\"@/data_table_modules/mek_beam/mek_beam-feature-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.filter_feature=_module.filter_data_table;//filter based on burst_value\r\n    validators.feature=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_beam-range-mod-data-module\" */\"@/data_table_modules/mek_beam/mek_beam-range-mod-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.update_range_mod=_module.create_range_mod_data_table;//filter based on base_range\r\n    validators.range_mod=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_beam-shots-data-module\" */\"@/data_table_modules/mek_beam/mek_beam-shots-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.update_shots=_module.filter_shots_data_table;//update based on magfed feature\r\n    validators.shots=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_beam-warm-up-data-module\" */\"@/data_table_modules/mek_beam/mek_beam-warm-up-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.warm_up=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_beam-wide-angle-data-module\" */\"@/data_table_modules/mek_beam/mek_beam-wide-angle-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.wide_angle=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_space-efficiency-data-module\" */\"@/data_table_modules/universal/mek_space-efficiency-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.space_efficiency=_module.validate_efficiency;\r\n});\r\n\r\nlet loopValidators, updateMultipliers, round;\r\nimport(/* webpackChunkName: \"validator_functions\" */\"./validator_functions\")\r\n.then((_module)=>\r\n{\r\n    ({loopValidators, updateMultipliers, round} = _module);\r\n});\r\n\r\nvalidators.derived=(_component)=>\r\n{\r\n    let cleanedComponent=_component;\r\n    let alerts=[];\r\n    let validatedData;\r\n    let updateList=[\"selected_burst_value\",\"selected_accuracy\",\"selected_warm_up_time\",\"selected_wide_angle\",\"selected_range_mod\",\"feature_array\",\"selected_shots\"];\r\n    //update cost_multipliers for components needing update\r\n    validatedData=updateMultipliers(updateList,cleanedComponent,\"Mek-Beam\");\r\n    cleanedComponent.cost_multipliers=validatedData.data;\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    //update cost_multiplier\r\n    let cost_multiplier=Object.entries(cleanedComponent.cost_multipliers).reduce((_multi, _val)=>\r\n    {//calc new cost_multiplier\r\n        return _multi*_val[1];\r\n    },1);\r\n    cost_multiplier=round(cost_multiplier,2);\r\n    if(cleanedComponent.cost_multiplier!=cost_multiplier)\r\n    {\r\n        alerts.push(\"Mek-Beam: cost_multiplier\");\r\n        alerts.push(\"**** Invalid Cost Multiplier. Correcting. ****\");\r\n        cleanedComponent.cost_multiplier=round(cost_multiplier,2);\r\n    }\r\n    let newDamageCapacity=cleanedComponent.selected_damage.damage;\r\n    if(cleanedComponent.damage_capacity!=newDamageCapacity)\r\n    {\r\n        alerts.push(\"Mek-Beam: damage_capacity\");\r\n        alerts.push(\"**** Invalid Damage Capacity. Correcting. ****\");\r\n        cleanedComponent.damage_capacity=newDamageCapacity;\r\n    }\r\n    let isFragile=cleanedComponent.feature_array.some((_val)=>\r\n    {\r\n        return _val.feature==\"Fragile\";\r\n    });\r\n    let newWeight=isFragile ? 1 : newDamageCapacity/2;\r\n    if(cleanedComponent.weight!=newWeight)\r\n    {\r\n        alerts.push(\"Mek-Beam: weight\");\r\n        alerts.push(\"**** Invalid Weight. Correcting. ****\");\r\n        cleanedComponent.weight=newWeight;\r\n    }\r\n    let magFed=cleanedComponent.feature_array.some((_val)=>\r\n    {\r\n        return _val.feature==\"Mag-Fed\";\r\n    });\r\n    magFed=magFed ? 1 : 0;\r\n    let newCost=(cleanedComponent.selected_damage.cost * cost_multiplier) + cleanedComponent.efficiencies.space.cost + magFed;\r\n    newCost=round(newCost,2);\r\n    if(cleanedComponent.cost!=newCost)\r\n    {\r\n        alerts.push(\"Mek-Beam: cost\");\r\n        alerts.push(\"**** Invalid Cost. Correcting. ****\");\r\n        cleanedComponent.cost=newCost;\r\n    }\r\n\r\n    return {data:cleanedComponent, alerts:alerts};\r\n};\r\n\r\nlet validateComponent=(_component)=>\r\n{\r\n    let cleanedComponent=_component;\r\n    let validatedData;\r\n    let loopAlerts;\r\n    let alerts=[];\r\n    //loop thru independent validations\r\n    let componentsToValidate=\r\n    [\r\n        {validator:validators.damage,pkey:\"damage\",component_prop:\"selected_damage\"},\r\n        {validator:validators.burst_value,pkey:\"burst_value\",component_prop:\"selected_burst_value\"},\r\n        {validator:validators.accuracy,pkey:\"accuracy\",component_prop:'selected_accuracy'},\r\n        {validator:validators.warm_up,pkey:\"time\",component_prop:'selected_warm_up_time'},\r\n        {validator:validators.wide_angle,pkey:\"angle\",component_prop:'selected_wide_angle'},\r\n    ];\r\n    ({cleanedComponent, loopAlerts} = loopValidators(componentsToValidate, cleanedComponent));\r\n    alerts=alerts.concat(loopAlerts)\r\n    //update range_mod table\r\n    validators.update_range_mod(cleanedComponent.selected_damage.range);\r\n    //update feature table\r\n    validators.filter_feature(cleanedComponent.selected_burst_value.burst_value);\r\n    //extract if Mag-Fed\r\n    let magFed=cleanedComponent.feature_array.some(_val=>_val.feature==\"Mag-Fed\");\r\n    //update shots table\r\n    validators.update_shots(magFed);\r\n    //loop thru dependent validations\r\n\r\n    componentsToValidate=\r\n    [\r\n        {validator:validators.range_mod,pkey:\"range_mod\",component_prop:\"selected_range_mod\"},\r\n        {validator:validators.feature,pkey:\"feature\",component_prop:\"feature_array\"},\r\n        {validator:validators.shots,pkey:\"shots\",component_prop:'selected_shots'},\r\n    ];\r\n    ({cleanedComponent, loopAlerts} = loopValidators(componentsToValidate, cleanedComponent));\r\n    alerts=alerts.concat(loopAlerts);\r\n\r\n    //update derived values, and cost_multi\r\n    validatedData=validators.derived(cleanedComponent);\r\n    cleanedComponent=validatedData.data;\r\n    alerts=alerts.concat(validatedData.alerts);   \r\n    let base_cost=cleanedComponent.selected_damage.cost * cleanedComponent.cost_multiplier;\r\n    //validate space efficiency\r\n    validatedData=validators.space_efficiency(cleanedComponent.efficiencies.space, base_cost, \"Mek-Beam\");\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    cleanedComponent.efficiencies.space=validatedData.data;\r\n\r\n    return {data:cleanedComponent, alerts:alerts};\r\n};\r\n\r\nexport {validateComponent};"],"sourceRoot":""}