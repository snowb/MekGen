{"version":3,"sources":["webpack:///./src/store/modules/validators/mek_beam_validator.js"],"names":["loopValidators","updateMultipliers","round","validators","__webpack_require__","e","then","bind","_module","accuracy","cleaned_feature","burst_value","damage","filter_feature","filter_data_table","feature","update_range_mod","create_range_mod_data_table","range_mod","update_shots","filter_shots_data_table","shots","warm_up","wide_angle","space_efficiency","validate_efficiency","validateComponent","_component","validatedData","loopAlerts","cleanedComponent","updateList","alerts","componentsToValidate","validator","pkey","component_prop","skipUpdateList","_loopValidators","concat","selected_damage","range","selected_burst_value","magFed","feature_array","some","_val","_loopValidators2","cost_multiplier","Object","entries","cost_multipliers","reduce","_multi","total_cost","cost","efficiencies","space","data","damage_capacity","weight"],"mappings":"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","file":"js/mek_beam_validator.c77c7ca8.js","sourcesContent":["let validators={};\r\n\r\nimport(/* webpackChunkName: \"mek_beam-accuracy-data-module\" */\"@/data_table_modules/mek_beam/mek_beam-accuracy-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.accuracy=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_beam-burst-value-data-module\" */\"@/data_table_modules/mek_beam/mek_beam-burst-value-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.burst_value=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_beam-damage-data-module\" */\"@/data_table_modules/mek_beam/mek_beam-damage-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.damage=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_beam-feature-data-module\" */\"@/data_table_modules/mek_beam/mek_beam-feature-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.filter_feature=_module.filter_data_table;//filter based on burst_value\r\n    validators.feature=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_beam-range-mod-data-module\" */\"@/data_table_modules/mek_beam/mek_beam-range-mod-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.update_range_mod=_module.create_range_mod_data_table;//filter based on base_range\r\n    validators.range_mod=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_beam-shots-data-module\" */\"@/data_table_modules/mek_beam/mek_beam-shots-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.update_shots=_module.filter_shots_data_table;//update based on magfed feature\r\n    validators.shots=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_beam-warm-up-data-module\" */\"@/data_table_modules/mek_beam/mek_beam-warm-up-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.warm_up=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_beam-wide-angle-data-module\" */\"@/data_table_modules/mek_beam/mek_beam-wide-angle-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.wide_angle=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_space-efficiency-data-module\" */\"@/data_table_modules/universal/mek_space-efficiency-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.space_efficiency=_module.validate_efficiency;\r\n});\r\n\r\nlet loopValidators, updateMultipliers, round;\r\nimport(/* webpackChunkName: \"validator_functions\" */\"./validator_functions\")\r\n.then((_module)=>\r\n{\r\n    ({loopValidators, updateMultipliers, round} = _module);\r\n});\r\n\r\nlet validateComponent=(_component)=>\r\n{\r\n    let cleanedComponent=_component;\r\n    let validatedData;\r\n    let updateList=[\"selected_burst_value\",\"selected_accuracy\",\"selected_warm_up_time\",\"selected_wide_angle\",\"selected_range_mod\",\"feature_array\",\"selected_shots\"];\r\n    let loopAlerts;\r\n    let alerts=[];\r\n    //loop thru independent validations\r\n    let componentsToValidate=\r\n    [\r\n        {validator:validators.damage,pkey:\"damage\",component_prop:\"selected_damage\",skipUpdateList:true},\r\n        {validator:validators.burst_value,pkey:\"burst_value\",component_prop:\"selected_burst_value\"},\r\n        {validator:validators.accuracy,pkey:\"accuracy\",component_prop:'selected_accuracy'},\r\n        {validator:validators.warm_up,pkey:\"time\",component_prop:'selected_warm_up_time'},\r\n        {validator:validators.wide_angle,pkey:\"angle\",component_prop:'selected_wide_angle'},\r\n    ];\r\n    ({cleanedComponent, loopAlerts} = loopValidators(componentsToValidate, cleanedComponent));\r\n    \r\n    alerts=alerts.concat(loopAlerts)\r\n    //update range_mod table\r\n    validators.update_range_mod(cleanedComponent.selected_damage.range);\r\n    //update feature table\r\n    validators.filter_feature(cleanedComponent.selected_burst_value.burst_value);\r\n    //extract if Mag-Fed\r\n    let magFed=cleanedComponent.feature_array.some(_val=>_val.feature==\"Mag-Fed\");\r\n    //update shots table\r\n    validators.update_shots(magFed);\r\n    //loop thru dependent validations\r\n\r\n    componentsToValidate=\r\n    [\r\n        {validator:validators.range_mod,pkey:\"range_mod\",component_prop:\"selected_range_mod\"},\r\n        {validator:validators.feature,pkey:\"feature\",component_prop:\"feature_array\"},\r\n        {validator:validators.shots,pkey:\"shots\",component_prop:'selected_shots'},\r\n    ];\r\n    ({cleanedComponent, loopAlerts} = loopValidators(componentsToValidate, cleanedComponent));\r\n    alerts=alerts.concat(loopAlerts);\r\n\r\n    //update cost_multipliers for components needing update\r\n    cleanedComponent=updateMultipliers(updateList,cleanedComponent);\r\n    //validate space efficiency\r\n    let cost_multiplier=Object.entries(cleanedComponent.cost_multipliers).reduce((_multi, _val)=>\r\n    {//calc new cost_mulitplier\r\n        return _multi*_val[1];\r\n    },1);\r\n    \r\n    cleanedComponent.cost_multiplier=round(cost_multiplier,2);\r\n    let total_cost=cleanedComponent.selected_damage.cost * cleanedComponent.cost_multiplier;\r\n    validatedData=validators.space_efficiency(cleanedComponent.efficiencies.space, total_cost, \"Mek-Beam\");\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    cleanedComponent.efficiencies.space=validatedData.data;\r\n    //update static values\r\n    cleanedComponent.damage_capacity=cleanedComponent.selected_damage.damage;\r\n    cleanedComponent.weight=cleanedComponent.damage_capacity/2;\r\n\r\n    return {data:cleanedComponent, alerts:alerts};\r\n};\r\n\r\nexport {validateComponent};"],"sourceRoot":""}