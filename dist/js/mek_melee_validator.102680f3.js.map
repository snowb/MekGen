{"version":3,"sources":["webpack:///./src/store/modules/validators/mek_melee_validator.js"],"names":["loopValidators","updateMultipliers","round","validators","__webpack_require__","e","then","bind","_module","accuracy","cleaned_feature","damage","feature","entangle","space_efficiency","validate_efficiency","validateComponent","_component","validatedData","loopAlerts","cleanedComponent","updateList","alerts","componentsToValidate","validator","pkey","component_prop","_loopValidators","concat","cost_multipliers","data","cost_multiplier","Object","entries","reduce","_multi","_val","total_cost","selected_damage","cost","efficiencies","space","damage_capacity","weight","isEntangle","feature_array","some","base_damage","range_mod","damage_mod","cleanedEntangle","final_damage","undefined"],"mappings":"wLAAA,IAgCIA,EAAgBC,EAAmBC,EAhCnCC,EAAW,GAEfC,EAAAC,EAAA,kCAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IAEHL,EAAWM,SAASD,EAAQE,kBAGhCN,EAAAC,EAAA,gCAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IAEHL,EAAWQ,OAAOH,EAAQE,kBAG9BN,EAAAC,EAAA,iCAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IAEHL,EAAWS,QAAQJ,EAAQE,kBAG/BN,EAAAC,EAAA,wCAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IAEHL,EAAWU,SAASL,EAAQE,kBAGhCN,EAAAC,EAAA,oCAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IAEHL,EAAWW,iBAAiBN,EAAQO,sBAIxCX,EAAAC,EAAA,uBAAAC,KAAAF,EAAAG,KAAA,cACCD,KAAME,IAEDR,EAA4CQ,EAA5CR,eAAgBC,EAA4BO,EAA5BP,kBAAmBC,EAASM,EAATN,QAGzC,IAAIc,EAAmBC,IAEnB,IACIC,EAEAC,EAHAC,EAAiBH,EAEjBI,EAAW,CAAC,oBAAoB,iBAEhCC,EAAO,GAEPC,EACJ,CACI,CAACC,UAAUrB,EAAWQ,OAAOc,KAAK,SAASC,eAAe,mBAC1D,CAACF,UAAUrB,EAAWM,SAASgB,KAAK,WAAWC,eAAe,qBAC9D,CAACF,UAAUrB,EAAWS,QAAQa,KAAK,UAAUC,eAAe,kBAXpE,IAAAC,EAasC3B,EAAeuB,EAAsBH,GAArEA,EAbNO,EAaMP,iBAAkBD,EAbxBQ,EAawBR,WACpBG,EAAOA,EAAOM,OAAOT,GAGrBD,EAAcjB,EAAkBoB,EAAWD,EAAiB,aAC5DA,EAAiBS,iBAAiBX,EAAcY,KAChDR,EAAOA,EAAOM,OAAOV,EAAcI,QAEnC,IAAIS,EAAgBC,OAAOC,QAAQb,EAAiBS,kBAAkBK,OAAO,CAACC,EAAQC,KAElF,OAAOD,EAAOC,EAAK,IACrB,GACFhB,EAAiBW,gBAAgB7B,EAAM6B,EAAgB,GAEvD,IAAIM,EAAWjB,EAAiBkB,gBAAgBC,KAAOnB,EAAiBW,gBACxEb,EAAcf,EAAWW,iBAAiBM,EAAiBoB,aAAaC,MAAOJ,EAAY,aAC3Ff,EAAOA,EAAOM,OAAOV,EAAcI,QACnCF,EAAiBoB,aAAaC,MAAMvB,EAAcY,KAElDV,EAAiBsB,gBAAgBtB,EAAiBkB,gBAAgB3B,OAClES,EAAiBuB,OAAOvB,EAAiBsB,gBAAgB,EAGzD,IAAIE,EAAWxB,EAAiByB,cAAcC,KAAMV,IAEhD,MAAqB,YAAdA,EAAKxB,UAEhB,GAAGgC,EACH,CACI,IAAIG,EAAY3B,EAAiBkB,gBAAgB3B,OAC7CqC,EAAU5B,EAAiBP,SAASmC,UACpCC,EAAW7B,EAAiBP,SAASoC,WACrCC,EAAgB/C,EAAWU,SAASkC,EAAaC,EAAWC,GAChE7B,EAAiBP,SAAS,CAACmC,UAAUE,EAAgBF,UAAWC,WAAWC,EAAgBD,YAC3F7B,EAAiB+B,aAAaD,EAAgBvC,OAC9CW,EAAOA,EAAOM,OAAOsB,EAAgB5B,kBAEL8B,IAA5BhC,EAAiBP,WAErBO,EAAiBP,SAAS,CAACmC,UAAU,EAAEC,WAAW,GAClD7B,EAAiB+B,aAAa/B,EAAiBkB,gBAAgB3B,QAGnE,MAAO,CAACmB,KAAKV,EAAkBE,OAAOA","file":"js/mek_melee_validator.102680f3.js","sourcesContent":["let validators={};\r\n\r\nimport(/* webpackChunkName: \"mek_melee-accuracy-data-module\" */\"@/data_table_modules/mek_melee/mek_melee-accuracy-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.accuracy=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_melee-damage-data-module\" */\"@/data_table_modules/mek_melee/mek_melee-damage-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.damage=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_melee-feature-data-module\" */\"@/data_table_modules/mek_melee/mek_melee-feature-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.feature=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_melee-entangle-range-data-module\" */\"@/data_table_modules/mek_melee/mek_melee-entangle-range-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.entangle=_module.cleaned_feature;\r\n});\r\n\r\nimport(/* webpackChunkName: \"mek_space-efficiency-data-module\" */\"@/data_table_modules/universal/mek_space-efficiency-data-module\")\r\n.then((_module)=>\r\n{\r\n    validators.space_efficiency=_module.validate_efficiency;\r\n});\r\n\r\nlet loopValidators, updateMultipliers, round;\r\nimport(/* webpackChunkName: \"validator_functions\" */\"./validator_functions\")\r\n.then((_module)=>\r\n{\r\n    ({loopValidators, updateMultipliers, round} = _module);\r\n});\r\n\r\nlet validateComponent=(_component)=>\r\n{\r\n    let cleanedComponent=_component;\r\n    let validatedData;\r\n    let updateList=[\"selected_accuracy\",\"feature_array\"];\r\n    let loopAlerts;\r\n    let alerts=[];\r\n    //loop thru independent validations\r\n    let componentsToValidate=\r\n    [\r\n        {validator:validators.damage,pkey:\"damage\",component_prop:\"selected_damage\"},\r\n        {validator:validators.accuracy,pkey:\"accuracy\",component_prop:'selected_accuracy'},\r\n        {validator:validators.feature,pkey:\"feature\",component_prop:'feature_array'},\r\n    ];\r\n    ({cleanedComponent, loopAlerts} = loopValidators(componentsToValidate, cleanedComponent));\r\n    alerts=alerts.concat(loopAlerts)\r\n\r\n    //update cost_multipliers for components needing update\r\n    validatedData=updateMultipliers(updateList,cleanedComponent,\"Mek-Melee\");\r\n    cleanedComponent.cost_multipliers=validatedData.data;\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    //validate space efficiency\r\n    let cost_multiplier=Object.entries(cleanedComponent.cost_multipliers).reduce((_multi, _val)=>\r\n    {//calc new cost_mulitplier\r\n        return _multi*_val[1];\r\n    },1);\r\n    cleanedComponent.cost_multiplier=round(cost_multiplier,2);\r\n\r\n    let total_cost=cleanedComponent.selected_damage.cost * cleanedComponent.cost_multiplier;\r\n    validatedData=validators.space_efficiency(cleanedComponent.efficiencies.space, total_cost, \"Mek-Melee\");\r\n    alerts=alerts.concat(validatedData.alerts);\r\n    cleanedComponent.efficiencies.space=validatedData.data;\r\n    //update static values\r\n    cleanedComponent.damage_capacity=cleanedComponent.selected_damage.damage;\r\n    cleanedComponent.weight=cleanedComponent.damage_capacity/2;\r\n\r\n    //check and update entangle-range trade values\r\n    let isEntangle=cleanedComponent.feature_array.some((_val)=>\r\n    {\r\n        return _val.feature==\"Entangle\";\r\n    });\r\n    if(isEntangle)\r\n    {\r\n        let base_damage=cleanedComponent.selected_damage.damage;\r\n        let range_mod=cleanedComponent.entangle.range_mod;\r\n        let damage_mod=cleanedComponent.entangle.damage_mod;\r\n        let cleanedEntangle=validators.entangle(base_damage, range_mod, damage_mod);\r\n        cleanedComponent.entangle={range_mod:cleanedEntangle.range_mod, damage_mod:cleanedEntangle.damage_mod};\r\n        cleanedComponent.final_damage=cleanedEntangle.damage;\r\n        alerts=alerts.concat(cleanedEntangle.alerts);\r\n    }\r\n    else if(cleanedComponent.entangle!==undefined)\r\n    {\r\n        cleanedComponent.entangle={range_mod:0,damage_mod:0};\r\n        cleanedComponent.final_damage=cleanedComponent.selected_damage.damage;\r\n    }\r\n\r\n    return {data:cleanedComponent, alerts:alerts};\r\n};\r\n\r\nexport {validateComponent};"],"sourceRoot":""}